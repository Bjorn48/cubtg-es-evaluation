/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 11:45:49 GMT 2019
 */

package org.databene.jdbacl.sql.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.RecognizerSharedState;
import org.databene.jdbacl.sql.parser.SQLLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLLexer_ESTest extends SQLLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      
      sQLLexer0.mVARCHAR2();
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(53, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      
      sQLLexer0.mT__87();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(87, recognizerSharedState0.type);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      
      sQLLexer0.mT__80();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertTrue(sQLLexer0.failed());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(80, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      
      recognizerSharedState0.backtracking = 742;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(742, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(742, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      
      sQLLexer0.mT__73();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(742, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(73, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(742, recognizerSharedState0.backtracking);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      
      recognizerSharedState0.backtracking = 48;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(48, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(48, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(43, SQLLexer.IN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      
      sQLLexer0.mT__71();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(48, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(71, recognizerSharedState0.type);
      assertEquals(48, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(43, SQLLexer.IN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(53).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      
      recognizerSharedState0.backtracking = 742;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(742, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(742, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      
      sQLLexer0.mT__69();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(742, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(69, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(742, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      
      sQLLexer0.mT__62();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(62, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(53).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      
      recognizerSharedState0.backtracking = 742;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(742, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(742, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(76, SQLLexer.T__76);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      
      sQLLexer0.mT__134();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(742, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(134, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(742, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(76, SQLLexer.T__76);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      
      sQLLexer0.mT__123();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(123, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      
      recognizerSharedState0.backtracking = 48;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(48, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(48, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      
      sQLLexer0.mT__116();
      assertEquals(48, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(116, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(48, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      
      sQLLexer0.mT__115();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(115, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(37, SQLLexer.GT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      
      sQLLexer0.mT__108();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(108, recognizerSharedState0.type);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(37, SQLLexer.GT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      
      sQLLexer0.mT__104();
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertTrue(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(104, recognizerSharedState0.type);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      
      sQLLexer0.mSTAR();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(47, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      
      sQLLexer0.mPLUS();
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(45, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      
      sQLLexer0.mNUMBER();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(52, recognizerSharedState0.type);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      
      recognizerSharedState0.backtracking = 742;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(742, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(742, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      
      sQLLexer0.mIN();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(742, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(742, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(43, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      
      recognizerSharedState0.backtracking = 9;
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      
      sQLLexer0.mCHAR();
      assertEquals(9, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(9, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(56, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(455).when(charStream0).getCharPositionInLine();
      doReturn(78).when(charStream0).getLine();
      doReturn(318, 10, 1195, (-456)).when(charStream0).LA(anyInt());
      doReturn((-456), 1042).when(charStream0).index();
      doReturn(1195).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(455, sQLLexer0.getCharPositionInLine());
      assertEquals(78, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(84, SQLLexer.T__84);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertNotNull(commonToken0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(455, sQLLexer0.getCharPositionInLine());
      assertEquals(78, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-456), commonToken0.getStartIndex());
      assertEquals(99, commonToken0.getChannel());
      assertEquals(60, commonToken0.getType());
      assertEquals(455, commonToken0.getCharPositionInLine());
      assertEquals(1041, commonToken0.getStopIndex());
      assertEquals(78, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(84, SQLLexer.T__84);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      
      String string0 = sQLLexer0.getGrammarFileName();
      assertNotNull(string0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", string0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertNotNull(sQLLexer0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(32, SQLLexer.AND);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(41, SQLLexer.IS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      
      try { 
        sQLLexer0.mXOR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertNotNull(sQLLexer0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(43, SQLLexer.IN);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      doReturn(0).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(4, SQLLexer.INT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(32, SQLLexer.AND);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(31, SQLLexer.OR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      
      try { 
        sQLLexer0.mT__99();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      
      try { 
        sQLLexer0.mT__98();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      
      try { 
        sQLLexer0.mT__97();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      
      try { 
        sQLLexer0.mT__96();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      
      try { 
        sQLLexer0.mT__95();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(60, SQLLexer.WS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      
      try { 
        sQLLexer0.mT__94();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      
      try { 
        sQLLexer0.mT__93();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      sQLLexer0.setCharStream(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      
      try { 
        sQLLexer0.mT__92();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-485)).when(charStream0).getCharPositionInLine();
      doReturn((-485)).when(charStream0).getLine();
      doReturn(484, 484).when(charStream0).LA(anyInt());
      doReturn(484).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-485), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-485), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      
      try { 
        sQLLexer0.mT__91();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__90();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(4, SQLLexer.INT);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      
      try { 
        sQLLexer0.mT__89();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      
      try { 
        sQLLexer0.mT__88();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      
      try { 
        sQLLexer0.mT__86();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(99).when(charStream0).getCharPositionInLine();
      doReturn(99).when(charStream0).getLine();
      doReturn(99, (-890)).when(charStream0).LA(anyInt());
      doReturn((-890)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(99, sQLLexer0.getCharPositionInLine());
      assertEquals(99, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(4, SQLLexer.INT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      
      try { 
        sQLLexer0.mT__85();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(96).when(charStream0).getCharPositionInLine();
      doReturn(82).when(charStream0).getLine();
      doReturn(107, 347).when(charStream0).LA(anyInt());
      doReturn(96).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertNotNull(sQLLexer0);
      assertEquals(96, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(82, sQLLexer0.getLine());
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      
      try { 
        sQLLexer0.mT__84();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      
      try { 
        sQLLexer0.mT__81();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(41, SQLLexer.IS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(39, SQLLexer.LT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__80();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      
      try { 
        sQLLexer0.mT__79();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(76, SQLLexer.T__76);
      
      try { 
        sQLLexer0.mT__78();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      
      try { 
        sQLLexer0.mT__77();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(43, SQLLexer.IN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      
      try { 
        sQLLexer0.mT__76();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      
      try { 
        sQLLexer0.mT__75();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      
      try { 
        sQLLexer0.mT__74();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(105).when(charStream0).getCharPositionInLine();
      doReturn(93).when(charStream0).getLine();
      doReturn(93, 93).when(charStream0).LA(anyInt());
      doReturn(105).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(93, sQLLexer0.getLine());
      assertEquals(105, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      
      try { 
        sQLLexer0.mT__73();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      
      try { 
        sQLLexer0.mT__72();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(60, SQLLexer.WS);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      
      try { 
        sQLLexer0.mT__71();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      
      try { 
        sQLLexer0.mT__70();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(507).when(charStream0).getCharPositionInLine();
      doReturn(4).when(charStream0).getLine();
      doReturn(4, 100).when(charStream0).LA(anyInt());
      doReturn(1591).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(507, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(4, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      
      try { 
        sQLLexer0.mT__69();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      
      try { 
        sQLLexer0.mT__68();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__67();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      
      try { 
        sQLLexer0.mT__66();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      
      try { 
        sQLLexer0.mT__65();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      
      try { 
        sQLLexer0.mT__64();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      
      try { 
        sQLLexer0.mT__63();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(31, SQLLexer.OR);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      
      try { 
        sQLLexer0.mT__62();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(39, SQLLexer.LT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      
      try { 
        sQLLexer0.mT__137();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      
      try { 
        sQLLexer0.mT__136();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertNotNull(sQLLexer0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(43, SQLLexer.IN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      sQLLexer0.setCharStream(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(43, SQLLexer.IN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      
      try { 
        sQLLexer0.mT__134();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      
      try { 
        sQLLexer0.mT__133();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(65).when(charStream0).getCharPositionInLine();
      doReturn(65).when(charStream0).getLine();
      doReturn(65, 65).when(charStream0).LA(anyInt());
      doReturn(65).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(65, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(65, sQLLexer0.getLine());
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      
      try { 
        sQLLexer0.mT__132();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(123).when(charStream0).getCharPositionInLine();
      doReturn((-977)).when(charStream0).getLine();
      doReturn(123, 123).when(charStream0).LA(anyInt());
      doReturn(123).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-977), sQLLexer0.getLine());
      assertEquals(123, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      
      try { 
        sQLLexer0.mT__131();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(31, SQLLexer.OR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      
      try { 
        sQLLexer0.mT__130();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertNotNull(sQLLexer0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(37, SQLLexer.GT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      
      try { 
        sQLLexer0.mT__129();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      
      try { 
        sQLLexer0.mT__128();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      
      try { 
        sQLLexer0.mT__127();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      
      try { 
        sQLLexer0.mT__126();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      
      try { 
        sQLLexer0.mT__125();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertNotNull(sQLLexer0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      
      try { 
        sQLLexer0.mT__124();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }
}
