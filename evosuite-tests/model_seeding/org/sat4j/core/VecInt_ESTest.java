/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:25:20 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VecInt_ESTest extends VecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.selectionSort(1033, 1033);
      // Undeclared exception!
      try { 
        vecInt0.delete(1033);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1033
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 4966;
      VecInt vecInt0 = new VecInt(4966, 4966);
      int[] intArray0 = new int[0];
      VecInt vecInt1 = new VecInt(intArray0);
      int int1 = 1336;
      int int2 = 882;
      vecInt0.set(948, 882);
      VecInt vecInt2 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        vecInt1.copyTo((IVecInt) readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = (-12);
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-12), (-12));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-1547));
      VecInt vecInt1 = (VecInt)vecInt0.push((-1547));
      vecInt0.subset((-1547));
      vecInt0.clear();
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt0.shrinkTo((-1547));
      vecInt0.moveTo2(iVecInt0);
      vecInt0.insertFirst(631);
      vecInt0.unsafePush(1);
      vecInt0.isEmpty();
      vecInt0.toString();
      vecInt0.indexOf((-1547));
      vecInt0.iterator();
      vecInt0.unsafeGet(1);
      int int0 = new Integer((-1));
      vecInt0.contains(0);
      vecInt0.ensure(0);
      vecInt0.containsAt(1, 631);
      vecInt0.indexOf(0);
      VecInt vecInt2 = new VecInt();
      VecInt vecInt3 = new VecInt();
      vecInt1.containsAt(631);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      vecInt1.sort(1, (-803), (Comparator<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 2049;
      int int1 = 1689;
      VecInt vecInt0 = new VecInt(2049, 1689);
      vecInt0.growTo(0, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      VecInt vecInt0 = new VecInt();
      vecInt0.size();
      vecInt0.push((-2096));
      vecInt0.last();
      vecInt0.size();
      vecInt0.iterator();
      vecInt0.unsafePush(1089);
      int int0 = 15;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1), 0, comparator0);
      vecInt0.shrink(5);
      // Undeclared exception!
      try { 
        vecInt0.set((-1810), (-1924));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 5309;
      intArray0[1] = (-1022);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      vecInt0.copyTo(intArray1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(2145, 2145, comparator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1102);
      intArray0[1] = (-4091);
      intArray0[2] = 866;
      intArray0[3] = 0;
      intArray0[4] = 585;
      intArray0[5] = 0;
      intArray0[6] = 172;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.remove(0);
      vecInt0.iterator();
      vecInt0.sortUnique();
      int int0 = (-1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1), (-1102), comparator0);
      // Undeclared exception!
      try { 
        vecInt0.remove(1439);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1102);
      intArray0[1] = (-4091);
      intArray0[2] = 866;
      intArray0[3] = 0;
      intArray0[4] = 585;
      intArray0[5] = 0;
      intArray0[6] = 172;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.iterator();
      vecInt0.sortUnique();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1), (-1102), comparator0);
      vecInt0.containsAt(95);
      vecInt0.containsAt(632);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.push(545);
      vecInt0.isEmpty();
      VecInt vecInt1 = new VecInt(193);
      vecInt1.subset(217);
      vecInt0.iterator();
      vecInt0.containsAt(4930, 4958);
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(193, 2254);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
      VecInt vecInt1 = (VecInt)vecInt0.push(0);
      vecInt0.hashCode();
      vecInt1.clear();
      vecInt1.push(1787);
      vecInt1.isSubsetOf(vecInt0);
      vecInt1.pushAll(vecInt0);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
      vecInt0.ensure(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.hashCode();
      VecInt vecInt1 = new VecInt(1756);
      vecInt1.copyTo(iVecInt0);
      vecInt0.containsAt(1756);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.size();
      vecInt0.shrink(0);
      // Undeclared exception!
      try { 
        vecInt0.containsAt((-1), (-342));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -341
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 346;
      vecInt0.shrinkTo(346);
      int int1 = 2166;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(2166, 1, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(1, 1, comparator1);
      vecInt0.iterator();
      // Undeclared exception!
      try { 
        vecInt0.sort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 173
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = new VecInt();
      vecInt0.containsAt(1760);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 1);
      vecInt0.ensure(2);
      vecInt0.hashCode();
      vecInt0.delete(1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
      vecInt0.ensure((-1547));
      vecInt0.push((-1547));
      vecInt0.hashCode();
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(29);
      // Undeclared exception!
      try { 
        vecInt0.remove(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 5;
      VecInt vecInt0 = new VecInt(5);
      int int1 = (-4072);
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((-4072));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.shrinkTo((-803));
      vecInt0.indexOf(1);
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 2;
      VecInt vecInt0 = new VecInt(446, 2);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.iterator();
      int int1 = (-511);
      // Undeclared exception!
      try { 
        vecInt0.remove((-3033));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 446
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = new VecInt();
      vecInt1.push(829);
      vecInt1.isEmpty();
      vecInt1.sort();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.isEmpty();
      vecInt0.clear();
      int int0 = 0;
      vecInt0.push(0);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      vecInt2.sort();
      VecInt vecInt3 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt3);
      // Undeclared exception!
      try { 
        vecInt3.copyTo((IVecInt) readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.push((-1547));
      VecInt vecInt2 = (VecInt)vecInt0.push((-1547));
      vecInt0.subset((-1547));
      vecInt0.clear();
      vecInt0.moveTo((IVecInt) vecInt2);
      vecInt0.shrinkTo((-1547));
      vecInt0.moveTo2(vecInt1);
      vecInt0.insertFirst(631);
      vecInt0.unsafePush(1);
      vecInt0.isEmpty();
      vecInt0.toString();
      vecInt0.indexOf((-1547));
      vecInt0.iterator();
      vecInt0.unsafeGet(1);
      vecInt0.pushAll(vecInt1);
      vecInt0.delete(0);
      vecInt0.contains(0);
      vecInt0.ensure(0);
      vecInt1.insertFirst((-1547));
      VecInt vecInt3 = new VecInt();
      vecInt1.clear();
      vecInt1.clear();
      vecInt1.push(2);
      vecInt2.last();
      vecInt3.size();
      vecInt3.pop();
      vecInt1.isSubsetOf(vecInt3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, (-1));
      vecInt0.subset(1);
      vecInt0.iterator();
      vecInt0.containsAt((-1), 1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, (-1));
      int int0 = 1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(0, 1, comparator0);
      vecInt0.subset(1);
      vecInt0.iterator();
      int int1 = 1;
      vecInt0.containsAt((-1), 1);
      int int2 = 0;
      // Undeclared exception!
      try { 
        vecInt0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      vecInt0.shrinkTo(4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.containsAt(1, 1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      // Undeclared exception!
      try { 
        vecInt0.get(1410);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1410
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(137, 137);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.selectionSort(137, 0, comparator0);
      // Undeclared exception!
      try { 
        vecInt1.set((-1298), (-2080));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      VecInt vecInt3 = new VecInt();
      vecInt3.equals(vecInt2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt0.clear();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1380);
      vecInt0.push((-562));
      vecInt0.contains(1380);
      int int0 = (-1);
      vecInt0.shrink(1380);
      int int1 = (-1);
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.pop();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrink(0);
      vecInt0.iterator();
      vecInt0.sort(comparator0);
      vecInt0.selectionSort(0, 0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        vecInt0.push(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1057, 1057);
      vecInt0.remove(1057);
      VecInt vecInt1 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt1);
      readOnlyVecInt0.copyTo((IVecInt) vecInt1);
      vecInt1.contains(5);
      IVecInt iVecInt0 = vecInt1.push(828);
      vecInt0.moveTo(iVecInt0);
      vecInt0.get(5);
      // Undeclared exception!
      try { 
        vecInt0.remove(2366);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      Object object0 = new Object();
      vecInt0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      vecInt0.shrinkTo(4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = new VecInt();
      vecInt0.equals(vecInt1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3006);
      intArray0[1] = (-297);
      intArray0[2] = 0;
      intArray0[3] = (-2265);
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = (-5636);
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 332;
      int int1 = (-1);
      VecInt vecInt0 = new VecInt(332, (-1));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(332, 1, comparator0);
      vecInt0.subset(1);
      vecInt0.iterator();
      // Undeclared exception!
      try { 
        vecInt0.containsAt((-1), (-30));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -29
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-1547));
      IVecInt iVecInt1 = vecInt0.push((-1547));
      vecInt0.subset((-1547));
      vecInt0.clear();
      vecInt0.moveTo(iVecInt1);
      vecInt0.shrinkTo((-1547));
      vecInt0.moveTo2(iVecInt0);
      vecInt0.insertFirst(631);
      vecInt0.unsafePush(1);
      vecInt0.isEmpty();
      vecInt0.toString();
      vecInt0.indexOf((-1547));
      vecInt0.iterator();
      vecInt0.unsafeGet(1);
      vecInt0.pushAll(iVecInt0);
      vecInt0.delete(0);
      vecInt0.contains(0);
      vecInt0.ensure(0);
      vecInt0.containsAt(1, 631);
      vecInt0.indexOf(0);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      vecInt1.clear();
      vecInt2.push(31);
      vecInt2.iterator();
      vecInt0.isSubsetOf(vecInt2);
      // Undeclared exception!
      try { 
        vecInt2.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrinkTo(346);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(4966, 2166, comparator1);
      vecInt0.selectionSort(4966, 346, comparator0);
      vecInt0.iterator();
      vecInt0.sort();
      vecInt0.insertFirst(4966);
      vecInt0.ensure(2166);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-2781), (-2781), comparator2);
      vecInt0.size();
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrinkTo(346);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(4966, 2166, comparator1);
      vecInt0.selectionSort(4966, 346, comparator0);
      vecInt0.iterator();
      vecInt0.sort();
      vecInt0.insertFirst(4966);
      // Undeclared exception!
      try { 
        vecInt0.copyTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[0];
      vecInt0.toString();
      vecInt0.copyTo(intArray0);
      vecInt0.toString();
      vecInt0.sortUnique();
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.size();
      vecInt0.unsafeGet(0);
      vecInt0.contains(5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3181;
      intArray0[3] = 0;
      intArray0[4] = 927;
      intArray0[5] = 0;
      intArray0[6] = (-1205);
      intArray0[7] = 3119;
      intArray0[8] = 948;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.set(3119, 1336);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[7];
      intArray0[0] = 607;
      IVecInt iVecInt0 = vecInt0.push(2);
      intArray0[1] = 600;
      vecInt0.copyTo(iVecInt0);
      intArray0[2] = 0;
      intArray0[3] = (-39);
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 0;
      vecInt0.copyTo(intArray0);
      vecInt0.moveTo(2, 0);
      // Undeclared exception!
      try { 
        vecInt0.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(0);
      vecInt0.iterator();
      vecInt0.ensure(0);
      vecInt0.subset(1303);
      vecInt0.pop();
      vecInt0.sort((-2540), (-3723));
      vecInt0.contains((-2540));
      vecInt0.toString();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-1547));
      IVecInt iVecInt1 = vecInt0.push((-1547));
      vecInt0.subset((-1547));
      vecInt0.clear();
      vecInt0.moveTo(iVecInt1);
      vecInt0.shrinkTo((-1547));
      vecInt0.moveTo2(iVecInt0);
      vecInt0.insertFirst(631);
      vecInt0.unsafePush(1);
      vecInt0.isEmpty();
      vecInt0.toString();
      vecInt0.indexOf((-1547));
      vecInt0.iterator();
      vecInt0.unsafeGet(1);
      vecInt0.delete(0);
      vecInt0.contains(0);
      vecInt0.ensure(0);
      vecInt0.containsAt(1, 631);
      vecInt0.indexOf(0);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      iVecInt1.containsAt(631);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1547);
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        vecInt1.moveTo(1775, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-1547));
      vecInt0.push((-1547));
      vecInt0.subset((-1547));
      vecInt0.clear();
      vecInt0.moveTo2(iVecInt0);
      vecInt0.insertFirst(631);
      int int0 = 1;
      vecInt0.unsafePush(1);
      vecInt0.isEmpty();
      vecInt0.toString();
      vecInt0.indexOf((-1547));
      vecInt0.iterator();
      vecInt0.unsafeGet(1);
      vecInt0.pushAll(iVecInt0);
      vecInt0.delete(1);
      vecInt0.contains((-1));
      vecInt0.ensure(0);
      vecInt0.containsAt(1, 631);
      vecInt0.indexOf(0);
      VecInt vecInt1 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt1.sort((-1547), 1, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -773
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 172;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.indexOf(1304);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-1687);
      VecInt vecInt0 = new VecInt(1201, (-1687));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1837), 1201, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1836
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      vecInt0.contains(0);
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt1.push(0);
      vecInt1.get(0);
      vecInt1.set(0, (-1439));
      IVecInt iVecInt0 = vecInt1.push(0);
      vecInt1.remove((-1439));
      vecInt1.copyTo(iVecInt0);
      vecInt1.pop();
      vecInt1.iterator();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      VecInt vecInt0 = new VecInt(539, 0);
      vecInt0.shrink(0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1057, 1057);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.copyTo((IVecInt) vecInt0);
      vecInt0.contains(5);
      IVecInt iVecInt0 = vecInt0.push(828);
      vecInt0.moveTo(iVecInt0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, (-1));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(0, 1, comparator0);
      vecInt0.iterator();
      int int0 = 1;
      vecInt0.containsAt((-1), 1);
      int int1 = 0;
      // Undeclared exception!
      try { 
        vecInt0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-1547);
      IVecInt iVecInt0 = vecInt0.push((-1547));
      IVecInt iVecInt1 = vecInt0.push((-1547));
      vecInt0.subset((-1547));
      vecInt0.clear();
      vecInt0.moveTo(iVecInt1);
      vecInt0.shrinkTo((-1547));
      vecInt0.moveTo2(iVecInt0);
      vecInt0.insertFirst((-1547));
      vecInt0.unsafePush(1);
      vecInt0.isEmpty();
      vecInt0.toString();
      vecInt0.indexOf((-1547));
      vecInt0.iterator();
      vecInt0.unsafeGet(1);
      int int1 = 0;
      vecInt0.delete(0);
      vecInt0.contains(0);
      vecInt0.ensure(0);
      // Undeclared exception!
      try { 
        vecInt0.containsAt(1, (-1547));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1546
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(0);
      VecInt vecInt1 = (VecInt)vecInt0.push(0);
      vecInt0.equals(vecInt1);
      VecInt vecInt2 = new VecInt();
      vecInt1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-1076));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, (-1), comparator0);
      vecInt0.shrink(15);
      // Undeclared exception!
      try { 
        vecInt0.set((-683), (-683));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1), 5, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      VecInt vecInt3 = new VecInt();
      VecInt vecInt4 = new VecInt();
      vecInt4.equals(vecInt2);
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3006);
      intArray0[1] = (-297);
      intArray0[2] = 0;
      intArray0[3] = (-2265);
      intArray0[4] = 0;
      intArray0[5] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 15;
      VecInt vecInt0 = new VecInt(15, 15);
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(0, 15, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrinkTo(346);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(4966, 2166, comparator1);
      vecInt0.selectionSort(4966, 346, comparator0);
      vecInt0.iterator();
      vecInt0.sort();
      int[] intArray0 = new int[6];
      intArray0[0] = 2166;
      intArray0[1] = 2166;
      intArray0[2] = 2166;
      intArray0[3] = 4966;
      intArray0[4] = 346;
      intArray0[5] = 1;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.clear();
      vecInt1.pushAll(vecInt0);
      // Undeclared exception!
      vecInt0.sort(346, 2131);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[6];
      intArray0[0] = 4300;
      intArray0[1] = 4300;
      intArray0[2] = 4300;
      intArray0[3] = 4300;
      intArray0[4] = 4300;
      intArray0[5] = 4300;
      vecInt0.moveTo(intArray0);
      vecInt0.push(4300);
      vecInt0.toString();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-1547));
      IVecInt iVecInt1 = vecInt0.push((-1547));
      vecInt0.subset((-1547));
      vecInt0.clear();
      vecInt0.moveTo(iVecInt1);
      vecInt0.shrinkTo((-1547));
      vecInt0.moveTo2(iVecInt0);
      vecInt0.insertFirst(631);
      vecInt0.unsafePush(1);
      vecInt0.isEmpty();
      vecInt0.toString();
      vecInt0.indexOf((-1547));
      vecInt0.iterator();
      vecInt0.unsafeGet(1);
      vecInt0.pushAll(iVecInt0);
      vecInt0.delete(1);
      vecInt0.contains((-1));
      vecInt0.ensure(0);
      vecInt0.containsAt(1, 631);
      vecInt0.indexOf(0);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      vecInt1.clear();
      vecInt2.push(31);
      vecInt2.iterator();
      vecInt0.isSubsetOf(vecInt2);
      // Undeclared exception!
      try { 
        vecInt2.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 785;
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(785);
      // Undeclared exception!
      try { 
        vecInt0.get(785);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 785
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(15);
      vecInt0.isEmpty();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(2663, (-618), comparator0);
      int int0 = (-1370);
      VecInt vecInt1 = new VecInt();
      int int1 = 372;
      vecInt0.isSubsetOf(vecInt1);
      VecInt vecInt2 = new VecInt();
      vecInt2.contains((-930));
      vecInt2.push(185);
      // Undeclared exception!
      try { 
        vecInt1.set(100, (-618));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-1076));
      int int0 = 15;
      vecInt0.pop();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(11, 15, (-2960), 583).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(0, 11, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      int int0 = 587;
      VecInt vecInt1 = new VecInt(587, 587);
      vecInt0.isEmpty();
      vecInt0.shrink((-805));
      int int1 = (-323);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset((-37));
      vecInt0.clone();
      int int0 = (-1892);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1892);
      vecInt0.shrink(2916);
      // Undeclared exception!
      try { 
        vecInt0.push(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2916
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      vecInt0.shrinkTo(4966);
      // Undeclared exception!
      try { 
        vecInt0.set(4966, 4966);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      vecInt0.selectionSort(5, 4966, comparator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.isEmpty();
      vecInt0.clear();
      vecInt0.push(0);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      VecInt vecInt3 = new VecInt();
      VecInt vecInt4 = new VecInt();
      vecInt4.pop();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(4941);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(4941, (-2522), comparator0);
      vecInt0.iterator();
      // Undeclared exception!
      try { 
        vecInt0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4966, 4966, 4966, 4966, 1352).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.clone();
      vecInt0.containsAt(413, 1556);
      // Undeclared exception!
      vecInt0.selectionSort(5, 4966, comparator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      vecInt0.sort();
      vecInt0.insertFirst((-1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      vecInt0.shrinkTo(4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.containsAt(4966, 1);
      vecInt0.indexOf(13);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      vecInt1.clear();
      vecInt1.push(2);
      vecInt2.toString();
      vecInt2.isSubsetOf(vecInt1);
      VecInt vecInt3 = new VecInt();
      vecInt3.clear();
      vecInt3.push(0);
      vecInt3.isEmpty();
      vecInt3.moveTo((IVecInt) vecInt2);
      vecInt3.pushAll(vecInt0);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1102);
      intArray0[1] = (-4091);
      intArray0[2] = 866;
      intArray0[3] = 0;
      intArray0[4] = 585;
      intArray0[5] = 0;
      intArray0[6] = 172;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.iterator();
      vecInt0.sortUnique();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1), (-1102), comparator0);
      vecInt0.containsAt(2104);
      vecInt0.containsAt(0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.push((-1547));
      vecInt0.push((-1547));
      vecInt0.subset((-1547));
      vecInt0.clear();
      vecInt0.shrinkTo((-1547));
      vecInt0.moveTo2(vecInt1);
      vecInt0.unsafePush(1);
      vecInt0.isEmpty();
      vecInt0.toString();
      vecInt0.indexOf((-1547));
      vecInt0.iterator();
      vecInt0.unsafeGet(1);
      vecInt0.pushAll(vecInt1);
      vecInt0.delete(0);
      vecInt0.contains(0);
      vecInt0.ensure(0);
      vecInt0.push(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.selectionSort(4942, (-1), comparator0);
      VecInt vecInt2 = new VecInt();
      VecInt vecInt3 = new VecInt();
      VecInt vecInt4 = new VecInt();
      vecInt4.clear();
      VecInt vecInt5 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt5.remove(5);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      intArray0[0] = 1089;
      intArray0[1] = 15;
      intArray0[2] = 849;
      intArray0[3] = 849;
      intArray0[4] = 849;
      intArray0[5] = 849;
      intArray0[6] = 849;
      VecInt vecInt2 = new VecInt(intArray0);
      VecInt vecInt3 = new VecInt();
      VecInt vecInt4 = new VecInt();
      vecInt4.push(1404);
      vecInt4.pop();
      vecInt4.pop();
      vecInt4.pop();
      vecInt4.size();
      vecInt4.pop();
      vecInt4.pop();
      vecInt4.size();
      // Undeclared exception!
      try { 
        vecInt4.set((-4), (-3429));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(2131);
      vecInt0.indexOf(2131);
      vecInt0.insertFirst((-111));
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-1547));
      vecInt0.push((-1547));
      vecInt0.subset((-1547));
      vecInt0.clear();
      vecInt0.moveTo2(iVecInt0);
      vecInt0.insertFirst(631);
      vecInt0.unsafePush(1);
      vecInt0.isEmpty();
      vecInt0.toString();
      vecInt0.indexOf((-1547));
      vecInt0.iterator();
      vecInt0.unsafeGet(1);
      vecInt0.pushAll(iVecInt0);
      vecInt0.delete(1);
      vecInt0.contains((-1));
      vecInt0.ensure(0);
      vecInt0.containsAt(1, 631);
      vecInt0.indexOf(0);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      vecInt1.clear();
      vecInt2.push(31);
      vecInt2.toString();
      vecInt0.isSubsetOf(vecInt2);
      vecInt0.moveTo(iVecInt0);
      vecInt2.pushAll(iVecInt0);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(47, 47, (-432), (-1217), 47).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      vecInt0.selectionSort(5, 4966, comparator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1102);
      intArray0[1] = (-4091);
      intArray0[2] = 866;
      intArray0[3] = 0;
      intArray0[4] = 585;
      intArray0[5] = 0;
      intArray0[6] = 172;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-1076));
      int int0 = 15;
      vecInt0.clone();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0, 15, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(0, 11, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 2;
      VecInt vecInt0 = new VecInt(0, 2);
      vecInt0.contains((-3622));
      vecInt0.toString();
      // Undeclared exception!
      try { 
        vecInt0.get((-494));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -494
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-350);
      // Undeclared exception!
      try { 
        vecInt0.get((-350));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -350
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.equals("");
      // Undeclared exception!
      try { 
        vecInt0.remove(584);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.sortUnique();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 498;
      intArray0[2] = 0;
      intArray0[3] = 1922;
      intArray0[4] = 1649;
      intArray0[5] = 0;
      vecInt0.moveTo(intArray0);
      vecInt0.moveTo(iVecInt0);
      vecInt0.push(2273);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, 0, comparator0);
      vecInt0.sortUnique();
      vecInt0.shrink(1);
      vecInt0.unsafePush(1);
      vecInt0.last();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, (-889));
      VecInt vecInt1 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt1.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-1547);
      VecInt vecInt1 = (VecInt)vecInt0.push((-1547));
      VecInt vecInt2 = (VecInt)vecInt0.push((-1547));
      vecInt0.subset((-1547));
      vecInt0.clear();
      vecInt0.moveTo2(vecInt1);
      vecInt0.insertFirst(631);
      int int1 = 1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.selectionSort(58, 58, comparator0);
      VecInt vecInt3 = new VecInt();
      vecInt1.contains(631);
      vecInt2.push(79);
      int int2 = 52;
      // Undeclared exception!
      try { 
        vecInt3.set((-1370), 52);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.clone();
      vecInt0.sortUnique();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 498;
      intArray0[2] = 0;
      intArray0[3] = 1922;
      intArray0[4] = 1649;
      intArray0[5] = 0;
      vecInt0.moveTo(intArray0);
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt1.containsAt(1649, (-1));
      vecInt0.indexOf(498);
      VecInt vecInt2 = new VecInt();
      VecInt vecInt3 = new VecInt();
      vecInt2.clear();
      vecInt0.push(0);
      vecInt1.iterator();
      vecInt1.isSubsetOf(vecInt0);
      // Undeclared exception!
      try { 
        vecInt2.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1102);
      intArray0[1] = (-4091);
      int int0 = 866;
      intArray0[2] = 866;
      intArray0[3] = 0;
      intArray0[4] = 585;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.subset((-470));
      // Undeclared exception!
      try { 
        vecInt0.growTo(866, 303);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 866
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo((-1213));
      vecInt0.iterator();
      vecInt0.ensure(0);
      int int0 = (-2540);
      int int1 = (-3723);
      // Undeclared exception!
      try { 
        vecInt0.subset(1303);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1057, 1057);
      VecInt vecInt1 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt1);
      readOnlyVecInt0.copyTo((IVecInt) vecInt1);
      vecInt1.contains(5);
      IVecInt iVecInt0 = vecInt1.push(828);
      vecInt0.moveTo(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.remove(2366);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-1386);
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1386), (-1386));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1201, (-1687));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1837), 1201, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      VecInt vecInt1 = new VecInt();
      vecInt1.size();
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.pop();
      vecInt0.isEmpty();
      vecInt1.shrinkTo(0);
      int int0 = 1372;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(1372, 0, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1898), (-704), comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(2131, 2131);
      vecInt0.indexOf(2131);
      vecInt0.insertFirst((-111));
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.toString();
      vecInt0.toArray();
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      int int0 = (-3094);
      // Undeclared exception!
      try { 
        vecInt1.remove((-3094));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      VecInt vecInt0 = new VecInt(716);
      VecInt vecInt1 = new VecInt();
      vecInt1.ensure(716);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt1);
      readOnlyVecInt0.copyTo((IVecInt) vecInt1);
      // Undeclared exception!
      try { 
        vecInt1.moveTo((IVecInt) readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      vecInt0.shrinkTo(4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(4966, 4966, comparator0);
      // Undeclared exception!
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
      vecInt0.ensure(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.equals(iVecInt0);
      IVecInt iVecInt1 = null;
      vecInt0.moveTo2(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[7];
      intArray0[0] = 607;
      IVecInt iVecInt0 = vecInt0.push(2);
      intArray0[1] = 600;
      vecInt0.copyTo(iVecInt0);
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 0;
      vecInt0.copyTo(intArray0);
      vecInt0.moveTo(2, 0);
      // Undeclared exception!
      try { 
        vecInt0.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort((-687), (-687), comparator0);
      int int0 = 684;
      // Undeclared exception!
      try { 
        vecInt0.remove((-1560));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      VecInt vecInt3 = new VecInt();
      vecInt3.push(0);
      vecInt2.iterator();
      vecInt3.equals(vecInt2);
      // Undeclared exception!
      try { 
        vecInt2.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(866, (-1164));
      // Undeclared exception!
      vecInt0.selectionSort(477, 709);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrinkTo(0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = new VecInt();
      vecInt1.push(0);
      vecInt1.get(0);
      vecInt1.set(0, (-1439));
      IVecInt iVecInt0 = vecInt1.push(0);
      vecInt1.remove((-1439));
      vecInt1.copyTo(iVecInt0);
      vecInt1.pop();
      vecInt1.iterator();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          VecInt vecInt0 = new VecInt(4966, 4966);
          Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          vecInt0.selectionSort(4966, 4966, comparator0);
          // Undeclared exception!
          vecInt0.sortUnique();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      vecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.remove((-1));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IteratorInt iteratorInt0 = vecInt0.iterator();
      int int0 = new Integer(9);
      vecInt0.equals(iteratorInt0);
      vecInt0.sort();
      VecInt vecInt1 = new VecInt();
      vecInt1.size();
      vecInt1.unsafePush(0);
      vecInt1.moveTo(0, 0);
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-1547));
      vecInt0.push((-1547));
      vecInt0.subset((-1547));
      VecInt vecInt1 = new VecInt();
      iVecInt0.remove((-1547));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3659;
      intArray0[1] = 0;
      intArray0[2] = 422;
      intArray0[3] = 316;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(316, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 316
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrinkTo(346);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(4966, 2166, comparator1);
      vecInt0.selectionSort(4966, 346, comparator0);
      vecInt0.iterator();
      vecInt0.sort();
      vecInt0.insertFirst(4966);
      vecInt0.ensure(2166);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-2781), (-2781), comparator2);
      vecInt0.insertFirst(2165);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.selectionSort((-1072), (-1072), (Comparator<Integer>) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      VecInt vecInt1 = new VecInt(intArray0);
      VecInt vecInt2 = new VecInt();
      vecInt2.push(829);
      vecInt2.isEmpty();
      // Undeclared exception!
      try { 
        vecInt2.sort((-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1060);
      intArray0[1] = (-756);
      intArray0[2] = 0;
      intArray0[3] = 3826;
      intArray0[4] = (-1);
      intArray0[5] = 1;
      intArray0[6] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-1055), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.sort(comparator0);
      VecInt vecInt2 = new VecInt();
      vecInt2.pushAll(vecInt1);
      int int0 = 4475;
      // Undeclared exception!
      try { 
        vecInt2.remove(4475);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      int int0 = (-2199);
      int[] intArray0 = new int[0];
      vecInt1.unsafePush((-2199));
      // Undeclared exception!
      try { 
        vecInt1.moveTo((-2199), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      vecInt0.shrinkTo(4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(4966, 2166, comparator0);
      vecInt0.iterator();
      vecInt0.toString();
      vecInt0.iterator();
      vecInt0.containsAt(587);
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 4966, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.indexOf(1);
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(2);
      vecInt0.toArray();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      VecInt vecInt1 = new VecInt(587, 587);
      vecInt0.isSubsetOf(vecInt1);
      int[] intArray0 = new int[8];
      intArray0[0] = 587;
      intArray0[1] = 875;
      intArray0[2] = 875;
      intArray0[3] = 875;
      intArray0[4] = 1064;
      intArray0[5] = 1064;
      intArray0[6] = (-1);
      intArray0[2] = 875;
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.pushAll(vecInt0);
      // Undeclared exception!
      try { 
        vecInt1.sort((-34), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -17
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrinkTo(346);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      VecInt vecInt1 = new VecInt(587, 587);
      vecInt0.isSubsetOf(vecInt1);
      int[] intArray0 = new int[8];
      intArray0[0] = 587;
      intArray0[1] = 875;
      intArray0[2] = 875;
      intArray0[3] = 875;
      intArray0[4] = 1064;
      intArray0[5] = 1064;
      intArray0[6] = (-1);
      intArray0[2] = 875;
      vecInt1.moveTo2(vecInt0);
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.clear();
      vecInt2.push(1732);
      vecInt0.last();
      vecInt0.size();
      vecInt1.pop();
      vecInt0.isSubsetOf(vecInt2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = (-1);
      VecInt vecInt0 = new VecInt(0, (-1));
      int int1 = 1;
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      int int0 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      vecInt0.moveTo(0, intArray0);
      vecInt0.shrinkTo(2);
      vecInt0.iterator();
      vecInt0.unsafePush(0);
      vecInt0.growTo(2, 2);
      vecInt0.iterator();
      // Undeclared exception!
      try { 
        vecInt0.copyTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1057, 1057);
      VecInt vecInt1 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt1);
      readOnlyVecInt0.copyTo((IVecInt) vecInt1);
      vecInt1.contains(1057);
      IVecInt iVecInt0 = vecInt1.push(828);
      iVecInt0.pop();
      vecInt0.moveTo(iVecInt0);
      vecInt0.size();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1465, 1465);
      vecInt0.push(3143);
      vecInt0.toString();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      VecInt vecInt1 = (VecInt)vecInt0.push(587);
      vecInt0.isEmpty();
      vecInt0.shrink((-805));
      vecInt0.clear();
      VecInt vecInt2 = (VecInt)vecInt0.push(0);
      vecInt1.isEmpty();
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.moveTo((IVecInt) vecInt2);
      vecInt1.equals((Object) null);
      vecInt0.pushAll(vecInt1);
      vecInt1.contains(0);
      VecInt vecInt3 = new VecInt();
      VecInt vecInt4 = new VecInt();
      VecInt vecInt5 = new VecInt();
      VecInt vecInt6 = new VecInt();
      vecInt6.equals(vecInt1);
      vecInt6.pop();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push((-3048));
      VecInt vecInt1 = new VecInt();
      vecInt1.contains(372);
      IVecInt iVecInt0 = vecInt1.push(0);
      vecInt0.subset((-3048));
      vecInt1.clear();
      vecInt1.moveTo(iVecInt0);
      vecInt1.shrinkTo(560);
      vecInt1.moveTo2(iVecInt0);
      vecInt1.insertFirst(0);
      vecInt1.unsafePush((-3048));
      vecInt1.isEmpty();
      vecInt0.toString();
      vecInt0.indexOf(631);
      vecInt0.iterator();
      // Undeclared exception!
      try { 
        vecInt1.unsafeGet((-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -15
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      vecInt0.clear();
      vecInt0.containsAt(1489, 1580);
      vecInt0.push(0);
      vecInt0.last();
      vecInt0.size();
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, (-1));
      int int0 = 1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.insertFirst((-1));
      vecInt0.sort(0, 1, comparator0);
      vecInt0.subset(1);
      vecInt0.iterator();
      int int1 = 1;
      vecInt0.containsAt((-1), 1);
      int int2 = 0;
      // Undeclared exception!
      try { 
        vecInt0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo((-1762), (-1762));
      int int0 = 826;
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(826);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 826
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
      int int0 = 0;
      vecInt0.ensure(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.equals(iVecInt0);
      vecInt0.moveTo2(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 4966;
      VecInt vecInt0 = new VecInt(4966, 4966);
      int int1 = 346;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrinkTo(346);
      int int2 = 2166;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(4966, 2166, comparator1);
      vecInt0.selectionSort(4966, 346, comparator0);
      vecInt0.iterator();
      vecInt0.sort();
      vecInt0.shrinkTo((-1161));
      // Undeclared exception!
      try { 
        vecInt0.insertFirst(4966);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1161
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1756);
      vecInt0.subset((-3497));
      IVecInt[] iVecIntArray0 = vecInt0.subset(5250);
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = new VecInt();
      vecInt1.push(0);
      vecInt1.get(0);
      int int0 = (-1295);
      // Undeclared exception!
      try { 
        vecInt0.set(0, (-1439));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-1);
      int int1 = 587;
      IVecInt iVecInt0 = vecInt0.push(587);
      vecInt0.isEmpty();
      vecInt0.shrink(2074);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4966, 4966);
      vecInt0.shrinkTo(4966);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      boolean boolean0 = vecInt1.equals(readOnlyVecInt0);
      assertTrue(vecInt1.equals((Object)vecInt2));
      assertEquals(4966, vecInt0.last());
      assertEquals(4966, vecInt0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 1221;
      VecInt vecInt0 = new VecInt(1221, 1221);
      vecInt0.insertFirst(1221);
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 1201;
      int int1 = (-1687);
      VecInt vecInt0 = new VecInt(1201, (-1687));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.growTo((-1687), (-1687));
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1837), 1201, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
