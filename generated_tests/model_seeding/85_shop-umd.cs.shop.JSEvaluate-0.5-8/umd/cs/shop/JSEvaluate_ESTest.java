/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 16:40:07 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSEvaluate_ESTest extends JSEvaluate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(1812.932F, 1.0F);
      JSTerm jSTerm1 = JSEvaluate.minOf((-1.0F), (-1.0F));
      JSTerm jSTerm2 = JSEvaluate.applyOperator(">", jSTerm1, jSTerm0);
      assertEquals("[1.0]", jSTerm0.toString());
      assertEquals(0, jSTerm2.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(294.2F, 294.2F);
      JSTerm jSTerm1 = JSEvaluate.minOf((-4213.0F), (-4213.0F));
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = JSEvaluate.applyOperator("/", jSTerm2, jSTerm0);
      assertEquals("[1.0]", jSTerm0.toString());
      assertEquals("[-4213.0]", jSTerm3.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult(1.0F, 1.0F);
      JSTerm jSTerm1 = JSEvaluate.div(19.946F, (-2947.4792F));
      JSTerm jSTerm2 = JSEvaluate.applyOperator("-", jSTerm0, jSTerm1);
      assertEquals("[1.0067672]", jSTerm2.toString());
      assertEquals("[-0.006767138]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult(0.0F, 0.0F);
      JSTerm jSTerm1 = JSEvaluate.addsub(684.3912F, 1550.638F, 42);
      JSTerm jSTerm2 = JSEvaluate.applyOperator("+", jSTerm1, jSTerm0);
      assertEquals("[0.0]", jSTerm0.toString());
      assertEquals("[65811.19]", jSTerm2.toString());
      assertEquals("[65811.19]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = JSEvaluate.equal(1.0F, 1.0F);
      JSEvaluate.applyOperator("member", jSTerm0, jSTerm1);
      assertEquals("[t]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil((-37.004F));
      assertEquals("[-37.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf((-1567.5161F), 1.4E-45F);
      assertEquals("[1.4E-45]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.notequal(3251.0002F, 1.0F);
      assertEquals("[t]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal(0.0F, (-252.4524F));
      assertEquals("[t]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater(0.0F, 499.87833F);
      assertTrue(jSTerm0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0394592F);
      float float0 = JSEvaluate.numericValue(jSTerm0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub(1469.35F, 1469.35F, (-914));
      float float0 = JSEvaluate.numericValue(jSTerm0);
      assertEquals((-1341516.5F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal((-3468.01F), 0.0F);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        JSEvaluate.numericValue(jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal(0.0F, 0.0F);
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        JSEvaluate.numericValue(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater(2, 2);
      // Undeclared exception!
      try { 
        JSEvaluate.numericValue(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.not((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.minElement((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        JSEvaluate.minElement(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.member((JSTerm) null, (JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        JSEvaluate.member(jSTerm0, jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.maxElement((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary((String) null, jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary("notequal", jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary("seKTer", jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperator("ckBtV", (JSTerm) null, (JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "-");
      jSTerm0.add((Object) "-");
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperator("-", jSTerm0, jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperator("- ", jSTerm0, jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.OperantNum((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(1.0F, 1.0F);
      JSEvaluate.member(jSTerm0, jSTerm0);
      assertEquals("[1.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = JSEvaluate.member(jSTerm0, jSTerm0);
      assertEquals(0, jSTerm1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = JSEvaluate.not(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[t]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.notequal((-95.963F), (-95.963F));
      assertEquals("[]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal(2, 3027.0F);
      assertTrue(jSTerm0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal(2152.8088F, 2152.8088F);
      jSTerm0.add((Object) jSTerm0);
      float float0 = JSEvaluate.numericValue(jSTerm0);
      assertEquals("[t, (this Collection)]", jSTerm0.toString());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal(1469.35F, 1469.35F);
      float float0 = JSEvaluate.numericValue(jSTerm0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("[t]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(337.4F, 337.4F);
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("ceil", jSTerm0);
      assertEquals("[338.0]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(0.0F);
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("floor", jSTerm0);
      assertEquals("[0.0]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal(1.0F, 1.0F);
      JSEvaluate.applyOperatorUnary(".", jSTerm0);
      assertEquals("[t]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(0.0F);
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("VH',$?uDXR<wEI\\ua#", jSTerm0);
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(0.0F);
      jSTerm0.makeVariable();
      JSEvaluate.applyOperatorUnary("p_t", jSTerm0);
      assertEquals("[0.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult(1513.3F, 1513.3F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("max", jSTerm0, jSTerm0);
      assertEquals("[2290077.0]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(0.0F, 3009.24F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("min", jSTerm0, jSTerm0);
      assertEquals("[0.0]", jSTerm0.toString());
      assertEquals("[0.0]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(3009.24F, 3009.24F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("*", jSTerm0, jSTerm0);
      JSTerm jSTerm2 = JSEvaluate.applyOperator("*", jSTerm1, jSTerm0);
      assertEquals("[9055525.0]", jSTerm1.toString());
      assertEquals("[2.72502477E10]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(2);
      JSTerm jSTerm1 = JSEvaluate.equal(2, 2);
      JSEvaluate.applyOperator("ckBt", jSTerm0, jSTerm1);
      assertEquals("[t]", jSTerm1.toString());
      assertEquals("[2.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(0.0F);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = JSEvaluate.minOf(473.0F, (-1378.7588F));
      JSEvaluate.applyOperator((String) null, jSTerm1, jSTerm0);
      assertEquals("[0.0]", jSTerm0.toString());
      assertEquals("[-1378.7588]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(0.0F, 0.0F);
      jSTerm0.makeVariable();
      JSEvaluate.applyOperator("+", jSTerm0, jSTerm0);
      assertEquals("[0.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("ceil");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("floor");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("equal");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("not");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult(1.0F, 1.0F);
      JSTerm jSTerm1 = JSEvaluate.maxElement(jSTerm0);
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ".");
      // Undeclared exception!
      try { 
        JSEvaluate.maxElement(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater(1.0F, 1.0F);
      JSTerm jSTerm1 = JSEvaluate.minOf((-2930.7742F), (-2930.7742F));
      JSTerm jSTerm2 = JSEvaluate.applyOperator("%eArch5L", jSTerm1, jSTerm1);
      jSTerm2.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        JSEvaluate.maxElement(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = JSEvaluate.maxElement(jSTerm0);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(0, jSTerm1.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ".");
      // Undeclared exception!
      try { 
        JSEvaluate.minElement(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("[]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ".");
      // Undeclared exception!
      try { 
        JSEvaluate.member(jSTerm0, jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div((-2272.29F), 1.0F);
      JSTerm jSTerm1 = JSEvaluate.not(jSTerm0);
      assertEquals("[-2272.29]", jSTerm0.toString());
      assertTrue(jSTerm1.isEmpty());
  }
}
