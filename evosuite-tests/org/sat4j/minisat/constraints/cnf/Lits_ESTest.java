/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:26:08 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Propagatable;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lits_ESTest extends Lits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lits lits0 = new Lits();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, iLogAble0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        lits0.setReason((-1880), originalWLClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -940
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getReason((-176));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -88
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.setLevel((-2841), 338);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1421
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getLevel((-2606));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1303
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-1368));
      lits0.reset(2737);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Lits.toStringX((-2291));
      assertEquals("-x-1146", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = Lits.toString((-296));
      assertEquals("-148", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool(0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1050);
      int int0 = lits0.nextFreeVarId(true);
      assertEquals(1, lits0.realnVars());
      assertEquals(1051, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.belongsToPool(2422);
      assertFalse(boolean0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.belongsToPool((-314));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.getFromPool(129);
      assertEquals(129, lits0.nVars());
      assertEquals(258, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.init(129);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1);
      lits0.reset(2);
      assertEquals(1, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lits lits0 = new Lits();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, iLogAble0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      lits0.getFromPool(99);
      lits0.watch(198, originalWLClause0);
      assertEquals(99, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.watches(84);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-1683));
      lits0.watches(3367);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.undos(0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1050);
      lits0.undos(2100);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-641));
      int int0 = lits0.realnVars();
      assertEquals(641, lits0.nVars());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not(1);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not(1051);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1050, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(2);
      int int0 = lits0.nVars();
      assertEquals(1, lits0.realnVars());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(0);
      boolean boolean0 = lits0.isSatisfied(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isSatisfied(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(1);
      boolean boolean0 = lits0.isFalsified(0);
      assertEquals(0, lits0.realnVars());
      assertTrue(boolean0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getReason(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getLevel(128);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.setLevel(2, 102);
      int int0 = lits0.getLevel(2);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(11);
      int int0 = lits0.getLevel(22);
      assertEquals(11, lits0.nVars());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1);
      boolean boolean0 = lits0.belongsToPool(1);
      assertEquals(1, lits0.realnVars());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.valueToString(Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.unassign(4662);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4662
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.satisfies(1502);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1502
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(65535);
      // Undeclared exception!
      lits0.resetPool();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.reset(2084);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2084
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isUnassigned(911);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 911
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isImplied((-326));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -163
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isFalsified(2631);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2631
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.init(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getFromPool(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.forgets(2422);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4844
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(0);
      boolean boolean0 = lits0.isUnassigned(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(2);
      boolean boolean0 = lits0.isUnassigned(2);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool(3978);
      assertEquals(3978, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.reset(105);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isSatisfied((-2524));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2523
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.nextFreeVarId(false);
      assertEquals(1, int0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(15);
      boolean boolean0 = lits0.isImplied(30);
      assertEquals(15, lits0.nVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.isImplied(87);
      assertEquals(0, lits0.realnVars());
      assertFalse(boolean0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = Lits.toStringX(102);
      assertEquals("+x51", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = Lits.toString(1);
      assertEquals("-0", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(2553);
      lits0.valueToString(1457);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.isUnassigned(87);
      assertTrue(boolean0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(0);
      String string0 = lits0.valueToString(0);
      assertEquals("T", string0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(26);
      // Undeclared exception!
      try { 
        lits0.satisfies(26);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(87);
      // Undeclared exception!
      try { 
        lits0.satisfies(86);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(45);
      lits0.unassign(45);
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.unassign(45);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool((-291));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.ensurePool(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.belongsToPool(129);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.belongsToPool(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(87);
      int int0 = lits0.getFromPool(87);
      assertEquals(87, lits0.nVars());
      assertEquals(174, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getFromPool(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1274);
      int int0 = lits0.getFromPool(90);
      assertEquals(2, lits0.realnVars());
      assertEquals(180, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.init(7);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(101);
      String string0 = lits0.valueToString(101);
      assertEquals("T", string0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.watches(3367);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3367
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Lits lits0 = new Lits();
      UnitClause unitClause0 = new UnitClause(2);
      lits0.setReason(2, unitClause0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.realnVars();
      assertEquals(0, lits0.nVars());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.watch(0, (Propagatable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.undos((-4423));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2212
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not((-3273));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals((-3274), int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(2);
      assertEquals(2, lits0.nVars());
      
      lits0.resetPool();
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isFalsified(2);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.nVars();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.capacity();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(94);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }
}
