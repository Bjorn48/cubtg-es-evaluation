/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:08:01 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractClauseSelectorSolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.AllMUSes;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AllMUSes_ESTest extends AllMUSes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&9dz\"<su[");
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsOutputSolver0);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<AbstractMinimalModel>(abstractMinimalModel0);
      ASolverFactory<OptToSatAdapter> aSolverFactory1 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory1).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractClauseSelectorSolver<AbstractMinimalModel> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<AbstractMinimalModel>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(abstractClauseSelectorSolver0).getAddedVars();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int[] intArray0 = new int[0];
      AbstractClauseSelectorSolver<AbstractMinimalModel> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<AbstractMinimalModel>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, false, false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("conflict ").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).model();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(863).when(abstractClauseSelectorSolver0).nVars();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      ASolverFactory<Minimal4InclusionModel> aSolverFactory1 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      ASolverFactory<MinOneDecorator> aSolverFactory1 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered(vecInt0, checkMUSSolutionListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes((AbstractClauseSelectorSolver<? extends ISolver>) null, aSolverFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS(iVecInt0, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(1);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) readOnlyVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes(false, (ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes((ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractClauseSelectorSolver<AbstractMinimalModel> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<AbstractMinimalModel>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(abstractClauseSelectorSolver0).getAddedVars();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory1 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      VecInt vecInt0 = new VecInt(8);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      ASolverFactory<SolutionCounter> aSolverFactory1 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((IVecInt) readOnlyVecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false, false).when(dimacsOutputSolver0).isVerbose();
      doReturn(false).when(dimacsOutputSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      doReturn((IConstr) null).when(dimacsOutputSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(dimacsOutputSolver0).nVars();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      ModelIterator modelIterator0 = new ModelIterator(negationDecorator0, 1436L);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(modelIterator0, solutionFoundListener0);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIteratorToSATAdapter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      List<IVecInt> list0 = allMUSes0.computeAllMSS(iVecInt0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      Collection<Integer> collection0 = groupClauseSelectorSolver0.getAddedVars();
      int[] intArray0 = new int[0];
      AbstractClauseSelectorSolver<AbstractMinimalModel> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<AbstractMinimalModel>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(collection0, collection0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, false, false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null, (IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).model();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn((-1)).when(abstractClauseSelectorSolver0).nVars();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered((IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false).when(dimacsOutputSolver0).isSatisfiable(anyBoolean());
      doReturn(false, false).when(dimacsOutputSolver0).isVerbose();
      doReturn(false).when(dimacsOutputSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      doReturn((IConstr) null).when(dimacsOutputSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(dimacsOutputSolver0).nVars();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      ModelIterator modelIterator0 = new ModelIterator(negationDecorator0, 1436L);
      modelIterator0.isSatisfiable();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(modelIterator0, solutionFoundListener0);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIteratorToSATAdapter0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractClauseSelectorSolver<SubModelIterator> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<SubModelIterator>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(abstractClauseSelectorSolver0).getAddedVars();
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      FullClauseSelectorSolver fullClauseSelectorSolver0 = (FullClauseSelectorSolver)allMUSes0.getSolverInstance();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractClauseSelectorSolver<AbstractMinimalModel> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<AbstractMinimalModel>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      allMUSes0.reset();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.getMssList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes((AbstractClauseSelectorSolver<? extends ISolver>) null, aSolverFactory0);
      ASolverFactory<MinOneDecorator> aSolverFactory1 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      ASolverFactory<MaxSatDecorator> aSolverFactory1 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
