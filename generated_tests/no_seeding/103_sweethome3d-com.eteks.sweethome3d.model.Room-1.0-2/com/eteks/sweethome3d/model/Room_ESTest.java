/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:20:29 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.TextStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.move(0.0F, (-3708.3062F));
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-3708.3062F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.containsPoint((-1836.5979F), 1.0F, 0.0F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaYOffset(8192);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(8192.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = room0.isAreaCenterPointAt(1.0F, 1.0F, 1.0F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(8192.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[5][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.isAreaCenterPointAt(8192, 8192, 8192);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaXOffset(2.0F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isAreaCenterPointAt(2.0F, 40.875546F, 338.09967F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.isNameCenterPointAt(0, 0, 784.572F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.move(4.7986317F, 4.7986317F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4.7986317F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4.7986317F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isNameCenterPointAt((-2278.3774F), 8192, 8192);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4.7986317F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4.7986317F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameXOffset((-2258.778F));
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals((-2258.778F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = room0.isNameCenterPointAt(520.672F, 520.672F, (-1800.6288F));
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals((-2258.778F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.move((-2243.0562F), (-2.0F));
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getName());
      assertEquals((-2243.0562F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-2.0F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isNameCenterPointAt(41.029724F, (-97.43594F), (-1765.0F));
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getName());
      assertEquals((-2243.0562F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-2.0F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      int int0 = room0.getPointIndexAt(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[8][5];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 6.141743F;
      floatArray1[1] = 514.9F;
      floatArray0[2] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(3.0708716F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(257.45F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(8, floatArray0.length);
      assertNotNull(room0);
      
      int int0 = room0.getPointIndexAt(6.141743F, (-2434.3008F), 1.0F);
      assertEquals(3.0708716F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(257.45F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.containsPoint((-10.823251F), (-1226.7057F), (-1226.7057F));
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1837.907F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1.0F;
      floatArray2[1] = (-1899.8195F);
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(1.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-30.956238F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.isClockwise();
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(1.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-30.956238F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.move((-1.0F), 2949.0F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2949.0F, room0.getYCenter(), 0.01F);
      assertEquals((-1.0F), room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      float float0 = room0.getArea();
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2949.0F, room0.getYCenter(), 0.01F);
      assertEquals((-1.0F), room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaAngle((-1370.7295F));
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(5.28809F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      
      room0.setAreaAngle(0.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.removePoint(1);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(1, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.removePoint(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setPoint(0, 1.0F, 0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setPoint(173.1338F, 0, 0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(86.5669F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.setPoint(668.0F, (-1374.5577F), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.addPoint((-1.0F), (-1.0F), 0);
      assertEquals((-0.5F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.addPoint(1116.8174F, 1.0F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertEquals(558.4087F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameAngle(5.7189F);
      assertEquals(5.7189F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setNameAngle(0.0F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameYOffset((-3708.3062F));
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-3708.3062F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(9, floatArray0.length);
      assertNotNull(room0);
      
      room0.setName("o");
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals("o", room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(9, floatArray0.length);
      
      room0.setName("o");
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals("o", room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float[][] floatArray0 = new float[4][4];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 653.4F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = 4281.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 2448.8022F;
      floatArray3[1] = 653.4F;
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertFalse(room0.isClockwise());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2140.5F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(1224.4011F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(4, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.isSingular();
      assertFalse(room0.isClockwise());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2140.5F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(1224.4011F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[8][5];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(8, floatArray0.length);
      assertNotNull(room0);
      
      room0.setCeilingVisible(false);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = room0.isCeilingVisible();
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[10][4];
      Room room0 = new Room(floatArray0);
      assertEquals(10, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(10, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaVisible(false);
      assertEquals(10, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(10, floatArray0.length);
      
      boolean boolean0 = room0.isAreaVisible();
      assertEquals(10, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(10, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.intersectsRectangle((-2890.0F), 8192, 8192, (-3082.0447F));
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      float[] floatArray1 = new float[2];
      floatArray1[1] = 520.672F;
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(260.336F, room0.getYCenter(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getYCenter();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(260.336F, room0.getYCenter(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, floatArray0.length);
      assertEquals(260.336F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[7];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getYCenter();
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, floatArray0.length);
      assertEquals((-0.5F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[8][8];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 2924.2466F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(1462.1233F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(8, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getXCenter();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(1462.1233F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(8, floatArray0.length);
      assertEquals(1462.1233F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (-3705.8523F);
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals((-1852.9261F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getXCenter();
      assertTrue(room0.isFloorVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals((-1852.9261F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1852.9261F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[9][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-1031.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-515.5F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(room0);
      
      int int0 = room0.getPointIndexAt(7508.617F, 2533.26F, 8192.0F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-515.5F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = new float[8][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameYOffset(2306.92F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2306.92F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(8, floatArray0.length);
      
      float float0 = room0.getNameYOffset();
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2306.92F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(2306.92F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameXOffset(8192);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(8192.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      float float0 = room0.getNameXOffset();
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(8192.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(8192.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameXOffset((-11.070287F));
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-11.070287F), room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      float float0 = room0.getNameXOffset();
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-11.070287F), room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertEquals((-11.070287F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setName("YU");
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals("YU", room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      
      String string0 = room0.getName();
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals("YU", room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(string0);
      assertEquals("YU", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setName("");
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals("", room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      String string0 = room0.getName();
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals("", room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      Level level0 = new Level("|~;_%uA32KKIogtu", (-3118.0F), 1.7838608F, (-1688.9F));
      assertEquals((-1688.9F), level0.getHeight(), 0.01F);
      assertEquals("|~;_%uA32KKIogtu", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(1.7838608F, level0.getFloorThickness(), 0.01F);
      assertEquals((-3118.0F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      room0.setLevel(level0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-1688.9F), level0.getHeight(), 0.01F);
      assertEquals("|~;_%uA32KKIogtu", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(1.7838608F, level0.getFloorThickness(), 0.01F);
      assertEquals((-3118.0F), level0.getElevation(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Level level1 = room0.getLevel();
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-1688.9F), level1.getHeight(), 0.01F);
      assertEquals("|~;_%uA32KKIogtu", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(1.7838608F, level1.getFloorThickness(), 0.01F);
      assertEquals((-3118.0F), level1.getElevation(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(level1);
      assertSame(level1, level0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", (Content) null, 763.7387F, 763.7387F, "", true);
      assertEquals("", catalogTexture0.getName());
      assertEquals(763.7387F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(763.7387F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getId());
      assertTrue(catalogTexture0.isModifiable());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals("", catalogTexture0.getName());
      assertEquals(763.7387F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(763.7387F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getId());
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(763.7387F, homeTexture0.getHeight(), 0.01F);
      assertEquals(763.7387F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertNotNull(homeTexture0);
      
      room0.setFloorTexture(homeTexture0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals("", catalogTexture0.getName());
      assertEquals(763.7387F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(763.7387F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getId());
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(763.7387F, homeTexture0.getHeight(), 0.01F);
      assertEquals(763.7387F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertEquals(2, floatArray0.length);
      
      HomeTexture homeTexture1 = room0.getFloorTexture();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals("", homeTexture1.getName());
      assertEquals(763.7387F, homeTexture1.getWidth(), 0.01F);
      assertEquals(763.7387F, homeTexture1.getHeight(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals(2, floatArray0.length);
      assertNotNull(homeTexture1);
      assertSame(homeTexture1, homeTexture0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float[][] floatArray0 = new float[4][4];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(room0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", "#JXv$a0_bVM?b\")kH", (Content) null, (-875.4748F), (-1.0F), "", true);
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("#JXv$a0_bVM?b\")kH", catalogTexture0.getName());
      assertEquals((-875.4748F), catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getId());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("#JXv$a0_bVM?b\")kH", catalogTexture0.getName());
      assertEquals((-875.4748F), catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getId());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals("#JXv$a0_bVM?b\")kH", homeTexture0.getName());
      assertEquals((-875.4748F), homeTexture0.getWidth(), 0.01F);
      assertNotNull(homeTexture0);
      
      room0.setFloorTexture(homeTexture0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("#JXv$a0_bVM?b\")kH", catalogTexture0.getName());
      assertEquals((-875.4748F), catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getId());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals("#JXv$a0_bVM?b\")kH", homeTexture0.getName());
      assertEquals((-875.4748F), homeTexture0.getWidth(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      HomeTexture homeTexture1 = room0.getFloorTexture();
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-875.4748F), homeTexture1.getWidth(), 0.01F);
      assertEquals("#JXv$a0_bVM?b\")kH", homeTexture1.getName());
      assertEquals((-1.0F), homeTexture1.getHeight(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals(4, floatArray0.length);
      assertNotNull(homeTexture1);
      assertSame(homeTexture1, homeTexture0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setFloorShininess(2137.9407F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(2137.9407F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      float float0 = room0.getFloorShininess();
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(2137.9407F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2137.9407F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      room0.setFloorColor(integer0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0, (int)room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      Integer integer1 = room0.getFloorColor();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0, (int)room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      room0.setFloorColor(integer0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(1, (int)room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      
      Integer integer1 = room0.getFloorColor();
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(1, (int)room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      Integer integer0 = new Integer((-4469));
      assertNotNull(integer0);
      assertEquals((-4469), (int)integer0);
      
      room0.setFloorColor(integer0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-4469), (int)room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      Integer integer1 = room0.getFloorColor();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-4469), (int)room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(integer1);
      assertEquals((-4469), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      float[][] floatArray0 = new float[6][4];
      CatalogTexture catalogTexture0 = new CatalogTexture("Can't create temporary folder ", "Can't create temporary folder ", (Content) null, 0.0F, 461.0F, (String) null, true);
      assertEquals("Can't create temporary folder ", catalogTexture0.getName());
      assertEquals(461.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("Can't create temporary folder ", catalogTexture0.getId());
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals("Can't create temporary folder ", catalogTexture0.getName());
      assertEquals(461.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("Can't create temporary folder ", catalogTexture0.getId());
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals(461.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals("Can't create temporary folder ", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertNotNull(homeTexture0);
      
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      room0.setCeilingTexture(homeTexture0);
      assertEquals("Can't create temporary folder ", catalogTexture0.getName());
      assertEquals(461.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("Can't create temporary folder ", catalogTexture0.getId());
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals(461.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals("Can't create temporary folder ", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(6, floatArray0.length);
      
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture1.getWidth(), 0.01F);
      assertEquals(461.0F, homeTexture1.getHeight(), 0.01F);
      assertEquals("Can't create temporary folder ", homeTexture1.getName());
      assertEquals(6, floatArray0.length);
      assertNotNull(homeTexture1);
      assertSame(homeTexture1, homeTexture0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("6aQ#L)=_Y[Af,c", "6aQ#L)=_Y[Af,c", (Content) null, 763.7387F, 763.7387F, "6aQ#L)=_Y[Af,c");
      assertEquals("6aQ#L)=_Y[Af,c", catalogTexture0.getId());
      assertEquals("6aQ#L)=_Y[Af,c", catalogTexture0.getCreator());
      assertEquals(763.7387F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(763.7387F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("6aQ#L)=_Y[Af,c", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals("6aQ#L)=_Y[Af,c", catalogTexture0.getId());
      assertEquals("6aQ#L)=_Y[Af,c", catalogTexture0.getCreator());
      assertEquals(763.7387F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(763.7387F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("6aQ#L)=_Y[Af,c", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(763.7387F, homeTexture0.getWidth(), 0.01F);
      assertEquals(763.7387F, homeTexture0.getHeight(), 0.01F);
      assertEquals("6aQ#L)=_Y[Af,c", homeTexture0.getName());
      assertNotNull(homeTexture0);
      
      room0.setCeilingTexture(homeTexture0);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals("6aQ#L)=_Y[Af,c", catalogTexture0.getId());
      assertEquals("6aQ#L)=_Y[Af,c", catalogTexture0.getCreator());
      assertEquals(763.7387F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(763.7387F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("6aQ#L)=_Y[Af,c", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(763.7387F, homeTexture0.getWidth(), 0.01F);
      assertEquals(763.7387F, homeTexture0.getHeight(), 0.01F);
      assertEquals("6aQ#L)=_Y[Af,c", homeTexture0.getName());
      assertEquals(2, floatArray0.length);
      
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals("6aQ#L)=_Y[Af,c", homeTexture1.getName());
      assertEquals(763.7387F, homeTexture1.getHeight(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals(763.7387F, homeTexture1.getWidth(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(homeTexture1);
      assertSame(homeTexture1, homeTexture0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[][] floatArray0 = new float[8][4];
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, (-40.0F), (-40.0F));
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-40.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-40.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(8, floatArray0.length);
      assertNotNull(room0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-40.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-40.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getName());
      assertEquals((-40.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertEquals((-40.0F), homeTexture0.getWidth(), 0.01F);
      assertNotNull(homeTexture0);
      
      room0.setCeilingTexture(homeTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-40.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-40.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertEquals((-40.0F), homeTexture0.getWidth(), 0.01F);
      assertEquals(8, floatArray0.length);
      
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertTrue(room0.isFloorVisible());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals("", homeTexture1.getName());
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals((-40.0F), homeTexture1.getHeight(), 0.01F);
      assertEquals((-40.0F), homeTexture1.getWidth(), 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(homeTexture1);
      assertSame(homeTexture1, homeTexture0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      Integer integer0 = new Integer(18);
      assertNotNull(integer0);
      assertEquals(18, (int)integer0);
      
      room0.setCeilingColor(integer0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(18, (int)room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Integer integer1 = room0.getCeilingColor();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(18, (int)room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(integer1);
      assertEquals(18, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Integer integer0 = new Integer((-498));
      assertNotNull(integer0);
      assertEquals((-498), (int)integer0);
      
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setCeilingColor(integer0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-498), (int)room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(2, floatArray0.length);
      
      Integer integer1 = room0.getCeilingColor();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-498), (int)room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(integer1);
      assertEquals((-498), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float[][] floatArray0 = new float[4][4];
      Room room0 = new Room(floatArray0);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaXOffset(3547.643F);
      assertEquals(4, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(3547.643F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      float float0 = room0.getAreaXOffset();
      assertEquals(4, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(3547.643F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3547.643F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaXOffset((-1301.0F));
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1301.0F), room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      float float0 = room0.getAreaXOffset();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1301.0F), room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1301.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      TextStyle textStyle0 = new TextStyle((-2636.0F));
      assertEquals((-2636.0F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      room0.setAreaStyle(textStyle0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-2636.0F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals(2, floatArray0.length);
      
      TextStyle textStyle1 = room0.getAreaStyle();
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-2636.0F), textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isBold());
      assertFalse(textStyle1.isItalic());
      assertEquals(2, floatArray0.length);
      assertNotNull(textStyle1);
      assertSame(textStyle1, textStyle0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaAngle((-1765.0F));
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.57507133F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      float float0 = room0.getAreaAngle();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.57507133F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0.57507133F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      float[][] floatArray0 = new float[10][4];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 224.89249F;
      floatArray0[3] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(112.44624F, room0.getXCenter(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(10, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.containsPoint(224.89249F, 0.0F, 224.89249F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(112.44624F, room0.getXCenter(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(10, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setFloorVisible(false);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertFalse(room1.isFloorVisible());
      assertFalse(room1.isClockwise());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertFalse(room1.equals((Object)room0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      float[] floatArray1 = new float[2];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 520.672F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(260.336F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(260.336F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getName());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertTrue(room1.isClockwise());
      assertEquals(260.336F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-0.5F), room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertFalse(room1.equals((Object)room0));
  }
}
