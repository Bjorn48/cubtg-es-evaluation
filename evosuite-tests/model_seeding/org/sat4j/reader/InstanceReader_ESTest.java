/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:14:07 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.reader.AIGReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.JSONReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IOptimizationProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstanceReader_ESTest extends InstanceReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0, (EncodingStrategyAdapter) null);
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null, checkMUSSolutionListener0);
      AIGReader aIGReader0 = new AIGReader(optToSatAdapter0);
      InstanceReader instanceReader0 = new InstanceReader(clausalCardinalitiesDecorator0, aIGReader0);
      Map<Integer, String> map0 = instanceReader0.getMapping();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[8];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, fixedPeriodRestarts0, mUSLauncher0);
      JSONReader<Minimal4CardinalityModel> jSONReader0 = new JSONReader<Minimal4CardinalityModel>((Minimal4CardinalityModel) null);
      InstanceReader instanceReader0 = new InstanceReader(solver0, jSONReader0);
      String string0 = instanceReader0.decode(intArray0);
      assertEquals("[0,0,0,0,0,0,0,0]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".aig");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.sat4j.minisat.core.VoidTracing");
      try { 
        instanceReader0.parseInstance(".aig");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAIG format only!
         //
         verifyException("org.sat4j.reader.AIGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("y1evd)H.kp^vwqi)M{6");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Contradiction with implied literal");
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance("y1evd)H.kp^vwqi)M{6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".*`D.bz2");
      try { 
        instanceReader0.parseInstance(".*`D.bz2");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      InstanceReader instanceReader0 = new InstanceReader(iSolver0);
      // Undeclared exception!
      try { 
        instanceReader0.hasAMapping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      // Undeclared exception!
      try { 
        instanceReader0.handleFileName((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        instanceReader0.decode(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0);
      try { 
        instanceReader0.parseInstance(".aig");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null, checkMUSSolutionListener0);
      AIGReader aIGReader0 = new AIGReader(optToSatAdapter0);
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null, aIGReader0);
      try { 
        instanceReader0.parseInstance("eral");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      try { 
        instanceReader0.parseInstance(".gz");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      try { 
        instanceReader0.parseInstance(":8UeVQwmh82Bu3ZI");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      instanceReader0.handleFileName(".aag.aag", "ED9@1/uz+qW.aag");
      Reader reader0 = instanceReader0.handleFileName(".aag.aag", ".agu/.bA2");
      assertFalse(reader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      instanceReader0.handleFileName(".aig", "Solver timed out");
      try { 
        instanceReader0.parseInstance(".aig");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      instanceReader0.handleFileName("EZCNF", "EZCNF");
      Reader reader0 = instanceReader0.handleFileName("EZCNF", "EZCNF");
      assertFalse(reader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      instanceReader0.handleFileName("http://.bz2", "http://.bz2");
      try { 
        instanceReader0.parseInstance("http://.bz2");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      InstanceReader instanceReader0 = new InstanceReader(iSolver0);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance((InputStream) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use a domain specific Reader (LecteurDimacs, AIGReader, etc.) for stream input 
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null, checkMUSSolutionListener0);
      AIGReader aIGReader0 = new AIGReader(optToSatAdapter0);
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null, aIGReader0);
      boolean boolean0 = instanceReader0.hasAMapping();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        instanceReader0.decode(intArray0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      // Undeclared exception!
      try { 
        instanceReader0.getMapping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null, checkMUSSolutionListener0);
      AIGReader aIGReader0 = new AIGReader(optToSatAdapter0);
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null, aIGReader0);
      int[] intArray0 = new int[1];
      String string0 = instanceReader0.decode(intArray0);
      assertEquals("", string0);
  }
}
