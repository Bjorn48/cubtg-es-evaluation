/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:14:16 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.reader.AAGReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ISolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AAGReader_ESTest extends AAGReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      // Undeclared exception!
      aAGReader0.parseInstance((InputStream) bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        aAGReader0.parseInstance((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      try { 
        aAGReader0.parseInstance((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e|1UU^k;PU.U");
      mockPrintWriter0.println("e|1UU^k;PU.U");
      mockPrintWriter0.close();
      InputStream inputStream0 = Reader.getInputStreamFromFilename("e|1UU^k;PU.U");
      try { 
        aAGReader0.parseInstance(inputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorAAG format only!
         //
         verifyException("org.sat4j.reader.AAGReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e|1^k;PU.U");
      mockPrintWriter0.println("aag");
      mockPrintWriter0.close();
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      InputStream inputStream0 = Reader.getInputStreamFromFilename("e|1^k;PU.U");
      try { 
        aAGReader0.parseInstance(inputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown character \uFFFF
         //
         verifyException("org.sat4j.reader.EfficientScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      int[] intArray0 = new int[0];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e|1UU^k;PU.U");
      aAGReader0.decode(intArray0, (PrintWriter) mockPrintWriter0);
      assertFalse(aAGReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      int[] intArray0 = new int[0];
      String string0 = aAGReader0.decode(intArray0);
      assertEquals("", string0);
  }
}
