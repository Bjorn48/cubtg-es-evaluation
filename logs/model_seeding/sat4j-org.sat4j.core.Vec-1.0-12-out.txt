* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.core.Vec
* Starting Client-0
* Connecting to master process on port 17044
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.core.Vec
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1334
* Using seed 1550516330326
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 418 / 1334
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8620689655172413
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7578947368421053
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7908878504672897
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.4473684210526316
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.9210526315789473
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.868421052631579
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6842105263157895
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 299
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9080459770114943
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8210526315789474
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8399532710280374
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7684210526315789
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 398
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9367816091954023
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8842105263157894
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8995327102803738
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8315789473684211
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 500
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9367816091954023
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9100467289719626
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8736842105263158
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 606
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9367816091954023
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9182242990654206
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8736842105263158
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 711
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9540229885057471
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9263157894736842
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9462616822429907
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 787
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9540229885057471
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9263157894736842
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9462616822429907
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9540229885057471
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9263157894736842
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9462616822429907
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
* Search finished after 123s and 6 generations, 8021 statements, best individual has fitness: 85.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9540229885057471
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9263157894736842
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9462616822429907
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
* Minimizing test suite
[MASTER] 20:02:19.247 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 174
* Number of covered goals: 166
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 95
* Number of covered goals: 88
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 96%
* Total number of goals: 27
* Number of covered goals: 26
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 856
* Number of covered goals: 810
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 63%
* Total number of goals: 38
* Number of covered goals: 24
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 38
* Number of covered goals: 38
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 38
* Number of covered goals: 38
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 95
* Number of covered goals: 85
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9540229885057471
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9263157894736842
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9462616822429907
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
* Generated 121 tests with total length 1682
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 20:03:05.067 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.689% of time used, but only 14/121 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 17%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9540229885057471
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9263157894736842
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9462616822429907
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
* Compiling and checking tests
[MASTER] 20:03:48.348 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: ArrayIndexOutOfBoundsException
[MASTER] 20:03:48.348 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vec<String> vec0 = new Vec<String>(0);
String[] stringArray0 = new String[5];
stringArray0[0] = "";
stringArray0[1] = "S]*^$=GwDaiO";
stringArray0[2] = "X3hew0";
stringArray0[3] = "org.sat4j.core.Vec$1";
stringArray0[4] = "Ng`{L!dni({9e 5CF";
Vec<String> vec1 = new Vec<String>(stringArray0);
vec1.removeFromLast("X3hew0");

[MASTER] 20:03:55.063 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.util.concurrent.ExecutionException: org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
[MASTER] 20:03:55.066 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vec<String> vec0 = new Vec<String>();
assertNotNull(vec0);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());

ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 6);
Integer integer0 = Integer.valueOf(1);
assertEquals(1, (int)integer0);
assertNotNull(integer0);

String string0 = integer0.toString();
assertEquals("1", string0);
assertNotNull(string0);

Vec<Integer> vec1 = new Vec<Integer>(1701, integer0);
assertNotNull(vec1);
assertFalse(vec1.isEmpty());
assertEquals(1701, vec1.size());

IVec<Integer> iVec0 = vec1.clone();
assertNotNull(iVec0);
assertFalse(vec1.isEmpty());
assertEquals(1701, vec1.size());
assertEquals(1701, iVec0.size());
assertFalse(iVec0.isEmpty());

ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(iVec0);
assertNotNull(readOnlyVec0);
assertFalse(vec1.isEmpty());
assertEquals(1701, vec1.size());
assertEquals(1701, iVec0.size());
assertFalse(iVec0.isEmpty());
assertFalse(readOnlyVec0.isEmpty());
assertEquals(1701, readOnlyVec0.size());

readOnlyVecArray0[0] = readOnlyVec0;
ReadOnlyVec<Integer> readOnlyVec1 = new ReadOnlyVec<Integer>(iVec0);
assertNotNull(readOnlyVec1);
assertFalse(vec1.isEmpty());
assertEquals(1701, vec1.size());
assertEquals(1701, iVec0.size());
assertFalse(iVec0.isEmpty());
assertEquals(1701, readOnlyVec1.size());
assertFalse(readOnlyVec1.isEmpty());

readOnlyVecArray0[1] = readOnlyVec1;
Vec<Integer> vec2 = new Vec<Integer>();
assertFalse(vec2.equals((Object)vec1));
assertNotNull(vec2);
assertEquals(0, vec2.size());
assertTrue(vec2.isEmpty());

ReadOnlyVec<Integer> readOnlyVec2 = new ReadOnlyVec<Integer>(vec2);
assertFalse(vec2.equals((Object)vec1));
assertFalse(readOnlyVec2.equals((Object)readOnlyVec1));
assertFalse(readOnlyVec2.equals((Object)readOnlyVec0));
assertNotNull(readOnlyVec2);
assertEquals(0, vec2.size());
assertTrue(vec2.isEmpty());
assertTrue(readOnlyVec2.isEmpty());
assertEquals(0, readOnlyVec2.size());

readOnlyVecArray0[2] = readOnlyVec2;
ReadOnlyVec<Integer> readOnlyVec3 = new ReadOnlyVec<Integer>(readOnlyVec2);
assertFalse(vec2.equals((Object)vec1));
assertFalse(readOnlyVec2.equals((Object)readOnlyVec1));
assertFalse(readOnlyVec2.equals((Object)readOnlyVec0));
assertFalse(readOnlyVec3.equals((Object)readOnlyVec0));
assertTrue(readOnlyVec3.equals((Object)readOnlyVec2));
assertFalse(readOnlyVec3.equals((Object)readOnlyVec1));
assertNotNull(readOnlyVec3);
assertEquals(0, vec2.size());
assertTrue(vec2.isEmpty());
assertTrue(readOnlyVec2.isEmpty());
assertEquals(0, readOnlyVec2.size());
assertEquals(0, readOnlyVec3.size());
assertTrue(readOnlyVec3.isEmpty());

readOnlyVecArray0[3] = readOnlyVec3;
ReadOnlyVec<Integer> readOnlyVec4 = new ReadOnlyVec<Integer>(readOnlyVec0);
assertFalse(vec1.equals((Object)vec2));
assertFalse(readOnlyVec0.equals((Object)readOnlyVec2));
assertFalse(readOnlyVec0.equals((Object)readOnlyVec3));
assertTrue(readOnlyVec4.equals((Object)readOnlyVec1));
assertFalse(readOnlyVec4.equals((Object)readOnlyVec2));
assertFalse(readOnlyVec4.equals((Object)readOnlyVec3));
assertNotNull(readOnlyVec4);
assertFalse(vec1.isEmpty());
assertEquals(1701, vec1.size());
assertEquals(1701, iVec0.size());
assertFalse(iVec0.isEmpty());
assertFalse(readOnlyVec0.isEmpty());
assertEquals(1701, readOnlyVec0.size());
assertFalse(readOnlyVec4.isEmpty());
assertEquals(1701, readOnlyVec4.size());

readOnlyVecArray0[4] = readOnlyVec4;
ReadOnlyVec<Integer> readOnlyVec5 = new ReadOnlyVec<Integer>(readOnlyVec0);
assertTrue(readOnlyVec5.equals((Object)readOnlyVec1));
assertFalse(readOnlyVec5.equals((Object)readOnlyVec3));
assertFalse(readOnlyVec5.equals((Object)readOnlyVec2));
assertFalse(vec1.equals((Object)vec2));
assertFalse(readOnlyVec0.equals((Object)readOnlyVec2));
assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
assertFalse(readOnlyVec0.equals((Object)readOnlyVec3));
assertNotNull(readOnlyVec5);
assertEquals(1701, readOnlyVec5.size());
assertFalse(readOnlyVec5.isEmpty());
assertFalse(vec1.isEmpty());
assertEquals(1701, vec1.size());
assertEquals(1701, iVec0.size());
assertFalse(iVec0.isEmpty());
assertFalse(readOnlyVec0.isEmpty());
assertEquals(1701, readOnlyVec0.size());

readOnlyVecArray0[5] = readOnlyVec5;
Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>(readOnlyVecArray0);
assertNotNull(vec3);
assertFalse(vec3.isEmpty());
assertEquals(6, vec3.size());
assertEquals(6, readOnlyVecArray0.length);

vec3.remove(readOnlyVec5);
assertNotSame(readOnlyVec5, readOnlyVec3);
assertNotSame(readOnlyVec5, readOnlyVec0);
assertNotSame(readOnlyVec5, readOnlyVec2);
assertNotSame(readOnlyVec5, readOnlyVec1);
assertNotSame(readOnlyVec5, readOnlyVec4);
assertNotSame(vec1, vec2);
assertNotSame(readOnlyVec0, readOnlyVec4);
assertNotSame(readOnlyVec0, readOnlyVec1);
assertNotSame(readOnlyVec0, readOnlyVec2);
assertNotSame(readOnlyVec0, readOnlyVec3);
assertNotSame(readOnlyVec0, readOnlyVec5);
assertTrue(readOnlyVec5.equals((Object)readOnlyVec1));
assertFalse(readOnlyVec5.equals((Object)readOnlyVec3));
assertFalse(readOnlyVec5.equals((Object)readOnlyVec2));
assertFalse(vec1.equals((Object)vec2));
assertTrue(readOnlyVec0.equals((Object)readOnlyVec5));
assertFalse(readOnlyVec0.equals((Object)readOnlyVec2));
assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
assertFalse(readOnlyVec0.equals((Object)readOnlyVec3));
assertEquals(1701, readOnlyVec5.size());
assertFalse(readOnlyVec5.isEmpty());
assertFalse(vec3.isEmpty());
assertEquals(5, vec3.size());
assertFalse(vec1.isEmpty());
assertEquals(1701, vec1.size());
assertEquals(1701, iVec0.size());
assertFalse(iVec0.isEmpty());
assertFalse(readOnlyVec0.isEmpty());
assertEquals(1701, readOnlyVec0.size());
assertEquals(6, readOnlyVecArray0.length);

Vec<Object> vec4 = new Vec<Object>();
assertNotNull(vec4);
assertTrue(vec4.isEmpty());
assertEquals(0, vec4.size());

Vec<Vec<Object>> vec5 = new Vec<Vec<Object>>(227, vec4);
assertNotNull(vec5);
assertTrue(vec4.isEmpty());
assertEquals(0, vec4.size());
assertEquals(227, vec5.size());
assertFalse(vec5.isEmpty());

vec5.insertFirstWithShifting(vec4);
assertTrue(vec4.isEmpty());
assertEquals(0, vec4.size());
assertFalse(vec5.isEmpty());
assertEquals(228, vec5.size());


[MASTER] 20:04:05.827 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.sat4j.core.Vec;
[MASTER] 20:04:05.829 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>(1602);
assertNotNull(vec0);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());

int int0 = 5378;
int int1 = 0;
Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertFalse(integer0.equals((Object)int0));
assertTrue(integer0.equals((Object)int1));
assertNotNull(integer0);

Vec<Integer> vec1 = new Vec<Integer>(5378, integer0);
assertFalse(integer0.equals((Object)int0));
assertTrue(integer0.equals((Object)int1));
assertNotNull(vec1);
assertEquals(5378, vec1.size());
assertFalse(vec1.isEmpty());

vec0.growTo(1602, vec1);
assertFalse(integer0.equals((Object)int0));
assertTrue(integer0.equals((Object)int1));
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertEquals(5378, vec1.size());
assertFalse(vec1.isEmpty());

Vec<Integer>[] vecArray0 = vec0.toArray();
assertNotNull(vecArray0);
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertEquals(1602, vecArray0.length);

Vec<Object> vec2 = new Vec<Object>(vecArray0);
assertNotNull(vec2);
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertFalse(vec2.isEmpty());
assertEquals(1602, vec2.size());
assertEquals(1602, vecArray0.length);

vec1.clear();
assertFalse(integer0.equals((Object)int0));
assertTrue(integer0.equals((Object)int1));
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());

ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
doReturn(5378, 306, 1602, 0, 0).when(toIntFunction0).applyAsInt(any());
Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
assertNotNull(comparator0);

vec2.sort(comparator0);
vec2.clear();
ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec2);
Vec<String> vec3 = new Vec<String>();
ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec3);
ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(vec3);
String string0 = null;
Vec<String> vec4 = new Vec<String>(int0, string0);
ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(vec4);
Integer.valueOf(int1);
int int2 = (-1816);
Integer.toBinaryString(int2);
vec1.remove((Integer) int2);
vec4.size();

[MASTER] 20:04:07.451 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.sat4j.core.Vec;
[MASTER] 20:04:07.452 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>(1602);
assertNotNull(vec0);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());

int int0 = 0;
Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(integer0);

Vec<Integer> vec1 = new Vec<Integer>(5378, integer0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(vec1);
assertFalse(vec1.isEmpty());
assertEquals(5378, vec1.size());

vec0.growTo(1602, vec1);
assertTrue(integer0.equals((Object)int0));
assertFalse(vec0.isEmpty());
assertEquals(1602, vec0.size());
assertFalse(vec1.isEmpty());
assertEquals(5378, vec1.size());

Vec<Integer>[] vecArray0 = vec0.toArray();
assertNotNull(vecArray0);
assertFalse(vec0.isEmpty());
assertEquals(1602, vec0.size());
assertEquals(1602, vecArray0.length);

vec1.copyTo((IVec<Integer>) vec1);
assertTrue(integer0.equals((Object)int0));
assertEquals(10756, vec1.size());
assertFalse(vec1.isEmpty());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
vec1.selectionSort((-5290), 5378, comparator0);

[MASTER] 20:04:10.498 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.sat4j.core.Vec;
[MASTER] 20:04:10.499 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>(1602);
assertNotNull(vec0);
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Vec<Integer> vec1 = new Vec<Integer>(5378, integer0);
assertNotNull(vec1);
assertFalse(vec1.isEmpty());
assertEquals(5378, vec1.size());

vec0.growTo(1602, vec1);
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertFalse(vec1.isEmpty());
assertEquals(5378, vec1.size());

Vec<Integer>[] vecArray0 = vec0.toArray();
assertNotNull(vecArray0);
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertEquals(1602, vecArray0.length);

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
vec1.sort(3845, 5378, comparator0);
assertFalse(vec1.isEmpty());
assertEquals(5378, vec1.size());

Vec<Object> vec2 = new Vec<Object>(vecArray0);
assertNotNull(vec2);
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertFalse(vec2.isEmpty());
assertEquals(1602, vec2.size());
assertEquals(1602, vecArray0.length);

vec1.insertFirstWithShifting(integer0);
assertFalse(vec1.isEmpty());
assertEquals(5379, vec1.size());

Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>((-3003));

[MASTER] 20:04:11.690 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: ArrayIndexOutOfBoundsException
[MASTER] 20:04:11.691 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

String[] stringArray0 = new String[5];
stringArray0[0] = "Rbv[gv=N<b~bP76(";
stringArray0[1] = "Rbv[gv=N<b~bP76(";
stringArray0[2] = "Rbv[gv=N<b~bP76(";
stringArray0[3] = "Rbv[gv=N<b~bP76(";
stringArray0[4] = "Rbv[gv=N<b~bP76(";
Vec<String> vec0 = new Vec<String>(stringArray0);
assertNotNull(vec0);
assertFalse(vec0.isEmpty());
assertEquals(5, vec0.size());
assertEquals(5, stringArray0.length);

vec0.removeFromLast("Rbv[gv=N<b~bP76(");

[MASTER] 20:04:12.387 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: ArrayIndexOutOfBoundsException
[MASTER] 20:04:12.388 [logback-1] WARN  JUnitAnalyzer - Failing test:
 String[] stringArray0 = new String[8];
stringArray0[0] = "}-V04/^ve9C{A#[%";
stringArray0[1] = "";
stringArray0[2] = "7x(>@YQD^/5 0v";
stringArray0[3] = "M";
stringArray0[4] = "";
stringArray0[5] = "t>||y";
stringArray0[6] = "org.sat4j.core.Vec$1";
stringArray0[7] = "@wjN$:Z+Y=QoB(&!n";
Vec<String> vec0 = new Vec<String>(stringArray0);
assertNotNull(vec0);
assertEquals(8, vec0.size());
assertFalse(vec0.isEmpty());
assertEquals(8, stringArray0.length);

vec0.removeFromLast("@wjN$:Z+Y=QoB(&!n");

[MASTER] 20:04:13.103 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.sat4j.core.Vec;
[MASTER] 20:04:13.104 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>(1602);
assertNotNull(vec0);
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Vec<Integer> vec1 = new Vec<Integer>(5378, integer0);
assertNotNull(vec1);
assertFalse(vec1.isEmpty());
assertEquals(5378, vec1.size());

vec0.growTo(1602, vec1);
assertFalse(vec0.isEmpty());
assertEquals(1602, vec0.size());
assertFalse(vec1.isEmpty());
assertEquals(5378, vec1.size());

Vec<Integer>[] vecArray0 = vec0.toArray();
assertNotNull(vecArray0);
assertFalse(vec0.isEmpty());
assertEquals(1602, vec0.size());
assertEquals(1602, vecArray0.length);

Vec<Object> vec2 = new Vec<Object>(vecArray0);
assertNotNull(vec2);
assertFalse(vec0.isEmpty());
assertEquals(1602, vec0.size());
assertEquals(1602, vec2.size());
assertFalse(vec2.isEmpty());
assertEquals(1602, vecArray0.length);

Integer integer1 = Integer.valueOf(3098);
assertEquals(3098, (int)integer1);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);

vec1.remove(integer1);

[MASTER] 20:04:13.954 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.sat4j.core.Vec;
[MASTER] 20:04:13.955 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>(1602);
assertNotNull(vec0);
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());

Integer integer0 = new Integer(1602);
assertEquals(1602, (int)integer0);
assertNotNull(integer0);

Vec<Integer> vec1 = new Vec<Integer>(1602, integer0);
assertNotNull(vec1);
assertEquals(1602, vec1.size());
assertFalse(vec1.isEmpty());

vec0.growTo(1602, vec1);
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertEquals(1602, vec1.size());
assertFalse(vec1.isEmpty());

Vec<Integer>[] vecArray0 = vec0.toArray();
assertNotNull(vecArray0);
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertEquals(1602, vecArray0.length);

ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());

[MASTER] 20:04:16.087 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.sat4j.core.Vec;
[MASTER] 20:04:16.087 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>(1602);
assertNotNull(vec0);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Vec<Integer> vec1 = new Vec<Integer>(5378, integer0);
assertNotNull(vec1);
assertEquals(5378, vec1.size());
assertFalse(vec1.isEmpty());

vec0.growTo(1602, vec1);
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertEquals(5378, vec1.size());
assertFalse(vec1.isEmpty());

Vec<Integer>[] vecArray0 = vec0.toArray();
assertNotNull(vecArray0);
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertEquals(1602, vecArray0.length);

Vec<Object> vec2 = new Vec<Object>(vecArray0);
assertNotNull(vec2);
assertEquals(1602, vec0.size());
assertFalse(vec0.isEmpty());
assertEquals(1602, vec2.size());
assertFalse(vec2.isEmpty());
assertEquals(1602, vecArray0.length);

Vec<ReadOnlyVec<String>> vec3 = new Vec<ReadOnlyVec<String>>();
assertNotNull(vec3);
assertTrue(vec3.isEmpty());
assertEquals(0, vec3.size());

vec3.moveTo(1163, 1074);

* Permissions denied during test execution: 
  - java.net.SocketPermission: 
         accept,resolve 127.0.0.1:37979: 1
* Writing tests to file
* Writing JUnit test case 'Vec_ESTest' to evosuite-tests
* Done!

* Computation finished
