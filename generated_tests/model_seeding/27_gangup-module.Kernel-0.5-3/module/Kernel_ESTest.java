/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 10:45:01 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.MissingResourceException;
import java.util.TreeSet;
import module.ClientNetworkModule;
import module.ConfigModule;
import module.ExampleModule;
import module.Kernel;
import module.Message;
import module.MessageFactory;
import module.Module;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Kernel_ESTest extends Kernel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      String string0 = "";
      try { 
        kernel0.loadModule("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      String string0 = ">hwayu9Y6$";
      try { 
        kernel0.loadModule(">hwayu9Y6$");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.ClassNotFoundException: Class '>hwayu9Y6$.class' should be in target project, but could not be found!
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      kernel0.unsubscribe((Module) kernel0);
      Kernel kernel1 = new Kernel();
      assertFalse(kernel1.equals((Object)kernel0));
      assertNotNull(kernel1);
      
      kernel0.unsubscribe((Module) kernel1);
      assertFalse(kernel0.equals((Object)kernel1));
      assertFalse(kernel1.equals((Object)kernel0));
      assertNotSame(kernel0, kernel1);
      assertNotSame(kernel1, kernel0);
      
      ExampleModule exampleModule0 = null;
      try {
        exampleModule0 = new ExampleModule();
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Kernel kernel1 = kernel0.getKernel();
      assertNull(kernel1);
      
      try { 
        kernel0.register((Module) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=null
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Message message0 = new Message("*y]nY^R2?W8KW?CVuN", "#eTZMFj#", "*y]nY^R2?W8KW?CVuN");
      assertEquals(0, message0.getRefCount());
      assertTrue(message0.getIsConsumed());
      assertEquals(3000L, message0.getTTL());
      assertEquals(1, message0.getState());
      assertEquals(0L, message0.getSID());
      assertNull(message0.getSender());
      assertFalse(message0.delivered());
      assertEquals(0L, message0.getID());
      assertFalse(message0.getIsManaged());
      assertFalse(message0.received());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals("#eTZMFj#", message0.getRecipient());
      assertEquals("*y]nY^R2?W8KW?CVuN", message0.getHeader());
      assertNotNull(message0);
      assertEquals(2, Message.RECEIVED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(4, Message.DELIVERED);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(1, Message.CREATED);
      
      try { 
        kernel0.sendMessage(message0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: modnull,msg=Message[id=0,session=0,head=*y]nY^R2?W8KW?CVuN,recip=#eTZMFj#,sender=null,state=1,ttl=3000,time=1392409281320,body=*y]nY^R2?W8KW?CVuN]
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      LinkedHashSet<Module> linkedHashSet0 = new LinkedHashSet<Module>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add(kernel0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      assertEquals(0, messageFactory0.getTotalProduced());
      assertNotNull(messageFactory0);
      
      Message message0 = messageFactory0.createMessage();
      assertEquals(1, messageFactory0.getTotalProduced());
      assertEquals("*", message0.getRecipient());
      assertEquals(1, message0.getState());
      assertEquals(0L, message0.getSID());
      assertNull(message0.getSender());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals(0L, message0.getID());
      assertEquals(3000L, message0.getTTL());
      assertTrue(message0.getIsManaged());
      assertFalse(message0.getIsConsumed());
      assertFalse(message0.received());
      assertFalse(message0.delivered());
      assertEquals("", message0.getHeader());
      assertEquals(1, message0.getRefCount());
      assertNotNull(message0);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(4, Message.DELIVERED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(1, Message.CREATED);
      assertEquals(2, Message.RECEIVED);
      
      Message message1 = messageFactory0.createObject();
      assertFalse(message1.equals((Object)message0));
      assertEquals(2, messageFactory0.getTotalProduced());
      assertNull(message1.getSender());
      assertEquals(0L, message1.getID());
      assertFalse(message1.getIsConsumed());
      assertEquals(0L, message1.getTimeStamp());
      assertEquals(0, message1.getState());
      assertEquals(0L, message1.getSID());
      assertNull(message1.getRecipient());
      assertEquals("", message1.getHeader());
      assertFalse(message1.delivered());
      assertTrue(message1.getIsManaged());
      assertEquals(0L, message1.getTTL());
      assertEquals(1, message1.getRefCount());
      assertFalse(message1.received());
      assertNotSame(message1, message0);
      assertNotNull(message1);
      assertEquals(1, Message.CREATED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(2, Message.RECEIVED);
      assertEquals(4, Message.DELIVERED);
      
      kernel0.sendMessageNotify(linkedHashSet0, message0);
      assertFalse(message0.equals((Object)message1));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(2, messageFactory0.getTotalProduced());
      assertEquals("*", message0.getRecipient());
      assertEquals(1, message0.getState());
      assertEquals(0L, message0.getSID());
      assertNull(message0.getSender());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals(0L, message0.getID());
      assertEquals(3000L, message0.getTTL());
      assertTrue(message0.getIsManaged());
      assertFalse(message0.getIsConsumed());
      assertFalse(message0.received());
      assertFalse(message0.delivered());
      assertEquals("", message0.getHeader());
      assertEquals(2, message0.getRefCount());
      assertNotSame(message0, message1);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(4, Message.DELIVERED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(1, Message.CREATED);
      assertEquals(2, Message.RECEIVED);
      
      ConfigModule configModule0 = null;
      try {
        configModule0 = new ConfigModule();
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Kernel kernel1 = kernel0.getKernel();
      assertNull(kernel1);
      
      try { 
        kernel0.unloadModule((Module) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=null
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Thread thread0 = kernel0.getThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      Kernel kernel1 = new Kernel();
      assertFalse(kernel1.equals((Object)kernel0));
      assertNotNull(kernel1);
      
      Object[] objectArray0 = new Object[0];
      Message message0 = MessageFactory.createWarningMessage("W", objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(message0.received());
      assertEquals(1, message0.getRefCount());
      assertFalse(message0.delivered());
      assertFalse(message0.getIsConsumed());
      assertEquals(0L, message0.getID());
      assertEquals(3000L, message0.getTTL());
      assertEquals("WARNING", message0.getHeader());
      assertNull(message0.getSender());
      assertEquals(1, message0.getState());
      assertEquals(0L, message0.getSID());
      assertEquals("*", message0.getRecipient());
      assertTrue(message0.getIsManaged());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertNotNull(message0);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(2, Message.RECEIVED);
      assertEquals(1, Message.CREATED);
      assertEquals(4, Message.DELIVERED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      
      String string0 = message0.getRecipient();
      assertEquals("*", string0);
      assertEquals(0, objectArray0.length);
      assertFalse(message0.received());
      assertEquals(1, message0.getRefCount());
      assertFalse(message0.delivered());
      assertFalse(message0.getIsConsumed());
      assertEquals(0L, message0.getID());
      assertEquals(3000L, message0.getTTL());
      assertEquals("WARNING", message0.getHeader());
      assertNull(message0.getSender());
      assertEquals(1, message0.getState());
      assertEquals(0L, message0.getSID());
      assertEquals("*", message0.getRecipient());
      assertTrue(message0.getIsManaged());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertNotNull(string0);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(2, Message.RECEIVED);
      assertEquals(1, Message.CREATED);
      assertEquals(4, Message.DELIVERED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      
      Kernel kernel2 = new Kernel();
      assertFalse(kernel2.equals((Object)kernel1));
      assertFalse(kernel2.equals((Object)kernel0));
      assertNotNull(kernel2);
      
      ClientNetworkModule clientNetworkModule0 = null;
      try {
        clientNetworkModule0 = new ClientNetworkModule(kernel2);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      kernel0.start();
      try { 
        kernel0.request("s'u-]jty(2ZyYEpH", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Requests are not implemented
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      try { 
        kernel0.processMessage((Message) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      kernel0.getKernel();
      try { 
        kernel0.unregister((Module) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=null
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Kernel kernel1 = new Kernel();
      Message message0 = new Message();
      try { 
        kernel1.processMessage(message0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      kernel0.sendMessageNotify(treeSet0, (Message) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      try { 
        kernel0.unloadModule("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=
         //
         verifyException("module.Kernel", e);
      }
  }
}
