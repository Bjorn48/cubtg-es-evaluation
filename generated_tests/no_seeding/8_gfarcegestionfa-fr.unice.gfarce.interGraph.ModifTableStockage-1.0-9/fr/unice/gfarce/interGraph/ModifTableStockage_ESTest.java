/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 22:39:48 GMT 2019
 */

package fr.unice.gfarce.interGraph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fr.unice.gfarce.interGraph.ModifTableStockage;
import fr.unice.gfarce.interGraph.TableStockage;
import java.awt.HeadlessException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModifTableStockage_ESTest extends ModifTableStockage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(21, 21);
      assertEquals(21, tableStockage0.getColumnCount());
      assertEquals(20, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(21, tableStockage0.getColumnCount());
      assertEquals(20, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerLigne(2);
      assertEquals(21, tableStockage0.getColumnCount());
      assertEquals(20, tableStockage0.getRowCount());
      assertEquals(19, tableStockage1.getRowCount());
      assertEquals(21, tableStockage1.getColumnCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(794, 0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(793, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(793, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerLigne(2545);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(793, tableStockage0.getRowCount());
      assertEquals(0, tableStockage1.getColumnCount());
      assertEquals(792, tableStockage1.getRowCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object[][] objectArray0 = new Object[4][5];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.supprimerLigne((-320));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(1099, 1099);
      assertEquals(1098, tableStockage0.getRowCount());
      assertEquals(1099, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1098, tableStockage0.getRowCount());
      assertEquals(1099, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.supprimerColonne((-1240));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      Class<Object> class0 = Object.class;
      TableStockage tableStockage1 = modifTableStockage0.ajouterColonne("", class0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertEquals(1, tableStockage1.getColumnCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      TableStockage tableStockage2 = modifTableStockage0.supprimerColonne(0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage2.getRowCount());
      assertEquals(0, tableStockage2.getColumnCount());
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage0));
      assertNotNull(tableStockage2);
      assertNotSame(tableStockage0, tableStockage2);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage2, tableStockage1);
      assertNotSame(tableStockage2, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(160, 160);
      assertEquals(160, tableStockage0.getColumnCount());
      assertEquals(159, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(160, tableStockage0.getColumnCount());
      assertEquals(159, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      modifTableStockage0.supprimerLigne(160);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.supprimerLigne(0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.supprimerColonne((-680821770));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(160, 160);
      assertEquals(160, tableStockage0.getColumnCount());
      assertEquals(159, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(160, tableStockage0.getColumnCount());
      assertEquals(159, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.separerColonne(160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 160
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(32, 32);
      assertEquals(32, tableStockage0.getColumnCount());
      assertEquals(31, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(32, tableStockage0.getColumnCount());
      assertEquals(31, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.selectMail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Envoyer E-Mail a:";
      Object[][] objectArray0 = new Object[7][2];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      objectArray0[4] = (Object[]) stringArray0;
      objectArray0[5] = (Object[]) stringArray0;
      objectArray0[6] = objectArray0[3];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(7, objectArray0.length);
      assertEquals(7, tableStockage0.getRowCount());
      assertEquals(3, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(3, stringArray0.length);
      assertEquals(7, objectArray0.length);
      assertEquals(7, tableStockage0.getRowCount());
      assertEquals(3, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.selectMail();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Boolean
         //
         verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.colonneMail();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(1, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.selectMail();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(160, 160);
      assertEquals(160, tableStockage0.getColumnCount());
      assertEquals(159, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(160, tableStockage0.getColumnCount());
      assertEquals(159, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      modifTableStockage0.colonneMail();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(35, 35);
      assertEquals(34, tableStockage0.getRowCount());
      assertEquals(35, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(34, tableStockage0.getRowCount());
      assertEquals(35, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.colonneMail();
      assertEquals(34, tableStockage0.getRowCount());
      assertEquals(35, tableStockage0.getColumnCount());
      assertEquals(36, tableStockage1.getColumnCount());
      assertEquals(34, tableStockage1.getRowCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.colonneMail();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(160, 160);
      assertEquals(159, tableStockage0.getRowCount());
      assertEquals(160, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(159, tableStockage0.getRowCount());
      assertEquals(160, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      modifTableStockage0.ajouterLigne();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.colonneMail();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.ajouterLigne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(794, 0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(793, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(793, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      modifTableStockage0.ajouterColonne("&TfRQ", class0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ModifTableStockage modifTableStockage0 = null;
      try {
        modifTableStockage0 = new ModifTableStockage((TableStockage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Object[][] objectArray0 = new Object[4][5];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerColonne(0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(0, tableStockage1.getColumnCount());
      assertEquals(4, tableStockage1.getRowCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      TableStockage tableStockage2 = modifTableStockage0.colonneMail();
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(4, tableStockage2.getRowCount());
      assertEquals(2, tableStockage2.getColumnCount());
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage0));
      assertNotNull(tableStockage2);
      assertNotSame(tableStockage0, tableStockage2);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage2, tableStockage1);
      assertNotSame(tableStockage2, tableStockage0);
      
      ModifTableStockage modifTableStockage1 = new ModifTableStockage(tableStockage2);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(4, tableStockage2.getRowCount());
      assertEquals(2, tableStockage2.getColumnCount());
      assertFalse(tableStockage0.equals((Object)tableStockage2));
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage0));
      assertFalse(modifTableStockage1.equals((Object)modifTableStockage0));
      assertNotNull(modifTableStockage1);
      
      TableStockage tableStockage3 = modifTableStockage1.selectMail();
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(4, tableStockage2.getRowCount());
      assertEquals(2, tableStockage2.getColumnCount());
      assertEquals(2, tableStockage3.getColumnCount());
      assertEquals(0, tableStockage3.getRowCount());
      assertFalse(tableStockage0.equals((Object)tableStockage2));
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(modifTableStockage0.equals((Object)modifTableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage0));
      assertFalse(modifTableStockage1.equals((Object)modifTableStockage0));
      assertFalse(tableStockage3.equals((Object)tableStockage0));
      assertFalse(tableStockage3.equals((Object)tableStockage1));
      assertFalse(tableStockage3.equals((Object)tableStockage2));
      assertNotNull(tableStockage3);
      assertNotSame(tableStockage0, tableStockage3);
      assertNotSame(tableStockage0, tableStockage2);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(modifTableStockage0, modifTableStockage1);
      assertNotSame(tableStockage2, tableStockage1);
      assertNotSame(tableStockage2, tableStockage3);
      assertNotSame(tableStockage2, tableStockage0);
      assertNotSame(modifTableStockage1, modifTableStockage0);
      assertNotSame(tableStockage3, tableStockage0);
      assertNotSame(tableStockage3, tableStockage1);
      assertNotSame(tableStockage3, tableStockage2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Object[][] objectArray0 = new Object[4][5];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.colonneMail();
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(4, tableStockage1.getRowCount());
      assertEquals(2, tableStockage1.getColumnCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      ModifTableStockage modifTableStockage1 = new ModifTableStockage(tableStockage1);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(4, tableStockage1.getRowCount());
      assertEquals(2, tableStockage1.getColumnCount());
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertFalse(modifTableStockage1.equals((Object)modifTableStockage0));
      assertNotNull(modifTableStockage1);
      
      TableStockage tableStockage2 = modifTableStockage1.selectMail();
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(4, tableStockage1.getRowCount());
      assertEquals(2, tableStockage1.getColumnCount());
      assertEquals(2, tableStockage2.getColumnCount());
      assertEquals(4, tableStockage2.getRowCount());
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(modifTableStockage0.equals((Object)modifTableStockage1));
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertFalse(modifTableStockage1.equals((Object)modifTableStockage0));
      assertFalse(tableStockage2.equals((Object)tableStockage0));
      assertFalse(tableStockage2.equals((Object)tableStockage1));
      assertNotNull(tableStockage2);
      assertNotSame(tableStockage0, tableStockage2);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(modifTableStockage0, modifTableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      assertNotSame(tableStockage1, tableStockage2);
      assertNotSame(modifTableStockage1, modifTableStockage0);
      assertNotSame(tableStockage2, tableStockage0);
      assertNotSame(tableStockage2, tableStockage1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Object[][] objectArray0 = new Object[1][5];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.selectMail();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[5] = "";
      stringArray0[6] = "";
      Object[][] objectArray0 = new Object[1][1];
      objectArray0[0] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(9, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(9, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(9, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.fusionnerColonnes(5);
      assertEquals(9, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(9, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage1.getRowCount());
      assertEquals(8, tableStockage1.getColumnCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Object[][] objectArray0 = new Object[1][8];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(4, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(4, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(4, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.fusionnerColonnes(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object[][] objectArray0 = new Object[4][5];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerColonne(0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage1.getColumnCount());
      assertEquals(4, tableStockage1.getRowCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      TableStockage tableStockage2 = modifTableStockage0.colonneMail();
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage2.getRowCount());
      assertEquals(2, tableStockage2.getColumnCount());
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage0));
      assertNotNull(tableStockage2);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage0, tableStockage2);
      assertNotSame(tableStockage2, tableStockage1);
      assertNotSame(tableStockage2, tableStockage0);
      
      ModifTableStockage modifTableStockage1 = new ModifTableStockage(tableStockage2);
      assertEquals(1, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage2.getRowCount());
      assertEquals(2, tableStockage2.getColumnCount());
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(tableStockage0.equals((Object)tableStockage2));
      assertFalse(tableStockage2.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage0));
      assertFalse(modifTableStockage1.equals((Object)modifTableStockage0));
      assertNotNull(modifTableStockage1);
      
      // Undeclared exception!
      try { 
        modifTableStockage1.fusionnerColonnes(0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.fusionnerColonnes(4);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(32, 32);
      assertEquals(32, tableStockage0.getColumnCount());
      assertEquals(31, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(32, tableStockage0.getColumnCount());
      assertEquals(31, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.separerColonne(1);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object[][] objectArray0 = new Object[1][5];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerLigne(0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(32, 32);
      assertEquals(32, tableStockage0.getColumnCount());
      assertEquals(31, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(32, tableStockage0.getColumnCount());
      assertEquals(31, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerColonne(0);
      assertEquals(32, tableStockage0.getColumnCount());
      assertEquals(31, tableStockage0.getRowCount());
      assertEquals(31, tableStockage1.getColumnCount());
      assertEquals(31, tableStockage1.getRowCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2256, 2256);
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      // Undeclared exception!
      modifTableStockage0.supprimerColonne(0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          TableStockage tableStockage0 = new TableStockage(35, 35);
          ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
          modifTableStockage0.colonneMail();
          TableStockage tableStockage1 = modifTableStockage0.supprimerColonne(35);
          assertEquals(34, tableStockage1.getRowCount());
          assertEquals(35, tableStockage1.getColumnCount());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object[][] objectArray0 = new Object[4][5];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      modifTableStockage0.supprimerColonne(0);
      modifTableStockage0.colonneMail();
      Class<String> class0 = String.class;
      modifTableStockage0.ajouterColonne("", class0);
      // Undeclared exception!
      try { 
        modifTableStockage0.fusionnerColonnes(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VyPgQ?cL";
      Object[][] objectArray0 = new Object[3][8];
      objectArray0[0] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      TableStockage tableStockage1 = modifTableStockage0.ajouterLigne();
      assertEquals(4, tableStockage1.getRowCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(32, 32);
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      modifTableStockage0.ajouterLigne();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        modifTableStockage0.ajouterColonne("fr.unice.gfarce.interGraph.TableStockage", class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      // Undeclared exception!
      try { 
        modifTableStockage0.ajouterLigne();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object[][] objectArray0 = new Object[4][5];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      TableStockage tableStockage1 = modifTableStockage0.colonneMail();
      ModifTableStockage modifTableStockage1 = new ModifTableStockage(tableStockage1);
      // Undeclared exception!
      try { 
        modifTableStockage1.fusionnerColonnes(0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
