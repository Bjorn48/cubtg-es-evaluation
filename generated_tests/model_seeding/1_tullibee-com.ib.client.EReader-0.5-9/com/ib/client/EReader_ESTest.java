/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 17:00:16 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.EClientErrors;
import com.ib.client.EException;
import com.ib.client.EReader;
import com.ib.client.EWrapper;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EReader_ESTest extends EReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 652);
      assertNotNull(eReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)68}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(0, (String) null);
      assertNull(eClientErrors_CodeMsgPair0.msg());
      assertEquals(0, eClientErrors_CodeMsgPair0.code());
      assertNotNull(eClientErrors_CodeMsgPair0);
      
      EException eException0 = eReader0.createEException((-491), eClientErrors_CodeMsgPair0);
      assertNull(eClientErrors_CodeMsgPair0.msg());
      assertEquals(0, eClientErrors_CodeMsgPair0.code());
      assertEquals((-491), eException0.getId());
      assertEquals(0, eException0.getErrorCode());
      assertEquals((-1), EException.NO_VALID_CODE);
      assertNotNull(eException0);
      
      eReader0.run();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 1827);
      assertNotNull(eReader0);
      
      eReader0.run();
      eReader0.run();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 209);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 652);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(33);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 36);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 37);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      try { 
        eReader1.processMsg(37);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 20, 501);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 501);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 54);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.BOND_CONTRACT_DATA;
      assertEquals(18, int0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 18);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 55);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-1161));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      int int1 = eReader0.readIntMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-1648));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        EReader.readInt(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 11);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip(0L);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(21);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector<InputStream> vector0 = new Vector<InputStream>(22, (-602));
      assertEquals(22, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Enumeration<InputStream> enumeration0 = vector0.elements();
      assertEquals(22, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(enumeration0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertEquals(22, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertEquals(22, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-249));
      assertEquals(22, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readStr();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 46);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream1, (EWrapper) null, 19);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, (-1276));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg((-1276));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 46);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(41);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-2886));
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.processMsg(57);
      assertEquals(26, byteArray0.length);
      assertEquals(24, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 19);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      long long0 = dataInputStream0.readLong();
      assertEquals(26, byteArray0.length);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(1224979098644774912L, long0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 505, 99);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertEquals((-498), int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-498));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-3284L));
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertEquals(26, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 26);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean1 = dataInputStream0.markSupported();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = eReader0.readStr();
      assertEquals(26, byteArray0.length);
      assertEquals(24, byteArrayInputStream0.available());
      assertEquals("\u0011", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(51);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 517;
      PipedInputStream pipedInputStream0 = new PipedInputStream(517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 31);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readStr();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      int int1 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      int int2 = dataInputStream0.read();
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 211);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, (byte)4);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      long long0 = eReader1.readLong();
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertEquals(0L, long0);
      assertNotSame(eReader1, eReader0);
      
      long long1 = eReader0.readLong();
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertNotSame(eReader0, eReader1);
      
      try { 
        eReader1.processMsg(14);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EReader eReader1 = new EReader((DataInputStream) null, (EWrapper) null, 25);
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      try { 
        eReader0.processMsg(25);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4515, 4515);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-4515), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-4515), byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-4515), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = pushbackInputStream0.available();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-4515), byteArrayInputStream0.available());
      assertEquals(Integer.MAX_VALUE, int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 99);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-4515), byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      pushbackInputStream0.unread(4515);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-4515), byteArrayInputStream0.available());
      
      try { 
        eReader0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Enumeration<PipedInputStream> enumeration0 = vector0.elements();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(enumeration0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 1664);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 522);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 41);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.OPEN_ORDER_END;
      assertEquals(53, int0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 53);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, int0);
      
      dataInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      String string0 = EReader.readStr(dataInputStream1);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertEquals("\u0011", string0);
      assertNotNull(string0);
      assertNotSame(dataInputStream1, dataInputStream0);
      
      // Undeclared exception!
      try { 
        eReader0.readInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\b)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      eReader0.stop();
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.readLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 50);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(43);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)17);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-234));
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)8;
      byteArray1[5] = (byte)8;
      byteArray1[6] = (byte)8;
      byteArray1[7] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)93, (byte)8, (byte)8, (byte)8, (byte)8, (byte)17}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        eReader0.processMsg(48);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 2766);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertEquals(26, byteArray0.length);
      assertEquals(25, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(38);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 50);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.CONTRACT_DATA;
      assertEquals(10, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 10);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 10);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      EReader eReader2 = new EReader(dataInputStream0, (EWrapper) null, 38);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(eReader2.equals((Object)eReader1));
      assertFalse(eReader2.equals((Object)eReader0));
      assertNotNull(eReader2);
      
      // Undeclared exception!
      try { 
        eReader2.processMsg(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-1L));
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper1, 2111);
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
      try { 
        eReader0.processMsg(39);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(26, byteArray0.length);
      assertEquals(25, byteArrayInputStream0.available());
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-1L));
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertEquals(26, int0);
      
      long long1 = byteArrayInputStream0.skip(0L);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)41);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 14);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.processMsg(46);
      assertEquals(26, byteArray0.length);
      assertEquals(22, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      eReader0.run();
      assertEquals(26, byteArray0.length);
      assertEquals(21, byteArrayInputStream0.available());
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertEquals(26, byteArray0.length);
      assertEquals(20, byteArrayInputStream0.available());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(28);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertEquals(26, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 26);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(19);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-766));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-1L));
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0L, long0);
      assertNotSame(byteArray1, byteArray0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, int0);
      assertNotSame(byteArray1, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)7);
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(eReader0);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 11);
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      try { 
        eReader1.processMsg(1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)18;
      byte byte0 = (byte)46;
      byteArray0[6] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)18, (byte)46}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)18, (byte)46}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(7, int0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)18, (byte)46}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)18, (byte)46}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int1 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)18, (byte)46}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertTrue(int1 == int0);
      assertEquals(7, int1);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)18, (byte)46}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      eReader0.run();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)18, (byte)46}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\b)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-517));
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, eWrapper1, 532);
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      eReader1.run();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[12] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 20, 505);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-1752L));
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 12);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.HISTORICAL_DATA;
      assertEquals(17, int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      byteArrayInputStream0.close();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      
      byteArrayInputStream0.mark((-360));
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 17);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.processMsg(56);
      assertEquals(26, byteArray0.length);
      assertEquals(21, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 56);
      assertEquals(26, byteArray0.length);
      assertEquals(21, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      eReader1.run();
      assertEquals(26, byteArray0.length);
      assertEquals(20, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DataInputStream dataInputStream0 = null;
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = 50;
      int int1 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 50);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-766));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 16;
      // Undeclared exception!
      try { 
        eReader0.processMsg(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)14, 41);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-13), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-13), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-3147));
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-13), byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = (-713);
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, (-713));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.ACCT_DOWNLOAD_END;
      assertEquals(54, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 54);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, (-2370));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        EReader.readStr((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (byte)17);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)39);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, (-1399));
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
      try { 
        eReader0.processMsg(33);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 280);
      assertNotNull(eReader0);
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(256, "?KeC'6;pnA$?3zv^bC");
      assertEquals("?KeC'6;pnA$?3zv^bC", eClientErrors_CodeMsgPair0.msg());
      assertEquals(256, eClientErrors_CodeMsgPair0.code());
      assertNotNull(eClientErrors_CodeMsgPair0);
      
      eClientErrors_CodeMsgPair0.m_errorMsg = "?KeC'6;pnA$?3zv^bC";
      assertEquals("?KeC'6;pnA$?3zv^bC", eClientErrors_CodeMsgPair0.msg());
      assertEquals(256, eClientErrors_CodeMsgPair0.code());
      
      EException eException0 = eReader0.createEException(280, eClientErrors_CodeMsgPair0);
      assertEquals("?KeC'6;pnA$?3zv^bC", eClientErrors_CodeMsgPair0.msg());
      assertEquals(256, eClientErrors_CodeMsgPair0.code());
      assertEquals(256, eException0.getErrorCode());
      assertEquals(280, eException0.getId());
      assertEquals((-1), EException.NO_VALID_CODE);
      assertNotNull(eException0);
      
      // Undeclared exception!
      try { 
        eReader0.readStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(296);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 533);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 504);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(43);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(296);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 533);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.HISTORICAL_DATA;
      assertEquals(17, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 1502);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 12);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 46);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, (-1119));
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      EReader eReader2 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(eReader2.equals((Object)eReader0));
      assertFalse(eReader2.equals((Object)eReader1));
      assertNotNull(eReader2);
      
      // Undeclared exception!
      try { 
        eReader2.processMsg(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      Vector<InputStream> vector0 = new Vector<InputStream>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Enumeration<InputStream> enumeration0 = vector0.elements();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(enumeration0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 18);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-2489));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(18);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 531);
      assertNotNull(eReader0);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, eWrapper0, 11);
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      eReader1.run();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 29);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(29);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)90);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-1207));
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.processMsg((-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EWrapper eWrapper0 = null;
      DataInputStream dataInputStream0 = null;
      int int0 = 51;
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(37);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.ACCT_DOWNLOAD_END;
      assertEquals(54, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 54);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(11);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)90);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(36);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        EReader.readStr(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 49);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.processMsg(53);
      assertEquals(26, byteArray0.length);
      assertEquals(25, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      int int0 = EReader.HISTORICAL_DATA;
      assertEquals(17, int0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(26, byteArray0.length);
      assertEquals(24, byteArrayInputStream0.available());
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 50);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(29);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader((DataInputStream) null, (EWrapper) null, 21);
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      eReader0.stop();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (byte)1);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(23);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      int int0 = (-1460);
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, (-1460));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 40);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(40);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 505, 505);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertEquals((-498), int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-498));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4L&BkYd>@~0ChS)");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      int int1 = dataInputStream0.readUnsignedByte();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 46);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg((byte)17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4L&BkYd>@~0ChS)");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(26);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      
      long long0 = byteArrayInputStream0.skip(1518L);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(3L, long0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-28);
      byteArray1[2] = (byte) (-7);
      byteArray1[6] = (byte)43;
      byteArray1[4] = (byte)116;
      byteArray1[5] = (byte) (-122);
      byteArray1[6] = (byte)85;
      byteArray1[7] = (byte)116;
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(0, int0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 792);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(eReader0);
      
      String string0 = eReader0.readStr();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 41);
      assertNotNull(eReader0);
      
      DataInputStream dataInputStream2 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream2, eWrapper1, (-3067));
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      eReader1.stop();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      eReader1.run();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector<InputStream> vector0 = new Vector<InputStream>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Enumeration<InputStream> enumeration0 = vector0.elements();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(enumeration0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 958);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 202);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg((-115));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-766));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-69), (byte)90, (byte)38, (byte)29}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)39, (byte) (-69), (byte)90, (byte)38, (byte)29}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream1);
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream2);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader1 = new EReader(dataInputStream2, (EWrapper) null, (-1840));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 14);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 45, 505);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals((-19), int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 56);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(25);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-1648));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-552));
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.processMsg(15);
      assertEquals(26, byteArray0.length);
      assertEquals(24, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      eReader0.run();
      assertEquals(26, byteArray0.length);
      assertEquals(23, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 20, 505);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-192));
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      eReader0.stop();
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg((byte)17);
      assertEquals(26, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      int int0 = EReader.ORDER_STATUS;
      assertEquals(3, int0);
      
      double double0 = eReader0.readDouble();
      assertEquals(26, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0.0, double0, 0.01);
      
      String string0 = EReader.readStr(dataInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals(24, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(24, byteArray0.length);
      assertEquals(24, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertEquals(24, byteArray0.length);
      assertEquals(24, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dataInputStream1).available();
      doReturn(0, 53, 0).when(dataInputStream1).read();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-766));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-1L));
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream1);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertNotNull(dataInputStream2);
      
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream2);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream2));
      assertFalse(dataInputStream3.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream3);
      
      int int0 = dataInputStream3.available();
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream3));
      assertFalse(dataInputStream3.equals((Object)dataInputStream2));
      assertFalse(dataInputStream3.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream0));
      assertEquals(0, int0);
      assertNotSame(dataInputStream2, dataInputStream0);
      assertNotSame(dataInputStream2, dataInputStream3);
      assertNotSame(dataInputStream3, dataInputStream2);
      assertNotSame(dataInputStream3, dataInputStream0);
      
      long long1 = byteArrayInputStream0.skip(1948L);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(long1 == long0);
      assertEquals(5L, long1);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 2584);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream0.equals((Object)dataInputStream2));
      assertFalse(dataInputStream0.equals((Object)dataInputStream3));
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      EWrapper eWrapper2 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader2 = new EReader(dataInputStream2, eWrapper2, (byte)39);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream3));
      assertFalse(eReader2.equals((Object)eReader1));
      assertFalse(eReader2.equals((Object)eReader0));
      assertNotNull(eReader2);
      
      int int1 = eReader2.readIntMax();
      assertFalse(int1 == int0);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream3));
      assertFalse(eReader2.equals((Object)eReader1));
      assertFalse(eReader2.equals((Object)eReader0));
      assertEquals(Integer.MAX_VALUE, int1);
      assertNotSame(dataInputStream2, dataInputStream0);
      assertNotSame(dataInputStream2, dataInputStream3);
      assertNotSame(eReader2, eReader1);
      assertNotSame(eReader2, eReader0);
      
      EReader.readInt(dataInputStream3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 55);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 45, 505);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals((-19), int0);
      
      byteArrayInputStream0.close();
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      int int1 = dataInputStream0.available();
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertTrue(int1 == int0);
      assertEquals((-19), int1);
      assertNotSame(dataInputStream0, dataInputStream1);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 505);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(45);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "finished");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 46);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      int int1 = 8;
      // Undeclared exception!
      try { 
        eReader0.processMsg(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 18);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(18);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pkZ<r_Dg");
      assertFalse(boolean0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int1 = EReader.ORDER_STATUS;
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-3149));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      String string0 = eReader0.readStr();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-766));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(22);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(40, byteArray0.length);
      assertEquals(40, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(40, byteArray0.length);
      assertEquals(40, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.HISTORICAL_DATA;
      assertEquals(17, int0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertEquals(40, byteArray0.length);
      assertEquals(40, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, 17);
      assertEquals(40, byteArray0.length);
      assertEquals(40, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(24);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 45, 505);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals((-19), int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 56);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 2);
      assertEquals(26, byteArray0.length);
      assertEquals((-19), byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      try { 
        eReader0.processMsg(38);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 523);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = null;
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals(24, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(24, byteArray0.length);
      assertEquals(24, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)17);
      assertEquals(24, byteArray0.length);
      assertEquals(24, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-1161));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      double double0 = eReader0.readDouble();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = eReader0.readDoubleMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      
      int int1 = eReader0.readInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 505, 99);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertEquals((-498), int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-498));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(12);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = null;
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-2347));
      assertNotNull(eReader0);
      
      int int0 = 525;
      int int1 = 4932;
      String string0 = "mBr2HL74X/`*";
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(4932, "mBr2HL74X/`*");
      assertEquals(4932, eClientErrors_CodeMsgPair0.code());
      assertEquals("mBr2HL74X/`*", eClientErrors_CodeMsgPair0.msg());
      assertNotNull(eClientErrors_CodeMsgPair0);
      
      eClientErrors_CodeMsgPair0.m_errorMsg = "mBr2HL74X/`*";
      assertEquals(4932, eClientErrors_CodeMsgPair0.code());
      assertEquals("mBr2HL74X/`*", eClientErrors_CodeMsgPair0.msg());
      
      // Undeclared exception!
      try { 
        eReader0.readStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-766));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 14);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(296);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 533);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 34);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      long long0 = eReader0.readLong();
      assertEquals(26, byteArray0.length);
      assertEquals(25, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      try { 
        eReader0.processMsg(34);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-1L));
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      int int0 = dataInputStream1.available();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertEquals(7, int0);
      assertNotSame(dataInputStream0, dataInputStream1);
      assertNotSame(dataInputStream1, dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 8);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg((byte)17);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 46);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(46);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.HISTORICAL_DATA;
      assertEquals(17, int0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 17);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(27);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(31);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(40, byteArray0.length);
      assertEquals(40, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(40, byteArray0.length);
      assertEquals(40, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.ACCT_VALUE;
      assertEquals(6, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertEquals(40, byteArray0.length);
      assertEquals(40, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 84);
      assertEquals(40, byteArray0.length);
      assertEquals(40, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte)48;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-3284L));
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertEquals(26, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 26);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 47, 517);
      assertArrayEquals(new byte[] {(byte)48, (byte)5, (byte)15, (byte)24, (byte)28}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-42), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)5, (byte)15, (byte)24, (byte)28}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-42), byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, 37);
      assertArrayEquals(new byte[] {(byte)48, (byte)5, (byte)15, (byte)24, (byte)28}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-42), byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg((byte)24);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.HISTORICAL_DATA;
      assertEquals(17, int0);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 5);
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
      // Undeclared exception!
      try { 
        eReader0.processMsg(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-2701));
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        EReader.readInt(dataInputStream0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-2388));
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)0, (byte)6, (byte)86, (byte) (-61), (byte) (-10), (byte)94}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)0, (byte)6, (byte)86, (byte) (-61), (byte) (-10), (byte)94}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)0, (byte)6, (byte)86, (byte) (-61), (byte) (-10), (byte)94}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte) (-10));
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)0, (byte)6, (byte)86, (byte) (-61), (byte) (-10), (byte)94}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0006\u0006\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      eReader0.stop();
      int int0 = 32;
      try { 
        eReader0.processMsg(32);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 511);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.processMsg((byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-14);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte) (-14));
      assertArrayEquals(new byte[] {(byte) (-14), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      dataInputStream0.mark((-2183));
      assertArrayEquals(new byte[] {(byte) (-14), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(32);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-14);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-14)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-14)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte) (-14));
      assertArrayEquals(new byte[] {(byte) (-14)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      dataInputStream0.mark((-2183));
      assertArrayEquals(new byte[] {(byte) (-14)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(52);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-1L));
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 1471);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      eReader0.stop();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      eReader0.run();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      
      long long0 = byteArrayInputStream0.skip(1518L);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(8L, long0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-28);
      byteArray1[2] = (byte) (-7);
      byteArray1[6] = (byte)43;
      byteArray1[4] = (byte)73;
      byteArray1[5] = (byte) (-122);
      byteArray1[6] = (byte)85;
      byteArray1[7] = (byte)73;
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1, 2685, 4536);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-28), (byte) (-7), (byte)0, (byte)73, (byte) (-122), (byte)85, (byte)73}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals((-2677), byteArrayInputStream2.available());
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream2);
      
      byteArrayInputStream2.reset();
      assertArrayEquals(new byte[] {(byte)1, (byte) (-28), (byte) (-7), (byte)0, (byte)73, (byte) (-122), (byte)85, (byte)73}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals((-2677), byteArrayInputStream2.available());
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArrayInputStream2, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream0);
      assertNotSame(byteArray1, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream1.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(dataInputStream1);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertEquals(0, int0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(dataInputStream0, dataInputStream1);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte) (-28));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg((byte)5);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(36, byteArray0.length);
      assertEquals(36, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(36, byteArray0.length);
      assertEquals(36, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertEquals(36, byteArray0.length);
      assertEquals(36, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      eReader0.stop();
      assertEquals(36, byteArray0.length);
      assertEquals(36, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dataInputStream1).available();
      doReturn(0, 0).when(dataInputStream1).read();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-766));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-1L));
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream1);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertNotNull(dataInputStream2);
      
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream2);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream2));
      assertFalse(dataInputStream3.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream3);
      
      int int0 = dataInputStream3.available();
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream3));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream2));
      assertFalse(dataInputStream3.equals((Object)dataInputStream0));
      assertEquals(0, int0);
      assertNotSame(dataInputStream2, dataInputStream0);
      assertNotSame(dataInputStream2, dataInputStream3);
      assertNotSame(dataInputStream3, dataInputStream2);
      assertNotSame(dataInputStream3, dataInputStream0);
      
      long long1 = byteArrayInputStream0.skip(1948L);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(long1 == long0);
      assertEquals(5L, long1);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 2584);
      assertFalse(dataInputStream0.equals((Object)dataInputStream2));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream0.equals((Object)dataInputStream3));
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      EWrapper eWrapper2 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader2 = new EReader(dataInputStream2, eWrapper2, (byte)39);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream3));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(eReader2.equals((Object)eReader0));
      assertFalse(eReader2.equals((Object)eReader1));
      assertNotNull(eReader2);
      
      int int1 = eReader2.readIntMax();
      assertFalse(int1 == int0);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream3));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(eReader2.equals((Object)eReader0));
      assertFalse(eReader2.equals((Object)eReader1));
      assertEquals(Integer.MAX_VALUE, int1);
      assertNotSame(dataInputStream2, dataInputStream0);
      assertNotSame(dataInputStream2, dataInputStream3);
      assertNotSame(eReader2, eReader0);
      assertNotSame(eReader2, eReader1);
      
      int int2 = EReader.readInt(dataInputStream3);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream3));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream2));
      assertFalse(dataInputStream3.equals((Object)dataInputStream0));
      assertEquals(0, int2);
      assertNotSame(dataInputStream2, dataInputStream0);
      assertNotSame(dataInputStream2, dataInputStream3);
      assertNotSame(dataInputStream3, dataInputStream2);
      assertNotSame(dataInputStream3, dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      int int0 = 54;
      // Undeclared exception!
      try { 
        eReader0.processMsg(54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 523);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 45);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader1.readDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 4);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)17;
      byteArray0[2] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)17, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)17, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 47);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)17, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      double double0 = eReader0.readDouble();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)17, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean2 = eReader0.readBoolFromInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)17, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      float float0 = dataInputStream0.readFloat();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0.0F, float0, 0.01F);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 15);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.processMsg(51);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      int int1 = eReader0.readIntMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(31, byteArray0.length);
      assertEquals(31, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(31, byteArray0.length);
      assertEquals(31, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.ACCT_VALUE;
      assertEquals(6, int0);
      
      int int1 = EReader.TICK_STRING;
      assertFalse(int1 == int0);
      assertEquals(46, int1);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertEquals(31, byteArray0.length);
      assertEquals(31, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.processMsg(6);
      assertEquals(31, byteArray0.length);
      assertEquals(27, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[12] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 20, 505);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-1752L));
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 20);
      assertEquals(26, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(12);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = EReader.HISTORICAL_DATA;
      assertEquals(17, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 57, 57);
      assertArrayEquals(new byte[] {(byte) (-66)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-56), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-66)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-56), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 57);
      assertArrayEquals(new byte[] {(byte) (-66)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-56), byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 33);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(296);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 5);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(42);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 51;
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 522);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      int int1 = pushbackInputStream0.available();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        EReader.readStr(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(31, byteArray0.length);
      assertEquals(31, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(31, byteArray0.length);
      assertEquals(31, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.ACCT_VALUE;
      assertEquals(6, int0);
      
      int int1 = EReader.TICK_STRING;
      assertFalse(int1 == int0);
      assertEquals(46, int1);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("z0W4&").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 6);
      assertEquals(31, byteArray0.length);
      assertEquals(31, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = eReader0.processMsg(21);
      assertEquals(31, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, 52);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.createEException((-5413), (EClientErrors.CodeMsgPair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 46);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      eReader0.stop();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 34);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      long long0 = eReader1.readLong();
      assertEquals(26, byteArray0.length);
      assertEquals(25, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertEquals(0L, long0);
      assertNotSame(eReader1, eReader0);
      
      try { 
        eReader1.processMsg(34);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 20, 505);
      assertEquals(33, byteArray0.length);
      assertEquals(13, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(33, byteArray0.length);
      assertEquals(13, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(33, byteArray0.length);
      assertEquals(13, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 12);
      assertEquals(33, byteArray0.length);
      assertEquals(13, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-2370));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 505, 109);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-498), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip(0L);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-498L), long0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      pushbackInputStream0.unread(505);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)17);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)47, (byte)0, (byte)86, (byte) (-61), (byte) (-10), (byte)94}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)47, (byte)0, (byte)86, (byte) (-61), (byte) (-10), (byte)94}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)47, (byte)0, (byte)86, (byte) (-61), (byte) (-10), (byte)94}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte) (-10));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)47, (byte)0, (byte)86, (byte) (-61), (byte) (-10), (byte)94}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      long long0 = eReader0.readLong();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)47, (byte)0, (byte)86, (byte) (-61), (byte) (-10), (byte)94}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      long long1 = eReader0.readLong();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)47, (byte)0, (byte)86, (byte) (-61), (byte) (-10), (byte)94}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      // Undeclared exception!
      try { 
        eReader0.readInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(dataInputStream0);
      
      long long0 = dataInputStream0.readLong();
      assertEquals(26, byteArray0.length);
      assertEquals(18, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(1224979098644774912L, long0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 12);
      assertEquals(26, byteArray0.length);
      assertEquals(18, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-3284L));
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertEquals(26, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 26);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(14);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      EReader eReader2 = new EReader(dataInputStream0, (EWrapper) null, 30);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(eReader2.equals((Object)eReader1));
      assertFalse(eReader2.equals((Object)eReader0));
      assertNotNull(eReader2);
      
      try { 
        eReader2.processMsg(30);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 652);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, int0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      try { 
        eReader0.processMsg(44);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 50);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(50);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((-1L));
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 49);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 51);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = null;
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      int int0 = 26;
      try { 
        eReader0.processMsg(26);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 202;
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 202);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(202);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Enumeration<PipedInputStream> enumeration0 = vector0.elements();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(enumeration0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(dataInputStream0);
      
      int int0 = 1664;
      try { 
        EReader.readInt(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-766));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(22);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.BOND_CONTRACT_DATA;
      assertEquals(18, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 18);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(39);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)121;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 46, (byte) (-36));
      assertArrayEquals(new byte[] {(byte) (-36), (byte)121}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-44), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)121}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-44), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)121}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-44), byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        EReader.readStr(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 46);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, (byte)17);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      try { 
        eReader0.processMsg(40);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      int int1 = eReader0.readInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = eReader0.readDoubleMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 45);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8, (byte)41, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader1.readDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 42);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      try { 
        eReader1.processMsg(42);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      
      long long0 = byteArrayInputStream0.skip(0L);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(0L, long0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      int int0 = dataInputStream1.available();
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertEquals(26, int0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(dataInputStream1, dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, 26);
      assertEquals(26, byteArray0.length);
      assertEquals(26, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 652);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(36);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)17;
      byteArray0[0] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)17);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 57);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-2200));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-1893));
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.readInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertEquals(8, int0);
      assertNotSame(dataInputStream0, dataInputStream1);
      
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 8);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(eReader0);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, eWrapper1, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      boolean boolean0 = eReader1.readBoolFromInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(eReader1.equals((Object)eReader0));
      assertFalse(boolean0);
      assertNotSame(dataInputStream0, dataInputStream1);
      assertNotSame(dataInputStream1, dataInputStream0);
      assertNotSame(eReader1, eReader0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = eReader0.readDoubleMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(eReader0.equals((Object)eReader1));
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertNotSame(dataInputStream0, dataInputStream1);
      assertNotSame(dataInputStream1, dataInputStream0);
      assertNotSame(eReader0, eReader1);
      
      int int1 = eReader0.readIntMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(eReader0.equals((Object)eReader1));
      assertEquals(Integer.MAX_VALUE, int1);
      assertNotSame(dataInputStream0, dataInputStream1);
      assertNotSame(dataInputStream1, dataInputStream0);
      assertNotSame(eReader0, eReader1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      int int0 = EReader.TICK_STRING;
      assertEquals(46, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 41);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, (byte)17);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotNull(eReader1);
      
      // Undeclared exception!
      try { 
        eReader1.readInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 50);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(517);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 12);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-766));
      assertNotNull(eReader0);
      
      int int0 = 19;
      // Undeclared exception!
      try { 
        eReader0.processMsg(19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      int int0 = EReader.ACCT_VALUE;
      int int1 = EReader.TICK_STRING;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 6);
      eReader0.processMsg(20);
      eReader0.run();
      assertEquals(27, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 47);
      int int0 = 13;
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 13);
      try { 
        eReader1.processMsg(47);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PipedInputStream pipedInputStream0 = new PipedInputStream(20);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 12);
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, eWrapper0, 760);
      eReader1.stop();
      eReader1.run();
      try { 
        eReader1.processMsg(35);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-2602));
      // Undeclared exception!
      try { 
        EReader.readInt((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)17;
      byteArray0[2] = (byte)8;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((-1L));
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.available();
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      eReader0.processMsg((byte)8);
      int int0 = EReader.ORDER_STATUS;
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((-3284L));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      dataInputStream0.available();
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 26);
      // Undeclared exception!
      try { 
        eReader0.processMsg(51);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)8;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((-1L));
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.available();
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0011\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 20, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, 20);
      try { 
        eReader0.processMsg(20);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2357), (-2357));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.available();
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, (-2357));
      try { 
        eReader0.processMsg(44);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte) (-10));
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0006\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-759));
      // Undeclared exception!
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2903);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 2903);
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 49);
      // Undeclared exception!
      try { 
        eReader0.processMsg(53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }
}
