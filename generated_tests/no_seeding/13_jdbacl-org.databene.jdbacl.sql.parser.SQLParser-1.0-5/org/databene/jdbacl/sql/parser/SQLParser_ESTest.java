/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 18:10:29 GMT 2019
 */

package org.databene.jdbacl.sql.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Predicate;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.DFA;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.TreeAdaptor;
import org.databene.jdbacl.sql.parser.SQLParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLParser_ESTest extends SQLParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(66).when(intStream0).LA(anyInt());
      doReturn(3).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.line);
      assertEquals(66, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      sQLParser_keyword_return0.start = null;
      TokenStream tokenStream0 = null;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      BitSet[] bitSetArray0 = new BitSet[6];
      BitSet bitSet0 = SQLParser.FOLLOW_123_in_drop_pk1124;
      assertEquals(1, bitSet0.size());
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(64, bitSet0.numBits());
      assertFalse(bitSet0.isNil());
      assertNotNull(bitSet0);
      
      bitSetArray0[0] = bitSet0;
      BitSet bitSet1 = SQLParser.FOLLOW_table_details_in_create_table198;
      assertEquals(128, bitSet1.numBits());
      assertEquals(2, bitSet1.lengthInLongWords());
      assertFalse(bitSet1.isNil());
      assertEquals(1, bitSet1.size());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      bitSetArray0[1] = bitSet1;
      BitSet bitSet2 = SQLParser.FOLLOW_67_in_ora_lob998;
      assertFalse(bitSet2.isNil());
      assertEquals(1, bitSet2.lengthInLongWords());
      assertEquals(1, bitSet2.size());
      assertEquals(64, bitSet2.numBits());
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      
      bitSetArray0[2] = bitSet2;
      BitSet bitSet3 = SQLParser.FOLLOW_66_in_primary_key_constraint1199;
      assertEquals(3, bitSet3.lengthInLongWords());
      assertEquals(32, bitSet3.size());
      assertEquals(192, bitSet3.numBits());
      assertFalse(bitSet3.isNil());
      assertFalse(bitSet3.equals((Object)bitSet0));
      assertFalse(bitSet3.equals((Object)bitSet1));
      assertFalse(bitSet3.equals((Object)bitSet2));
      assertNotNull(bitSet3);
      assertNotSame(bitSet3, bitSet0);
      assertNotSame(bitSet3, bitSet1);
      assertNotSame(bitSet3, bitSet2);
      
      bitSetArray0[3] = bitSet3;
      BitSet bitSet4 = SQLParser.FOLLOW_121_in_create_index1317;
      assertEquals(3, bitSet4.lengthInLongWords());
      assertFalse(bitSet4.isNil());
      assertEquals(32, bitSet4.size());
      assertEquals(192, bitSet4.numBits());
      assertFalse(bitSet4.equals((Object)bitSet1));
      assertFalse(bitSet4.equals((Object)bitSet0));
      assertFalse(bitSet4.equals((Object)bitSet2));
      assertTrue(bitSet4.equals((Object)bitSet3));
      assertNotNull(bitSet4);
      assertNotSame(bitSet4, bitSet1);
      assertNotSame(bitSet4, bitSet3);
      assertNotSame(bitSet4, bitSet0);
      assertNotSame(bitSet4, bitSet2);
      
      bitSetArray0[4] = bitSet4;
      BitSet bitSet5 = SQLParser.FOLLOW_qualified_name_in_column_name1496;
      assertFalse(bitSet5.isNil());
      assertEquals(64, bitSet5.numBits());
      assertEquals(1, bitSet5.size());
      assertEquals(1, bitSet5.lengthInLongWords());
      assertFalse(bitSet5.equals((Object)bitSet4));
      assertFalse(bitSet5.equals((Object)bitSet1));
      assertTrue(bitSet5.equals((Object)bitSet2));
      assertFalse(bitSet5.equals((Object)bitSet0));
      assertFalse(bitSet5.equals((Object)bitSet3));
      assertNotNull(bitSet5);
      assertNotSame(bitSet5, bitSet4);
      assertNotSame(bitSet5, bitSet2);
      assertNotSame(bitSet5, bitSet1);
      assertNotSame(bitSet5, bitSet0);
      assertNotSame(bitSet5, bitSet3);
      
      bitSetArray0[5] = bitSet5;
      recognizerSharedState0.following = bitSetArray0;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(47, SQLParser.STAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(62, SQLParser.T__62);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(43, SQLParser.IN);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.nullability();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Token token2 = sQLParser_keyword_return0.stop;
      assertNull(token2);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(95, SQLParser.T__95);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(31, SQLParser.OR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(88, SQLParser.T__88);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(91, SQLParser.T__91);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(4, SQLParser.INT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_mutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(80, SQLParser.T__80);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(106, SQLParser.T__106);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(130, SQLParser.T__130);
      assertEquals(43, SQLParser.IN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(135, SQLParser.T__135);
      assertEquals(34, SQLParser.EQ);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(57, SQLParser.DATE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      Object object0 = sQLParser_column_comment_details_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(80, SQLParser.T__80);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(106, SQLParser.T__106);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(130, SQLParser.T__130);
      assertEquals(43, SQLParser.IN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(135, SQLParser.T__135);
      assertEquals(34, SQLParser.EQ);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(57, SQLParser.DATE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(84, SQLParser.T__84);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(31, SQLParser.OR);
      assertEquals(7, SQLParser.STRING);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(101, SQLParser.T__101);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(47, SQLParser.STAR);
      assertEquals(82, SQLParser.T__82);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(33, SQLParser.XOR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(5, SQLParser.NOT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(57, SQLParser.DATE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(38, SQLParser.GE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.unique_constraint_return sQLParser_unique_constraint_return0 = new SQLParser.unique_constraint_return();
      assertNotNull(sQLParser_unique_constraint_return0);
      
      Object object1 = sQLParser_unique_constraint_return0.getTree();
      assertNull(object1);
      
      SQLParser.ora_storage_opt_return sQLParser_ora_storage_opt_return0 = new SQLParser.ora_storage_opt_return();
      assertNotNull(sQLParser_ora_storage_opt_return0);
      
      Object object2 = sQLParser_ora_storage_opt_return0.getTree();
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(61).when(tokenStream0).LA(anyInt());
      doReturn(2449).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(100, SQLParser.T__100);
      assertEquals(32, SQLParser.AND);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(57, SQLParser.DATE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(129, SQLParser.T__129);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(67, SQLParser.T__67);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(97, SQLParser.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(103, SQLParser.T__103);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(37, SQLParser.GT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(38, SQLParser.GE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(40, SQLParser.LE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(4, SQLParser.INT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return0 = new SQLParser.ora_lob_config_return();
      assertNotNull(sQLParser_ora_lob_config_return0);
      
      Object object1 = sQLParser_ora_lob_config_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream1);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(90, SQLParser.T__90);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.additive_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 6;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(6, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(6, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertNotNull(recognizerSharedState2);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(93, SQLParser.T__93);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(78, SQLParser.T__78);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(7, SQLParser.STRING);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(40, SQLParser.LE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(37, SQLParser.GT);
      assertEquals(5, SQLParser.NOT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(107, SQLParser.T__107);
      assertEquals(68, SQLParser.T__68);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertNotNull(sQLParser0);
      
      try { 
        sQLParser0.recoverFromMismatchedSet((IntStream) null, recognitionException0, (BitSet) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(3964, recognitionException0.c);
      assertEquals(3964, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 3964).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertNotNull(recognizerSharedState2);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState2);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(97, SQLParser.T__97);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(67, SQLParser.T__67);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(107, SQLParser.T__107);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(47, SQLParser.STAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(110, SQLParser.T__110);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(38, SQLParser.GE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(40, SQLParser.LE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(35, (-4193), (-4193), (-1863)).when(tokenStream0).LA(anyInt());
      doReturn((-4193)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(87, SQLParser.T__87);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(92, SQLParser.T__92);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertNotNull(sQLParser0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = sQLParser0.keyword();
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(87, SQLParser.T__87);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(92, SQLParser.T__92);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(87, SQLParser.T__87);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(92, SQLParser.T__92);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(105, SQLParser.T__105);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(98, SQLParser.T__98);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(32, SQLParser.AND);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(31, SQLParser.OR);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(40, SQLParser.LE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(4, SQLParser.INT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser2 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertFalse(sQLParser2.failed());
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(87, SQLParser.T__87);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(92, SQLParser.T__92);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(110, SQLParser.T__110);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(40, SQLParser.LE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(38, SQLParser.GE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(128, SQLParser.T__128);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(46, SQLParser.SUB);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(127, SQLParser.T__127);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertNotNull(sQLParser2);
      
      // Undeclared exception!
      try { 
        sQLParser2.constraint_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(101, SQLParser.T__101);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(31, SQLParser.OR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(7, SQLParser.STRING);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(34, SQLParser.EQ);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(38, SQLParser.GE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(82, SQLParser.T__82);
      assertEquals(112, SQLParser.T__112);
      assertEquals(74, SQLParser.T__74);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(121, SQLParser.T__121);
      assertEquals(5, SQLParser.NOT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(47, SQLParser.STAR);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(129, SQLParser.T__129);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_mutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = sQLParser_foreign_key_constraint_return1.getTree();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNull(object0);
      assertNotSame(sQLParser_foreign_key_constraint_return1, sQLParser_foreign_key_constraint_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(115, 135, 115, 135, 135).when(tokenStream0).LA(anyInt());
      doReturn(115).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(7, SQLParser.STRING);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertNotNull(sQLParser0);
      
      SQLParser.unary_expression_return sQLParser_unary_expression_return0 = sQLParser0.unary_expression();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(7, SQLParser.STRING);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertNotNull(sQLParser_unary_expression_return0);
      
      SQLParser.alter_table_return sQLParser_alter_table_return0 = new SQLParser.alter_table_return();
      assertNotNull(sQLParser_alter_table_return0);
      
      // Undeclared exception!
      try { 
        sQLParser0.alter_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(39, 39, 39).when(tokenStream0).LA(anyInt());
      doReturn(39).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(46, SQLParser.SUB);
      assertEquals(42, SQLParser.NULL);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(77, SQLParser.T__77);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(37, SQLParser.GT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(128, SQLParser.T__128);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(95, 95, 95, 95, 1622).when(tokenStream0).LA(anyInt());
      doReturn(95).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(80, SQLParser.T__80);
      assertEquals(133, SQLParser.T__133);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(4, SQLParser.INT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(43, SQLParser.IN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(136, SQLParser.T__136);
      assertEquals(5, SQLParser.NOT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(106, SQLParser.T__106);
      assertEquals(92, SQLParser.T__92);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(42, SQLParser.NULL);
      assertEquals(93, SQLParser.T__93);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(85, SQLParser.T__85);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(86, SQLParser.T__86);
      assertEquals(135, SQLParser.T__135);
      assertEquals(63, SQLParser.T__63);
      assertEquals(31, SQLParser.OR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(32, SQLParser.AND);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(5, SQLParser.NOT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(57, SQLParser.DATE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(84, SQLParser.T__84);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(57, SQLParser.DATE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(38, SQLParser.GE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(41, SQLParser.IS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(60, SQLParser.WS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(105, SQLParser.T__105);
      assertEquals(47, SQLParser.STAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(39, SQLParser.LT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(90, SQLParser.T__90);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.commands();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(127, SQLParser.T__127);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(96, SQLParser.T__96);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.equality_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLParser.sub_partition_config_return sQLParser_sub_partition_config_return0 = new SQLParser.sub_partition_config_return();
      assertNotNull(sQLParser_sub_partition_config_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(1681, (-973), 1681).when(tokenStream0).LA(anyInt());
      doReturn((-973)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      Map<Integer, Integer>[] mapArray0 = (Map<Integer, Integer>[]) Array.newInstance(Map.class, 0);
      recognizerSharedState0.ruleMemo = mapArray0;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(97, SQLParser.T__97);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(34, SQLParser.EQ);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(57, SQLParser.DATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(40, SQLParser.LE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertNotNull(sQLParser0);
      
      recognizerSharedState0.channel = 94;
      SQLParser.keyword_return sQLParser_keyword_return0 = sQLParser0.keyword();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(94, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(97, SQLParser.T__97);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(34, SQLParser.EQ);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(57, SQLParser.DATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(40, SQLParser.LE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(94, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(94, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser.ora_lob_return sQLParser_ora_lob_return0 = new SQLParser.ora_lob_return();
      assertNotNull(sQLParser_ora_lob_return0);
      
      Object object0 = sQLParser_ora_lob_return0.tree;
      assertNull(object0);
      
      sQLParser_keyword_return0.tree = null;
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      Token token1 = recognizerSharedState1.token;
      assertNull(token1);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(94, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(97, SQLParser.T__97);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(34, SQLParser.EQ);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(57, SQLParser.DATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(40, SQLParser.LE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(32, SQLParser.AND);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(116, SQLParser.T__116);
      assertEquals(4, SQLParser.INT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(111, SQLParser.T__111);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(104, SQLParser.T__104);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(67, SQLParser.T__67);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(89, SQLParser.T__89);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 40).when(tokenStream0).LA(anyInt());
      doReturn((-141)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(114, SQLParser.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(38, SQLParser.GE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(99, SQLParser.T__99);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(32, SQLParser.AND);
      assertEquals(130, SQLParser.T__130);
      assertEquals(75, SQLParser.T__75);
      assertEquals(100, SQLParser.T__100);
      assertEquals(90, SQLParser.T__90);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(135, SQLParser.T__135);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(127, SQLParser.T__127);
      assertEquals(74, SQLParser.T__74);
      assertEquals(31, SQLParser.OR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(97, SQLParser.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(88, SQLParser.T__88);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(86, SQLParser.T__86);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 40).when(tokenStream0).LA(anyInt());
      doReturn((-141)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLParser.T__72);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(79, SQLParser.T__79);
      assertEquals(78, SQLParser.T__78);
      assertEquals(110, SQLParser.T__110);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(128, SQLParser.T__128);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(7, SQLParser.STRING);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(3964, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 3964, 0).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(121, SQLParser.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(104, SQLParser.T__104);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(123, SQLParser.T__123);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(37, SQLParser.GT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(129, SQLParser.T__129);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(124, SQLParser.T__124);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      SQLParser.nullability_return sQLParser_nullability_return0 = new SQLParser.nullability_return();
      assertNotNull(sQLParser_nullability_return0);
      
      SQLParser.drop_pk_return sQLParser_drop_pk_return0 = new SQLParser.drop_pk_return();
      assertNotNull(sQLParser_drop_pk_return0);
      
      Object object0 = sQLParser_drop_pk_return0.getTree();
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = sQLParser_foreign_key_constraint_return1.getTree();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNull(object0);
      assertNotSame(sQLParser_foreign_key_constraint_return1, sQLParser_foreign_key_constraint_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(41, SQLParser.IS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(47, SQLParser.STAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(90, SQLParser.T__90);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(5, SQLParser.NOT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(106, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(106).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(7, SQLParser.STRING);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(42, SQLParser.NULL);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(40, SQLParser.LE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(47, SQLParser.STAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(7, SQLParser.STRING);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(42, SQLParser.NULL);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(40, SQLParser.LE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(47, SQLParser.STAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(115, SQLParser.T__115);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(31, SQLParser.OR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(85, SQLParser.T__85);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(129, SQLParser.T__129);
      assertEquals(7, SQLParser.STRING);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(78, SQLParser.T__78);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(43, SQLParser.IN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(57, SQLParser.DATE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(38, SQLParser.GE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(79, SQLParser.T__79);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(87, SQLParser.T__87);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(33, SQLParser.XOR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(133, SQLParser.T__133);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(90, SQLParser.T__90);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(132, SQLParser.T__132);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser1.commands();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(7, SQLParser.STRING);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(42, SQLParser.NULL);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(40, SQLParser.LE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(47, SQLParser.STAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(115, SQLParser.T__115);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(31, SQLParser.OR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(85, SQLParser.T__85);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(129, SQLParser.T__129);
      assertEquals(7, SQLParser.STRING);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(78, SQLParser.T__78);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(43, SQLParser.IN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(57, SQLParser.DATE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(38, SQLParser.GE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(79, SQLParser.T__79);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(87, SQLParser.T__87);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(33, SQLParser.XOR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(133, SQLParser.T__133);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(90, SQLParser.T__90);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(132, SQLParser.T__132);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_commands_return0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenStream tokenStream0 = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(108, SQLParser.T__108);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(62, SQLParser.T__62);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(122, SQLParser.T__122);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(38, SQLParser.GE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(129, SQLParser.T__129);
      assertEquals(79, SQLParser.T__79);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(73, SQLParser.T__73);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(118, SQLParser.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(67, SQLParser.T__67);
      assertEquals(133, SQLParser.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(43, SQLParser.IN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(90, SQLParser.T__90);
      assertEquals(37, SQLParser.GT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(117, SQLParser.T__117);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(40, SQLParser.LE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 113;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(121, SQLParser.T__121);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(57, SQLParser.DATE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(5, SQLParser.NOT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      Token token1 = recognizerSharedState0.token;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(5398, 5398, 5398).when(tokenStream0).LA(anyInt());
      doReturn(5398).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser.add_constraints_return sQLParser_add_constraints_return0 = new SQLParser.add_constraints_return();
      assertNotNull(sQLParser_add_constraints_return0);
      
      Object object1 = sQLParser_add_constraints_return0.getTree();
      assertNull(object1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState1);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertNotNull(recognizerSharedState2);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState2);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(62, SQLParser.T__62);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(130, SQLParser.T__130);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(129, SQLParser.T__129);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(121, SQLParser.T__121);
      assertEquals(79, SQLParser.T__79);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(86, SQLParser.T__86);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(113, SQLParser.T__113);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(87, SQLParser.T__87);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(89, SQLParser.T__89);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(4, SQLParser.INT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.sub_partition_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLParser.commands_return sQLParser_commands_return0 = new SQLParser.commands_return();
      assertNotNull(sQLParser_commands_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(78, SQLParser.T__78);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(120, SQLParser.T__120);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(133, SQLParser.T__133);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(124, SQLParser.T__124);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(83, SQLParser.T__83);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLParser.INT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(131, SQLParser.T__131);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertNotNull(sQLParser0);
      
      recognizerSharedState0.type = 82;
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(57, SQLParser.DATE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(46, SQLParser.SUB);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(88, SQLParser.T__88);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(7, SQLParser.STRING);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(112, SQLParser.T__112);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(38, SQLParser.GE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(107, SQLParser.T__107);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(32, SQLParser.AND);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(74, SQLParser.T__74);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(65, SQLParser.T__65);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(60, SQLParser.WS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.channel);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertNotNull(recognizerSharedState2);
      
      RecognizerSharedState recognizerSharedState3 = new RecognizerSharedState(recognizerSharedState2);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.channel);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertEquals(0, recognizerSharedState3.backtracking);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertFalse(recognizerSharedState3.errorRecovery);
      assertEquals(0, recognizerSharedState3.type);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertEquals(0, recognizerSharedState3.channel);
      assertFalse(recognizerSharedState3.failed);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState2));
      assertNotNull(recognizerSharedState3);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(141).when(tokenStream0).LA(anyInt());
      doReturn((-1)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState4 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState4.tokenStartCharIndex);
      assertFalse(recognizerSharedState4.errorRecovery);
      assertEquals(0, recognizerSharedState4.type);
      assertEquals(0, recognizerSharedState4.backtracking);
      assertEquals((-1), recognizerSharedState4.lastErrorIndex);
      assertEquals(0, recognizerSharedState4.channel);
      assertFalse(recognizerSharedState4.failed);
      assertEquals(0, recognizerSharedState4.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState4.tokenStartLine);
      assertEquals(0, recognizerSharedState4.syntaxErrors);
      assertEquals((-1), recognizerSharedState4._fsp);
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState3));
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState4);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState4);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState4.tokenStartCharIndex);
      assertFalse(recognizerSharedState4.errorRecovery);
      assertEquals(0, recognizerSharedState4.type);
      assertEquals(0, recognizerSharedState4.backtracking);
      assertEquals((-1), recognizerSharedState4.lastErrorIndex);
      assertEquals(0, recognizerSharedState4.channel);
      assertFalse(recognizerSharedState4.failed);
      assertEquals(0, recognizerSharedState4.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState4.tokenStartLine);
      assertEquals(0, recognizerSharedState4.syntaxErrors);
      assertEquals((-1), recognizerSharedState4._fsp);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(78, SQLParser.T__78);
      assertEquals(132, SQLParser.T__132);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(77, SQLParser.T__77);
      assertEquals(131, SQLParser.T__131);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(96, SQLParser.T__96);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(72, SQLParser.T__72);
      assertEquals(103, SQLParser.T__103);
      assertEquals(42, SQLParser.NULL);
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState3));
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      String string0 = sQLParser0.getGrammarFileName();
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState4.tokenStartCharIndex);
      assertFalse(recognizerSharedState4.errorRecovery);
      assertEquals(0, recognizerSharedState4.type);
      assertEquals(0, recognizerSharedState4.backtracking);
      assertEquals((-1), recognizerSharedState4.lastErrorIndex);
      assertEquals(0, recognizerSharedState4.channel);
      assertFalse(recognizerSharedState4.failed);
      assertEquals(0, recognizerSharedState4.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState4.tokenStartLine);
      assertEquals(0, recognizerSharedState4.syntaxErrors);
      assertEquals((-1), recognizerSharedState4._fsp);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(78, SQLParser.T__78);
      assertEquals(132, SQLParser.T__132);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(77, SQLParser.T__77);
      assertEquals(131, SQLParser.T__131);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(96, SQLParser.T__96);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(72, SQLParser.T__72);
      assertEquals(103, SQLParser.T__103);
      assertEquals(42, SQLParser.NULL);
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState3));
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState4.equals((Object)recognizerSharedState0));
      assertNotNull(string0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", string0);
      assertNotSame(recognizerSharedState4, recognizerSharedState2);
      assertNotSame(recognizerSharedState4, recognizerSharedState3);
      assertNotSame(recognizerSharedState4, recognizerSharedState1);
      assertNotSame(recognizerSharedState4, recognizerSharedState0);
      
      // Undeclared exception!
      try { 
        sQLParser0.index_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(95).when(tokenStream0).LA(anyInt());
      doReturn(95).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(70, SQLParser.T__70);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(78, SQLParser.T__78);
      assertEquals(38, SQLParser.GE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(129, SQLParser.T__129);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(117, SQLParser.T__117);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(83, SQLParser.T__83);
      assertEquals(4, SQLParser.INT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(41, SQLParser.IS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(94, SQLParser.T__94);
      assertEquals(113, SQLParser.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(105, SQLParser.T__105);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(120, SQLParser.T__120);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(57, SQLParser.DATE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(105).when(intStream0).LA(anyInt());
      doReturn(105).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(105, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(105, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      IntStream intStream1 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      RecognitionException recognitionException1 = new RecognitionException();
      assertEquals(0, recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.c);
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(recognitionException1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(120, SQLParser.T__120);
      assertEquals(93, SQLParser.T__93);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(34, SQLParser.EQ);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(78, SQLParser.T__78);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(32, SQLParser.AND);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(84, SQLParser.T__84);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(43, SQLParser.IN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(77, SQLParser.T__77);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(109, SQLParser.T__109);
      assertEquals(74, SQLParser.T__74);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(123, SQLParser.T__123);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(130, SQLParser.T__130);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_value_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return0 = new SQLParser.ora_lob_config_return();
      assertNotNull(sQLParser_ora_lob_config_return0);
      
      Object object1 = sQLParser_ora_lob_config_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(62, SQLParser.T__62);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(40, SQLParser.LE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(118, SQLParser.T__118);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(62, SQLParser.T__62);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(40, SQLParser.LE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(118, SQLParser.T__118);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(110, SQLParser.T__110);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(37, SQLParser.GT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.DFA2 sQLParser_DFA2_0 = sQLParser1.new DFA2(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", sQLParser_DFA2_0.getDescription());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(62, SQLParser.T__62);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(40, SQLParser.LE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(118, SQLParser.T__118);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(110, SQLParser.T__110);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(37, SQLParser.GT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertFalse(DFA.debug);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_DFA2_0);
      
      String string0 = sQLParser_DFA2_0.getDescription();
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", sQLParser_DFA2_0.getDescription());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(62, SQLParser.T__62);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(40, SQLParser.LE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(118, SQLParser.T__118);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(110, SQLParser.T__110);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(37, SQLParser.GT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertFalse(DFA.debug);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(string0);
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", string0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLParser.ora_configs_return sQLParser_ora_configs_return0 = new SQLParser.ora_configs_return();
      assertNotNull(sQLParser_ora_configs_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      sQLParser_ora_configs_return0.tree = (Object) null;
      sQLParser_ora_configs_return0.stop = null;
      Object object0 = sQLParser_ora_configs_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(90, SQLParser.T__90);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(46, SQLParser.SUB);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(105, SQLParser.T__105);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(38, SQLParser.GE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(37, SQLParser.GT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(43, SQLParser.IN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(5, SQLParser.NOT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_mutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(125).when(tokenStream0).LA(anyInt());
      doReturn(125).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(87, SQLParser.T__87);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(101, SQLParser.T__101);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(88, SQLParser.T__88);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(137, SQLParser.T__137);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(122, SQLParser.T__122);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(121, SQLParser.T__121);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(61, SQLParser.T__61);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(39, SQLParser.LT);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(84, SQLParser.T__84);
      assertEquals(119, SQLParser.T__119);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(7, SQLParser.STRING);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(85, SQLParser.T__85);
      assertEquals(118, SQLParser.T__118);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLParser.expression_list_return sQLParser_expression_list_return0 = new SQLParser.expression_list_return();
      assertNotNull(sQLParser_expression_list_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(87).when(tokenStream0).LA(anyInt());
      doReturn(87).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = null;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(135, SQLParser.T__135);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(92, SQLParser.T__92);
      assertEquals(121, SQLParser.T__121);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(62, SQLParser.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertNotNull(sQLParser0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(108).when(tokenStream0).LA(anyInt());
      doReturn(108).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(40, SQLParser.LE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertNotNull(sQLParser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BitSet bitSet0 = SQLParser.FOLLOW_65_in_alter_table1087;
      assertEquals(3, bitSet0.lengthInLongWords());
      assertEquals(32, bitSet0.size());
      assertEquals(192, bitSet0.numBits());
      assertFalse(bitSet0.isNil());
      assertNotNull(bitSet0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      // Undeclared exception!
      try { 
        sQLParser0.between_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(116, SQLParser.T__116);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(78, SQLParser.T__78);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(109, SQLParser.T__109);
      assertEquals(85, SQLParser.T__85);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(34, SQLParser.EQ);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(135, SQLParser.T__135);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(5, SQLParser.NOT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(133, SQLParser.T__133);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(37, SQLParser.GT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(43, SQLParser.IN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.sub_partition_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(115, 118, 115).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(100, SQLParser.T__100);
      assertEquals(99, SQLParser.T__99);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(69, SQLParser.T__69);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(65, SQLParser.T__65);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(118, SQLParser.T__118);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(85, SQLParser.T__85);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(100, SQLParser.T__100);
      assertEquals(99, SQLParser.T__99);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(69, SQLParser.T__69);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(65, SQLParser.T__65);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(118, SQLParser.T__118);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(85, SQLParser.T__85);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(33, SQLParser.XOR);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(119, SQLParser.T__119);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(73, SQLParser.T__73);
      assertEquals(107, SQLParser.T__107);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(137, SQLParser.T__137);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(101, SQLParser.T__101);
      assertEquals(72, SQLParser.T__72);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(87, SQLParser.T__87);
      assertEquals(47, SQLParser.STAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(118, SQLParser.T__118);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.check_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, (RecognizerSharedState) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(69, SQLParser.T__69);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(91, SQLParser.T__91);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(62, SQLParser.T__62);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(86, SQLParser.T__86);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(60, SQLParser.WS);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(47, SQLParser.STAR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(127, SQLParser.T__127);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(136, SQLParser.T__136);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return0 = new SQLParser.ora_lob_config_return();
      assertNotNull(sQLParser_ora_lob_config_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      Object object0 = sQLParser_table_details_return0.getTree();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLParser.commands_return sQLParser_commands_return0 = new SQLParser.commands_return();
      assertNotNull(sQLParser_commands_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 109, 109, (-4875), 890).when(tokenStream0).LA(anyInt());
      doReturn(1049).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(120, SQLParser.T__120);
      assertEquals(94, SQLParser.T__94);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(79, SQLParser.T__79);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(87, SQLParser.T__87);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(124, SQLParser.T__124);
      assertEquals(90, SQLParser.T__90);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(116, SQLParser.T__116);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(91, SQLParser.T__91);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(41, SQLParser.IS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertNotNull(sQLParser0);
      
      recognizerSharedState0.type = 82;
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokenStream tokenStream0 = null;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(120, SQLParser.T__120);
      assertEquals(40, SQLParser.LE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(64, SQLParser.T__64);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(111, SQLParser.T__111);
      assertEquals(94, SQLParser.T__94);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(125, SQLParser.T__125);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(38, SQLParser.GE);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(78, SQLParser.T__78);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(102, SQLParser.T__102);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(100, SQLParser.T__100);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(69, SQLParser.T__69);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(97, SQLParser.T__97);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_opt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(80, SQLParser.T__80);
      assertEquals(46, SQLParser.SUB);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(65, SQLParser.T__65);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(47, SQLParser.STAR);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(108, SQLParser.T__108);
      assertEquals(130, SQLParser.T__130);
      assertEquals(66, SQLParser.T__66);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(100, SQLParser.T__100);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(97, SQLParser.T__97);
      assertEquals(137, SQLParser.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(5, SQLParser.NOT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(105, SQLParser.T__105);
      assertEquals(61, SQLParser.T__61);
      assertEquals(42, SQLParser.NULL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(120, SQLParser.T__120);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, SQLParser.T__99);
      assertEquals(84, SQLParser.T__84);
      assertEquals(57, SQLParser.DATE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(92, SQLParser.T__92);
      assertEquals(112, SQLParser.T__112);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.expression_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 0).when(tokenStream0).LA(anyInt());
      doReturn(109).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(32, SQLParser.AND);
      assertEquals(120, SQLParser.T__120);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(47, SQLParser.STAR);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(93, SQLParser.T__93);
      assertEquals(46, SQLParser.SUB);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(137, SQLParser.T__137);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(72, SQLParser.T__72);
      assertEquals(7, SQLParser.STRING);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(76, SQLParser.T__76);
      assertEquals(42, SQLParser.NULL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.relational_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(100).when(tokenStream0).LA(anyInt());
      doReturn(117).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(69, SQLParser.T__69);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, SQLParser.T__99);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(111, SQLParser.T__111);
      assertEquals(62, SQLParser.T__62);
      assertEquals(77, SQLParser.T__77);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(70, SQLParser.T__70);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(133, SQLParser.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(116, SQLParser.T__116);
      assertEquals(87, SQLParser.T__87);
      assertEquals(101, SQLParser.T__101);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(73, SQLParser.T__73);
      assertEquals(107, SQLParser.T__107);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(69, SQLParser.T__69);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, SQLParser.T__99);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(111, SQLParser.T__111);
      assertEquals(62, SQLParser.T__62);
      assertEquals(77, SQLParser.T__77);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(70, SQLParser.T__70);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(133, SQLParser.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(116, SQLParser.T__116);
      assertEquals(87, SQLParser.T__87);
      assertEquals(101, SQLParser.T__101);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(73, SQLParser.T__73);
      assertEquals(107, SQLParser.T__107);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(84, SQLParser.T__84);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(102, SQLParser.T__102);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(61, SQLParser.T__61);
      assertEquals(57, SQLParser.DATE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(67, SQLParser.T__67);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(121, SQLParser.T__121);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(130, SQLParser.T__130);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertNotNull(sQLParser0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      int int0 = 52;
      // Undeclared exception!
      try { 
        sQLParser0.primary_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(137).when(intStream0).LA(anyInt());
      doReturn((-121)).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(137, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals((-121), recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      Object object0 = sQLParser_ora_partition_spec_return0.getTree();
      assertNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 429;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn(0).when(tokenStream0).mark();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(118, SQLParser.T__118);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(42, SQLParser.NULL);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(113, SQLParser.T__113);
      assertEquals(40, SQLParser.LE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(5, SQLParser.NOT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(4, SQLParser.INT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(7, SQLParser.STRING);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(116, SQLParser.T__116);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.command();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(115, 118, 115, 115).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(116, SQLParser.T__116);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(116, SQLParser.T__116);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(61, SQLParser.T__61);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(128, SQLParser.T__128);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(70, SQLParser.T__70);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser1.commands();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(116, SQLParser.T__116);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(61, SQLParser.T__61);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(128, SQLParser.T__128);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(70, SQLParser.T__70);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_commands_return0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(37).when(tokenStream0).LA(anyInt());
      doReturn((-2182)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(83, SQLParser.T__83);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.expression_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(46, SQLParser.SUB);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(102, SQLParser.T__102);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(61, SQLParser.T__61);
      assertEquals(106, SQLParser.T__106);
      assertEquals(76, SQLParser.T__76);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(82, SQLParser.T__82);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(40, SQLParser.LE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(43, SQLParser.IN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(5, SQLParser.NOT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertNotNull(sQLParser0);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(46, SQLParser.SUB);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(102, SQLParser.T__102);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(61, SQLParser.T__61);
      assertEquals(106, SQLParser.T__106);
      assertEquals(76, SQLParser.T__76);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(82, SQLParser.T__82);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(40, SQLParser.LE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(43, SQLParser.IN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(5, SQLParser.NOT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertNotNull(sQLParser_commands_return0);
      
      Object object0 = sQLParser_commands_return0.getTree();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(46, SQLParser.SUB);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(102, SQLParser.T__102);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(61, SQLParser.T__61);
      assertEquals(106, SQLParser.T__106);
      assertEquals(76, SQLParser.T__76);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(82, SQLParser.T__82);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(40, SQLParser.LE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(43, SQLParser.IN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(5, SQLParser.NOT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertNull(object0);
      
      SQLParser.ora_lob_index_return sQLParser_ora_lob_index_return0 = new SQLParser.ora_lob_index_return();
      assertNotNull(sQLParser_ora_lob_index_return0);
      
      Object object1 = sQLParser_ora_lob_index_return0.getTree();
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob_index();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(7, SQLParser.STRING);
      assertEquals(115, SQLParser.T__115);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(98, SQLParser.T__98);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(68, SQLParser.T__68);
      assertEquals(67, SQLParser.T__67);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(72, SQLParser.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(112, SQLParser.T__112);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.foreign_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(95, 95, 95).when(tokenStream0).LA(anyInt());
      doReturn(95).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(5, SQLParser.NOT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(119, SQLParser.T__119);
      assertEquals(61, SQLParser.T__61);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, SQLParser.T__99);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(94, SQLParser.T__94);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(101, SQLParser.T__101);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(32, SQLParser.AND);
      assertEquals(114, SQLParser.T__114);
      assertEquals(88, SQLParser.T__88);
      assertEquals(129, SQLParser.T__129);
      assertEquals(31, SQLParser.OR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertNotNull(sQLParser0);
      
      SQLParser.constraint_detail_return sQLParser_constraint_detail_return0 = new SQLParser.constraint_detail_return();
      assertNotNull(sQLParser_constraint_detail_return0);
      
      Object object0 = sQLParser_constraint_detail_return0.getTree();
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(58).when(intStream0).LA(anyInt());
      doReturn(58).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(58, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(58, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      Object object0 = sQLParser_ora_partition_spec_return0.getTree();
      assertNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(67, 58, 0).when(tokenStream0).LA(anyInt());
      doReturn(58).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(85, SQLParser.T__85);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(69, SQLParser.T__69);
      assertEquals(40, SQLParser.LE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(4, SQLParser.INT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(63, SQLParser.T__63);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.sub_partition_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      SQLParser.exclusive_or_expression_return sQLParser_exclusive_or_expression_return0 = new SQLParser.exclusive_or_expression_return();
      assertNotNull(sQLParser_exclusive_or_expression_return0);
      
      Object object0 = sQLParser_exclusive_or_expression_return0.tree;
      assertNull(object0);
      
      sQLParser_keyword_return0.tree = null;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(107).when(tokenStream0).LA(anyInt());
      doReturn(107).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(116, SQLParser.T__116);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(65, SQLParser.T__65);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(115).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(96, SQLParser.T__96);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(75, SQLParser.T__75);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(33, SQLParser.XOR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(122, SQLParser.T__122);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(78, SQLParser.T__78);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(121, SQLParser.T__121);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(113, SQLParser.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(87, SQLParser.T__87);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(96, SQLParser.T__96);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(75, SQLParser.T__75);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(33, SQLParser.XOR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(122, SQLParser.T__122);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(78, SQLParser.T__78);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(121, SQLParser.T__121);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(113, SQLParser.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(87, SQLParser.T__87);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(32, SQLParser.AND);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(42, SQLParser.NULL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(72, SQLParser.T__72);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(109, SQLParser.T__109);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser1.commands();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(96, SQLParser.T__96);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(75, SQLParser.T__75);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(33, SQLParser.XOR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(122, SQLParser.T__122);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(78, SQLParser.T__78);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(121, SQLParser.T__121);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(113, SQLParser.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(87, SQLParser.T__87);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(32, SQLParser.AND);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(42, SQLParser.NULL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(72, SQLParser.T__72);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(109, SQLParser.T__109);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_commands_return0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      SQLParser.alter_table_return sQLParser_alter_table_return0 = new SQLParser.alter_table_return();
      assertNotNull(sQLParser_alter_table_return0);
      
      Object object0 = sQLParser_alter_table_return0.getTree();
      assertNull(object0);
      
      SQLParser.commands_return sQLParser_commands_return1 = new SQLParser.commands_return();
      assertFalse(sQLParser_commands_return1.equals((Object)sQLParser_commands_return0));
      assertNotNull(sQLParser_commands_return1);
      
      Object object1 = sQLParser_commands_return1.getTree();
      assertFalse(sQLParser_commands_return1.equals((Object)sQLParser_commands_return0));
      assertNull(object1);
      assertNotSame(sQLParser_commands_return1, sQLParser_commands_return0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.tokenStartCharIndex = 0;
      recognizerSharedState1.tokenStartCharIndex = (-1);
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(31, SQLParser.OR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(80, SQLParser.T__80);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(81, SQLParser.T__81);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(60, SQLParser.WS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(92, SQLParser.T__92);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(7, SQLParser.STRING);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      int int0 = (-3528);
      // Undeclared exception!
      try { 
        sQLParser0.table_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(127, 5, (-1), 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(82, SQLParser.T__82);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(82, SQLParser.T__82);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser_commands_return0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      
      SQLParser sQLParser1 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(33, SQLParser.XOR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(109, SQLParser.T__109);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLParser.drop_table_return sQLParser_drop_table_return0 = new SQLParser.drop_table_return();
      assertNotNull(sQLParser_drop_table_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = null;
      try {
        recognizerSharedState0 = new RecognizerSharedState((RecognizerSharedState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognizerSharedState", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return0 = new SQLParser.ora_lob_config_return();
      assertNotNull(sQLParser_ora_lob_config_return0);
      
      Object object0 = sQLParser_ora_lob_config_return0.getTree();
      assertNull(object0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(115, SQLParser.T__115);
      assertEquals(99, SQLParser.T__99);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(127, SQLParser.T__127);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(115, SQLParser.T__115);
      assertEquals(99, SQLParser.T__99);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(127, SQLParser.T__127);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(47, SQLParser.STAR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(116, SQLParser.T__116);
      assertEquals(89, SQLParser.T__89);
      assertEquals(124, SQLParser.T__124);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(82, SQLParser.T__82);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(67, SQLParser.T__67);
      assertEquals(130, SQLParser.T__130);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(92, SQLParser.T__92);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(120, SQLParser.T__120);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(70, SQLParser.T__70);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.DFA2 sQLParser_DFA2_0 = sQLParser1.new DFA2(sQLParser1);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", sQLParser_DFA2_0.getDescription());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(115, SQLParser.T__115);
      assertEquals(99, SQLParser.T__99);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(127, SQLParser.T__127);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(47, SQLParser.STAR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(116, SQLParser.T__116);
      assertEquals(89, SQLParser.T__89);
      assertEquals(124, SQLParser.T__124);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(82, SQLParser.T__82);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(67, SQLParser.T__67);
      assertEquals(130, SQLParser.T__130);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(92, SQLParser.T__92);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(120, SQLParser.T__120);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(70, SQLParser.T__70);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertFalse(DFA.debug);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_DFA2_0);
      
      String string0 = sQLParser_DFA2_0.getDescription();
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", sQLParser_DFA2_0.getDescription());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(115, SQLParser.T__115);
      assertEquals(99, SQLParser.T__99);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(127, SQLParser.T__127);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(47, SQLParser.STAR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(116, SQLParser.T__116);
      assertEquals(89, SQLParser.T__89);
      assertEquals(124, SQLParser.T__124);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(82, SQLParser.T__82);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(67, SQLParser.T__67);
      assertEquals(130, SQLParser.T__130);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(92, SQLParser.T__92);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(120, SQLParser.T__120);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(70, SQLParser.T__70);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertFalse(DFA.debug);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(string0);
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", string0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser1.ora_storage_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(127).when(tokenStream0).LA(anyInt());
      doReturn((-5)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(63, SQLParser.T__63);
      assertEquals(122, SQLParser.T__122);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(71, SQLParser.T__71);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(57, SQLParser.DATE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(42, SQLParser.NULL);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(111, SQLParser.T__111);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(98, SQLParser.T__98);
      assertEquals(110, SQLParser.T__110);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      Token token1 = recognitionException0.token;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(6, 13).when(tokenStream0).LA(anyInt());
      doReturn((-1492)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(125, SQLParser.T__125);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(60, SQLParser.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(74, SQLParser.T__74);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(67, SQLParser.T__67);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(33, SQLParser.XOR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(43, SQLParser.IN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState2 = null;
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, (RecognizerSharedState) null);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(125, SQLParser.T__125);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(60, SQLParser.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(74, SQLParser.T__74);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(67, SQLParser.T__67);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(33, SQLParser.XOR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(43, SQLParser.IN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(116, SQLParser.T__116);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(87, SQLParser.T__87);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(32, SQLParser.AND);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(84, SQLParser.T__84);
      assertEquals(119, SQLParser.T__119);
      assertEquals(92, SQLParser.T__92);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(83, SQLParser.T__83);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(120, SQLParser.T__120);
      assertEquals(91, SQLParser.T__91);
      assertEquals(33, SQLParser.XOR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(69, SQLParser.T__69);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(104, SQLParser.T__104);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(122, SQLParser.T__122);
      assertEquals(73, SQLParser.T__73);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(66, SQLParser.T__66);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(43, SQLParser.IN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(42, SQLParser.NULL);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(112, SQLParser.T__112);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(124, SQLParser.T__124);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(47, SQLParser.STAR);
      assertEquals(122, SQLParser.T__122);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertNotNull(sQLParser0);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(66, SQLParser.T__66);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(43, SQLParser.IN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(42, SQLParser.NULL);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(112, SQLParser.T__112);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(124, SQLParser.T__124);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(47, SQLParser.STAR);
      assertEquals(122, SQLParser.T__122);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertNotNull(sQLParser_commands_return0);
      
      sQLParser_commands_return0.start = null;
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      sQLParser_keyword_return0.start = null;
      sQLParser_commands_return0.tree = (Object) null;
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_opt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      SQLParser.default_value_return sQLParser_default_value_return0 = new SQLParser.default_value_return();
      assertNotNull(sQLParser_default_value_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(60, SQLParser.WS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(89, SQLParser.T__89);
      assertEquals(134, SQLParser.T__134);
      assertEquals(74, SQLParser.T__74);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(133, SQLParser.T__133);
      assertEquals(67, SQLParser.T__67);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(125, SQLParser.T__125);
      assertEquals(43, SQLParser.IN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(110, SQLParser.T__110);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(99, SQLParser.T__99);
      assertEquals(124, SQLParser.T__124);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(47, SQLParser.STAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(107, SQLParser.T__107);
      assertEquals(7, SQLParser.STRING);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(136, SQLParser.T__136);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertNotNull(sQLParser0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      // Undeclared exception!
      try { 
        sQLParser0.getTokenErrorDisplay((Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.BaseRecognizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(125, SQLParser.T__125);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(117, SQLParser.T__117);
      assertEquals(89, SQLParser.T__89);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(109, SQLParser.T__109);
      assertEquals(82, SQLParser.T__82);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(7, SQLParser.STRING);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(106, SQLParser.T__106);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(85, SQLParser.T__85);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(70, SQLParser.T__70);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(105, SQLParser.T__105);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(128, SQLParser.T__128);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(120, SQLParser.T__120);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(57, SQLParser.DATE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(32, SQLParser.AND);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.create_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      Object object0 = sQLParser_table_comment_details_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(127, SQLParser.T__127);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(43, SQLParser.IN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(38, SQLParser.GE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.expression_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(4, 0).when(tokenStream0).LA(anyInt());
      doReturn(4).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(122, SQLParser.T__122);
      assertEquals(78, SQLParser.T__78);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(47, SQLParser.STAR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(74, SQLParser.T__74);
      assertEquals(103, SQLParser.T__103);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(89, SQLParser.T__89);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(94, SQLParser.T__94);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(57, SQLParser.DATE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.null_comparison();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(108).when(tokenStream0).LA(anyInt());
      doReturn(863).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(123, SQLParser.T__123);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(119, SQLParser.T__119);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(90, SQLParser.T__90);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertNotNull(sQLParser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BitSet bitSet0 = SQLParser.FOLLOW_65_in_alter_table1087;
      assertEquals(192, bitSet0.numBits());
      assertEquals(32, bitSet0.size());
      assertFalse(bitSet0.isNil());
      assertEquals(3, bitSet0.lengthInLongWords());
      assertNotNull(bitSet0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(123, SQLParser.T__123);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(119, SQLParser.T__119);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(90, SQLParser.T__90);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(5, SQLParser.NOT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(77, SQLParser.T__77);
      assertEquals(113, SQLParser.T__113);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(45, SQLParser.PLUS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(47, SQLParser.STAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(119, SQLParser.T__119);
      assertEquals(134, SQLParser.T__134);
      assertEquals(71, SQLParser.T__71);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(79, SQLParser.T__79);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.line);
      assertEquals(3964, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 3964).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(108, SQLParser.T__108);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(32, SQLParser.AND);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(69, SQLParser.T__69);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(123, SQLParser.T__123);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(47, SQLParser.STAR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(5, SQLParser.NOT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(40, SQLParser.LE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(7, SQLParser.STRING);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(37, SQLParser.GT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(94, SQLParser.T__94);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.inline_constraint_return sQLParser_inline_constraint_return0 = new SQLParser.inline_constraint_return();
      assertNotNull(sQLParser_inline_constraint_return0);
      
      Object object0 = sQLParser_inline_constraint_return0.getTree();
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(108, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(108).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(134, SQLParser.T__134);
      assertEquals(63, SQLParser.T__63);
      assertEquals(126, SQLParser.T__126);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(128, SQLParser.T__128);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(4, SQLParser.INT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertNotNull(sQLParser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(61).when(tokenStream0).LA(anyInt());
      doReturn(2449).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(100, SQLParser.T__100);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(76, SQLParser.T__76);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(32, SQLParser.AND);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(83, SQLParser.T__83);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(113, SQLParser.T__113);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(41, SQLParser.IS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(40, SQLParser.LE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(100, SQLParser.T__100);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(76, SQLParser.T__76);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(32, SQLParser.AND);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(83, SQLParser.T__83);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(113, SQLParser.T__113);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(41, SQLParser.IS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(40, SQLParser.LE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(131, SQLParser.T__131);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(101, SQLParser.T__101);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(107, SQLParser.T__107);
      assertEquals(65, SQLParser.T__65);
      assertEquals(130, SQLParser.T__130);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(98, SQLParser.T__98);
      assertEquals(135, SQLParser.T__135);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, SQLParser.T__99);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(84, SQLParser.T__84);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.table_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(120, SQLParser.T__120);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(78, SQLParser.T__78);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(77, SQLParser.T__77);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(123, SQLParser.T__123);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.size_uom();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      SQLParser.and_expression_return sQLParser_and_expression_return0 = new SQLParser.and_expression_return();
      assertNotNull(sQLParser_and_expression_return0);
      
      SQLParser.constraint_spec_return sQLParser_constraint_spec_return0 = new SQLParser.constraint_spec_return();
      assertNotNull(sQLParser_constraint_spec_return0);
      
      Object object0 = sQLParser_constraint_spec_return0.getTree();
      assertNull(object0);
      
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(134, SQLParser.T__134);
      assertEquals(34, SQLParser.EQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(61, SQLParser.T__61);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.inline_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(97, SQLParser.T__97);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(68, SQLParser.T__68);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(61, SQLParser.T__61);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(85, SQLParser.T__85);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(93, SQLParser.T__93);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(80, SQLParser.T__80);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(97, SQLParser.T__97);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(68, SQLParser.T__68);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(61, SQLParser.T__61);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(85, SQLParser.T__85);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(93, SQLParser.T__93);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(80, SQLParser.T__80);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(110, SQLParser.T__110);
      assertEquals(38, SQLParser.GE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(7, SQLParser.STRING);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(33, SQLParser.XOR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(83, SQLParser.T__83);
      assertEquals(113, SQLParser.T__113);
      assertEquals(98, SQLParser.T__98);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(74, SQLParser.T__74);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.index_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 126).when(tokenStream0).LA(anyInt());
      doReturn((-123)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(130, SQLParser.T__130);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(110, SQLParser.T__110);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(47, SQLParser.STAR);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(65, SQLParser.T__65);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(92, SQLParser.T__92);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return0 = new SQLParser.ora_lob_config_return();
      assertNotNull(sQLParser_ora_lob_config_return0);
      
      Object object0 = sQLParser_ora_lob_config_return0.getTree();
      assertNull(object0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(99, SQLParser.T__99);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(57, SQLParser.DATE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(7, SQLParser.STRING);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(112, SQLParser.T__112);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(61, SQLParser.T__61);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(99, SQLParser.T__99);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(57, SQLParser.DATE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(7, SQLParser.STRING);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(112, SQLParser.T__112);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(61, SQLParser.T__61);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(130, SQLParser.T__130);
      assertEquals(64, SQLParser.T__64);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(118, SQLParser.T__118);
      assertEquals(91, SQLParser.T__91);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(68, SQLParser.T__68);
      assertEquals(111, SQLParser.T__111);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(129, SQLParser.T__129);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(95, SQLParser.T__95);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(80, SQLParser.T__80);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(105, SQLParser.T__105);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser1.commands();
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(99, SQLParser.T__99);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(57, SQLParser.DATE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(7, SQLParser.STRING);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(112, SQLParser.T__112);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(61, SQLParser.T__61);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(130, SQLParser.T__130);
      assertEquals(64, SQLParser.T__64);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(118, SQLParser.T__118);
      assertEquals(91, SQLParser.T__91);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(68, SQLParser.T__68);
      assertEquals(111, SQLParser.T__111);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(129, SQLParser.T__129);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(95, SQLParser.T__95);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(80, SQLParser.T__80);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(105, SQLParser.T__105);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_commands_return0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenStream tokenStream0 = null;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(98, SQLParser.T__98);
      assertEquals(37, SQLParser.GT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(110, SQLParser.T__110);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(63, SQLParser.T__63);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(77, SQLParser.T__77);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(92, SQLParser.T__92);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(99, SQLParser.T__99);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertNotNull(sQLParser0);
      
      recognizerSharedState0.backtracking = 0;
      // Undeclared exception!
      try { 
        sQLParser0.add_constraints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(3964, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(3964, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 3964).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(5, SQLParser.NOT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(61, SQLParser.T__61);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(111, SQLParser.T__111);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(91, SQLParser.T__91);
      assertEquals(7, SQLParser.STRING);
      assertEquals(76, SQLParser.T__76);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(38, SQLParser.GE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(79, SQLParser.T__79);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(87, SQLParser.T__87);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(137, SQLParser.T__137);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(129, SQLParser.T__129);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertNotNull(sQLParser0);
      
      SQLParser.equality_expression_return sQLParser_equality_expression_return0 = new SQLParser.equality_expression_return();
      assertNotNull(sQLParser_equality_expression_return0);
      
      // Undeclared exception!
      try { 
        sQLParser0.size_uom();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.line);
      assertEquals(3964, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 3964).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      Object object0 = sQLParser_drop_sequence_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(133, SQLParser.T__133);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(70, SQLParser.T__70);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(73, SQLParser.T__73);
      assertEquals(120, SQLParser.T__120);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals(4, SQLParser.INT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(33, SQLParser.XOR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(91, SQLParser.T__91);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.qualified_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(88, SQLParser.T__88);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(57, SQLParser.DATE);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(43, SQLParser.IN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(40, SQLParser.LE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(5, SQLParser.NOT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(38, SQLParser.GE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(57, SQLParser.DATE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(40, SQLParser.LE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(71, SQLParser.T__71);
      assertEquals(5, SQLParser.NOT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(47, SQLParser.STAR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(41, SQLParser.IS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.foreign_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(31).when(tokenStream0).LA(anyInt());
      doReturn((-83)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(109, SQLParser.T__109);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(88, SQLParser.T__88);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLParser.SUB);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(66, SQLParser.T__66);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(89, SQLParser.T__89);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(32, SQLParser.AND);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(57, SQLParser.DATE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(92, SQLParser.T__92);
      assertEquals(120, SQLParser.T__120);
      assertEquals(84, SQLParser.T__84);
      assertEquals(70, SQLParser.T__70);
      assertEquals(135, SQLParser.T__135);
      assertEquals(39, SQLParser.LT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(86, SQLParser.T__86);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(38, SQLParser.GE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertNotNull(sQLParser0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState1);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(109, SQLParser.T__109);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(88, SQLParser.T__88);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(46, SQLParser.SUB);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(66, SQLParser.T__66);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(89, SQLParser.T__89);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(32, SQLParser.AND);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(57, SQLParser.DATE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(92, SQLParser.T__92);
      assertEquals(120, SQLParser.T__120);
      assertEquals(84, SQLParser.T__84);
      assertEquals(70, SQLParser.T__70);
      assertEquals(135, SQLParser.T__135);
      assertEquals(39, SQLParser.LT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(86, SQLParser.T__86);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(38, SQLParser.GE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(34, SQLParser.EQ);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(31, SQLParser.OR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        sQLParser1.in_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLParser.ora_flag_return sQLParser_ora_flag_return0 = new SQLParser.ora_flag_return();
      assertNotNull(sQLParser_ora_flag_return0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(113, SQLParser.T__113);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(42, SQLParser.NULL);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(124, SQLParser.T__124);
      assertEquals(94, SQLParser.T__94);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(125, SQLParser.T__125);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(33, SQLParser.XOR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(108).when(tokenStream0).LA(anyInt());
      doReturn(108).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(70, SQLParser.T__70);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(62, SQLParser.T__62);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(76, SQLParser.T__76);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(74, SQLParser.T__74);
      assertEquals(122, SQLParser.T__122);
      assertEquals(97, SQLParser.T__97);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(60, SQLParser.WS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(105, SQLParser.T__105);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(40, SQLParser.LE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertNotNull(sQLParser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(68, SQLParser.T__68);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(37, SQLParser.GT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(5, SQLParser.NOT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(127, SQLParser.T__127);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(70, SQLParser.T__70);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(86, SQLParser.T__86);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(95, SQLParser.T__95);
      assertEquals(109, SQLParser.T__109);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(108, SQLParser.T__108);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(67, SQLParser.T__67);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(97, SQLParser.T__97);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      int int0 = 52;
      // Undeclared exception!
      try { 
        sQLParser0.primary_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.type = 2;
      sQLParser_table_comment_details_return0.start = null;
      sQLParser_table_comment_details_return0.tree = (Object) "";
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      sQLParser_table_comment_details_return0.stop = null;
      Object object0 = sQLParser_table_comment_details_return0.getTree();
      assertNotNull(object0);
      assertEquals("", object0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLParser.create_table_return sQLParser_create_table_return0 = new SQLParser.create_table_return();
      assertNotNull(sQLParser_create_table_return0);
      
      SQLParser.relational_expression_return sQLParser_relational_expression_return0 = new SQLParser.relational_expression_return();
      assertNotNull(sQLParser_relational_expression_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(2, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(42, SQLParser.NULL);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(94, SQLParser.T__94);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(130, SQLParser.T__130);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(98, SQLParser.T__98);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.exclusive_or_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = sQLParser_foreign_key_constraint_return1.getTree();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNull(object0);
      assertNotSame(sQLParser_foreign_key_constraint_return1, sQLParser_foreign_key_constraint_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(31, SQLParser.OR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(38, SQLParser.GE);
      assertEquals(43, SQLParser.IN);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(125, SQLParser.T__125);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(67, SQLParser.T__67);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(130, SQLParser.T__130);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(129, SQLParser.T__129);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(2482).when(tokenStream0).LA(anyInt());
      doReturn(123).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState1);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState2);
      
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(60, SQLParser.WS);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(102, SQLParser.T__102);
      assertEquals(63, SQLParser.T__63);
      assertEquals(40, SQLParser.LE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(84, SQLParser.T__84);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(31, SQLParser.OR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.expression_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLParser.sub_partition_config_return sQLParser_sub_partition_config_return0 = new SQLParser.sub_partition_config_return();
      assertNotNull(sQLParser_sub_partition_config_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      Map<Integer, Integer>[] mapArray0 = (Map<Integer, Integer>[]) Array.newInstance(Map.class, 0);
      recognizerSharedState0.ruleMemo = mapArray0;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(106, SQLParser.T__106);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(7, SQLParser.STRING);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertNotNull(sQLParser0);
      
      recognizerSharedState0.channel = 94;
      // Undeclared exception!
      try { 
        sQLParser0.partition_parts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.table_mutation_return sQLParser_table_mutation_return0 = new SQLParser.table_mutation_return();
      assertNotNull(sQLParser_table_mutation_return0);
      
      Object object0 = sQLParser_table_mutation_return0.getTree();
      assertNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(104, SQLParser.T__104);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(111, SQLParser.T__111);
      assertEquals(72, SQLParser.T__72);
      assertEquals(109, SQLParser.T__109);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(43, SQLParser.IN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(32, SQLParser.AND);
      assertEquals(90, SQLParser.T__90);
      assertEquals(108, SQLParser.T__108);
      assertEquals(83, SQLParser.T__83);
      assertEquals(115, SQLParser.T__115);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(97, SQLParser.T__97);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(88, SQLParser.T__88);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.constraint_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(5, 80, 5).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(34, SQLParser.EQ);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(7, SQLParser.STRING);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(129, SQLParser.T__129);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(40, SQLParser.LE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(57, SQLParser.DATE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.nullability();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream1, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(102, SQLParser.T__102);
      assertEquals(78, SQLParser.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(117, SQLParser.T__117);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(103, SQLParser.T__103);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(95, SQLParser.T__95);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.and_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLParser.exclusive_or_expression_return sQLParser_exclusive_or_expression_return0 = new SQLParser.exclusive_or_expression_return();
      assertNotNull(sQLParser_exclusive_or_expression_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(42, SQLParser.NULL);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(47, SQLParser.STAR);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(107).when(tokenStream0).LA(anyInt());
      doReturn(107).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(43, SQLParser.IN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(110, SQLParser.T__110);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(7, SQLParser.STRING);
      assertEquals(85, SQLParser.T__85);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(5, SQLParser.NOT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(90, SQLParser.T__90);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_opt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((String) null).when(tokenStream0).getSourceName();
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(38, SQLParser.GE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertNotNull(sQLParser0);
      
      sQLParser0.traceOut("token 68", 86);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(38, SQLParser.GE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      
      String string0 = sQLParser0.getSourceName();
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(38, SQLParser.GE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_part();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(3964, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 3964).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(33, SQLParser.XOR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(74, SQLParser.T__74);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(111, SQLParser.T__111);
      assertEquals(97, SQLParser.T__97);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(118, SQLParser.T__118);
      assertEquals(90, SQLParser.T__90);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(38, SQLParser.GE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(37, SQLParser.GT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(43, SQLParser.IN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(4, SQLParser.INT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(85, SQLParser.T__85);
      assertEquals(115, SQLParser.T__115);
      assertEquals(93, SQLParser.T__93);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(100, SQLParser.T__100);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(130, SQLParser.T__130);
      assertEquals(114, SQLParser.T__114);
      assertEquals(94, SQLParser.T__94);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(72, SQLParser.T__72);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(88, SQLParser.T__88);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(33, SQLParser.XOR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(74, SQLParser.T__74);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(111, SQLParser.T__111);
      assertEquals(97, SQLParser.T__97);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(118, SQLParser.T__118);
      assertEquals(90, SQLParser.T__90);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(38, SQLParser.GE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(37, SQLParser.GT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(43, SQLParser.IN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(4, SQLParser.INT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(85, SQLParser.T__85);
      assertEquals(115, SQLParser.T__115);
      assertEquals(93, SQLParser.T__93);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(100, SQLParser.T__100);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(130, SQLParser.T__130);
      assertEquals(114, SQLParser.T__114);
      assertEquals(94, SQLParser.T__94);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(72, SQLParser.T__72);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(88, SQLParser.T__88);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(104, SQLParser.T__104);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(38, SQLParser.GE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(71, SQLParser.T__71);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(70, SQLParser.T__70);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(99, SQLParser.T__99);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser0.value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLParser.in_expression_return sQLParser_in_expression_return0 = new SQLParser.in_expression_return();
      assertNotNull(sQLParser_in_expression_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      sQLParser_in_expression_return0.start = null;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      sQLParser_in_expression_return0.stop = null;
      recognizerSharedState1.failed = false;
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      sQLParser_in_expression_return0.stop = null;
      sQLParser_in_expression_return0.tree = (Object) "IHJ*(ha ";
      Object object0 = sQLParser_in_expression_return0.getTree();
      assertNotNull(object0);
      assertEquals("IHJ*(ha ", object0);
      
      SQLParser.in_expression_return sQLParser_in_expression_return1 = new SQLParser.in_expression_return();
      assertFalse(sQLParser_in_expression_return1.equals((Object)sQLParser_in_expression_return0));
      assertNotNull(sQLParser_in_expression_return1);
      
      SQLParser.column_name_return sQLParser_column_name_return0 = new SQLParser.column_name_return();
      assertNotNull(sQLParser_column_name_return0);
      
      recognizerSharedState1.tokenStartCharPositionInLine = 107;
      SQLParser.exclusive_or_expression_return sQLParser_exclusive_or_expression_return0 = new SQLParser.exclusive_or_expression_return();
      assertNotNull(sQLParser_exclusive_or_expression_return0);
      
      sQLParser_exclusive_or_expression_return0.tree = (Object) sQLParser_in_expression_return0;
      Object object1 = sQLParser_exclusive_or_expression_return0.getTree();
      assertFalse(object1.equals((Object)sQLParser_in_expression_return1));
      assertNotNull(object1);
      assertNotSame(object1, sQLParser_in_expression_return1);
      assertSame(object1, sQLParser_in_expression_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      sQLParser_type_return0.stop = null;
      Object object2 = sQLParser_type_return0.getTree();
      assertNull(object2);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(37, SQLParser.GT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(5, SQLParser.NOT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(4, SQLParser.INT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(77, SQLParser.T__77);
      assertEquals(119, SQLParser.T__119);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(62, SQLParser.T__62);
      assertEquals(126, SQLParser.T__126);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(70, SQLParser.T__70);
      assertEquals(111, SQLParser.T__111);
      assertEquals(93, SQLParser.T__93);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(103, SQLParser.T__103);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(7, SQLParser.STRING);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(102, SQLParser.T__102);
      assertEquals(64, SQLParser.T__64);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(131, SQLParser.T__131);
      assertEquals(95, SQLParser.T__95);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(116, SQLParser.T__116);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(31, SQLParser.OR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(88, SQLParser.T__88);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(130, SQLParser.T__130);
      assertEquals(96, SQLParser.T__96);
      assertEquals(100, SQLParser.T__100);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(89, SQLParser.T__89);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(114, SQLParser.T__114);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.unique_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(35, 35).when(tokenStream0).LA(anyInt());
      doReturn((-4193)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(114, SQLParser.T__114);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(110, SQLParser.T__110);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(64, SQLParser.T__64);
      assertEquals(33, SQLParser.XOR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(127, SQLParser.T__127);
      assertEquals(72, SQLParser.T__72);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(90, SQLParser.T__90);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(75, SQLParser.T__75);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertNotNull(sQLParser0);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(114, SQLParser.T__114);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(110, SQLParser.T__110);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(64, SQLParser.T__64);
      assertEquals(33, SQLParser.XOR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(127, SQLParser.T__127);
      assertEquals(72, SQLParser.T__72);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(90, SQLParser.T__90);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(75, SQLParser.T__75);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertNotNull(sQLParser_commands_return0);
      
      Object object0 = sQLParser_commands_return0.getTree();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(114, SQLParser.T__114);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(110, SQLParser.T__110);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(64, SQLParser.T__64);
      assertEquals(33, SQLParser.XOR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(127, SQLParser.T__127);
      assertEquals(72, SQLParser.T__72);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(90, SQLParser.T__90);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(75, SQLParser.T__75);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertNull(object0);
      
      RecognizerSharedState recognizerSharedState0 = null;
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(114, SQLParser.T__114);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(110, SQLParser.T__110);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(64, SQLParser.T__64);
      assertEquals(33, SQLParser.XOR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(127, SQLParser.T__127);
      assertEquals(72, SQLParser.T__72);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(90, SQLParser.T__90);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(75, SQLParser.T__75);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(83, SQLParser.T__83);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(76, SQLParser.T__76);
      assertEquals(39, SQLParser.LT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(88, SQLParser.T__88);
      assertEquals(115, SQLParser.T__115);
      assertEquals(108, SQLParser.T__108);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(74, SQLParser.T__74);
      assertEquals(137, SQLParser.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(122, SQLParser.T__122);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(129, SQLParser.T__129);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(124, SQLParser.T__124);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(119, SQLParser.T__119);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(104, SQLParser.T__104);
      assertEquals(77, SQLParser.T__77);
      assertEquals(112, SQLParser.T__112);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(62, SQLParser.T__62);
      assertEquals(111, SQLParser.T__111);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(70, SQLParser.T__70);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(85, SQLParser.T__85);
      assertEquals(118, SQLParser.T__118);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      sQLParser_literal_return0.start = null;
      sQLParser_literal_return0.stop = null;
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      sQLParser_literal_return0.stop = null;
      Object object0 = sQLParser_literal_return0.getTree();
      assertNull(object0);
      
      SQLParser.table_detail_return sQLParser_table_detail_return0 = new SQLParser.table_detail_return();
      assertNotNull(sQLParser_table_detail_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(40, SQLParser.LE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(94, SQLParser.T__94);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(57, SQLParser.DATE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(7, SQLParser.STRING);
      assertEquals(76, SQLParser.T__76);
      assertEquals(42, SQLParser.NULL);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_parts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(66, 0).when(intStream0).LA(anyInt());
      doReturn(3).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(3, recognitionException0.index);
      assertEquals(66, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 82, 0).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(87, SQLParser.T__87);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(111, SQLParser.T__111);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(43, SQLParser.IN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(78, SQLParser.T__78);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(109, SQLParser.T__109);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(116, SQLParser.T__116);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      BitSet bitSet0 = SQLParser.FOLLOW_primary_key_constraint_in_constraint_detail1173;
      assertFalse(bitSet0.isNil());
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(1, bitSet0.size());
      assertEquals(64, bitSet0.numBits());
      assertNotNull(bitSet0);
      
      boolean boolean0 = sQLParser0.mismatchIsMissingToken(recognitionException0.input, bitSet0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(bitSet0.isNil());
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(1, bitSet0.size());
      assertEquals(64, bitSet0.numBits());
      assertEquals(3, recognitionException0.index);
      assertEquals(66, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(87, SQLParser.T__87);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(111, SQLParser.T__111);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(43, SQLParser.IN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(78, SQLParser.T__78);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(109, SQLParser.T__109);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(116, SQLParser.T__116);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertTrue(boolean0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      // Undeclared exception!
      try { 
        sQLParser0.add_constraints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(137, SQLParser.T__137);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(40, SQLParser.LE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(133, SQLParser.T__133);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(81, SQLParser.T__81);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState1 = null;
      SQLParser sQLParser1 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(43, SQLParser.IN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(121, SQLParser.T__121);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(136, SQLParser.T__136);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(70, SQLParser.T__70);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(78, SQLParser.T__78);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(86, SQLParser.T__86);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(32, SQLParser.AND);
      assertEquals(94, SQLParser.T__94);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(111, SQLParser.T__111);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(95, SQLParser.T__95);
      assertEquals(125, SQLParser.T__125);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(117, SQLParser.T__117);
      assertEquals(73, SQLParser.T__73);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(102, SQLParser.T__102);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLParser.T__109);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(97, SQLParser.T__97);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(108, SQLParser.T__108);
      assertEquals(41, SQLParser.IS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.drop_pk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(39, SQLParser.LT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(40, SQLParser.LE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(57, SQLParser.DATE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(124, SQLParser.T__124);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(127).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      Object object0 = sQLParser_foreign_key_constraint_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(100, SQLParser.T__100);
      assertEquals(38, SQLParser.GE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(40, SQLParser.LE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(33, SQLParser.XOR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(125, SQLParser.T__125);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(110, SQLParser.T__110);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(94, SQLParser.T__94);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals(97, SQLParser.T__97);
      assertEquals(112, SQLParser.T__112);
      assertEquals(74, SQLParser.T__74);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 40).when(tokenStream0).LA(anyInt());
      doReturn((-123)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(39, SQLParser.LT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(133, SQLParser.T__133);
      assertEquals(31, SQLParser.OR);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(71, SQLParser.T__71);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(85, SQLParser.T__85);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      sQLParser_keyword_return1.start = null;
      SQLParser.and_expression_return sQLParser_and_expression_return0 = new SQLParser.and_expression_return();
      assertNotNull(sQLParser_and_expression_return0);
      
      SQLParser.constraint_spec_return sQLParser_constraint_spec_return0 = new SQLParser.constraint_spec_return();
      assertNotNull(sQLParser_constraint_spec_return0);
      
      sQLParser_constraint_spec_return0.start = null;
      Object object0 = sQLParser_constraint_spec_return0.getTree();
      assertNull(object0);
      
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(74, SQLParser.T__74);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(31, SQLParser.OR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.inline_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(201, 724, 201).when(tokenStream0).LA(anyInt());
      doReturn(201).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      recognizerSharedState1.failed = true;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertTrue(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(102, SQLParser.T__102);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(112, SQLParser.T__112);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(122, SQLParser.T__122);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(41, SQLParser.IS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(51, SQLParser.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(81, SQLParser.T__81);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(39, SQLParser.LT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(120, SQLParser.T__120);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertNotNull(sQLParser0);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser1 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(42, SQLParser.NULL);
      assertEquals(32, SQLParser.AND);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(81, SQLParser.T__81);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.constraint_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(89, SQLParser.T__89);
      assertEquals(133, SQLParser.T__133);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(40, SQLParser.LE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(115, SQLParser.T__115);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(85, SQLParser.T__85);
      assertEquals(38, SQLParser.GE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(121, SQLParser.T__121);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(64, SQLParser.T__64);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.additive_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 0).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(74, SQLParser.T__74);
      assertEquals(112, SQLParser.T__112);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLParser.T__62);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(41, SQLParser.IS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(69, SQLParser.T__69);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.equality_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.expression_list_return sQLParser_expression_list_return0 = new SQLParser.expression_list_return();
      assertNotNull(sQLParser_expression_list_return0);
      
      Object object0 = sQLParser_expression_list_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream1).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(37, SQLParser.GT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(98, SQLParser.T__98);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(74, SQLParser.T__74);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(102, SQLParser.T__102);
      assertEquals(78, SQLParser.T__78);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(77, SQLParser.T__77);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(130, SQLParser.T__130);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.nullability();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(3964, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 3964, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(67, SQLParser.T__67);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(67, SQLParser.T__67);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(60, SQLParser.WS);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals(39, SQLParser.LT);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(68, SQLParser.T__68);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(7, SQLParser.STRING);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.type();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 123;
      int int1 = 3;
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(123, 0).when(intStream0).LA(anyInt());
      doReturn((-587), 0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(123, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals((-587), recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      RecognitionException recognitionException1 = new RecognitionException(recognitionException0.input);
      assertEquals(123, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals((-587), recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(123, recognitionException1.c);
      assertEquals((-587), recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(recognitionException1);
      
      Throwable throwable0 = recognitionException0.initCause(recognitionException1);
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertEquals(123, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals((-587), recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(123, recognitionException1.c);
      assertEquals((-587), recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException0.equals((Object)recognitionException1));
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(throwable0);
      assertNotSame(recognitionException0, recognitionException1);
      assertNotSame(recognitionException1, recognitionException0);
      
      recognitionException0.addSuppressed(throwable0);
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertEquals(123, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals((-587), recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(123, recognitionException1.c);
      assertEquals((-587), recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException0.equals((Object)recognitionException1));
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotSame(recognitionException0, recognitionException1);
      assertNotSame(recognitionException1, recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      int int2 = 0;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(85, SQLParser.T__85);
      assertEquals(122, SQLParser.T__122);
      assertEquals(78, SQLParser.T__78);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(87, SQLParser.T__87);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(80, SQLParser.T__80);
      assertEquals(34, SQLParser.EQ);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(97, SQLParser.T__97);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(67, SQLParser.T__67);
      assertEquals(133, SQLParser.T__133);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(75, SQLParser.T__75);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(4, SQLParser.INT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(66, SQLParser.T__66);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(97, SQLParser.T__97);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(47, SQLParser.STAR);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(7, SQLParser.STRING);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(37, SQLParser.GT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(76, SQLParser.T__76);
      assertEquals(136, SQLParser.T__136);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(43, SQLParser.IN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(97, SQLParser.T__97);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(75, SQLParser.T__75);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(119, SQLParser.T__119);
      assertEquals(82, SQLParser.T__82);
      assertEquals(32, SQLParser.AND);
      assertEquals(74, SQLParser.T__74);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(88, SQLParser.T__88);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(73, SQLParser.T__73);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(86, SQLParser.T__86);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(79, SQLParser.T__79);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(93, SQLParser.T__93);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(60, SQLParser.WS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(99, SQLParser.T__99);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(40, SQLParser.LE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(4, SQLParser.INT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(127, 137, (-2176), 0, 137).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(62, SQLParser.T__62);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(102, SQLParser.T__102);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(7, SQLParser.STRING);
      assertEquals(135, SQLParser.T__135);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = sQLParser0.keyword();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(62, SQLParser.T__62);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(102, SQLParser.T__102);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(7, SQLParser.STRING);
      assertEquals(135, SQLParser.T__135);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser_keyword_return0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(62, SQLParser.T__62);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(102, SQLParser.T__102);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(7, SQLParser.STRING);
      assertEquals(135, SQLParser.T__135);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(78, SQLParser.T__78);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(84, SQLParser.T__84);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.unary_expression_return sQLParser_unary_expression_return0 = sQLParser1.unary_expression();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(62, SQLParser.T__62);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(102, SQLParser.T__102);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(7, SQLParser.STRING);
      assertEquals(135, SQLParser.T__135);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(78, SQLParser.T__78);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(84, SQLParser.T__84);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_unary_expression_return0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      SQLParser.alter_table_return sQLParser_alter_table_return0 = new SQLParser.alter_table_return();
      assertNotNull(sQLParser_alter_table_return0);
      
      // Undeclared exception!
      try { 
        sQLParser0.alter_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals(46, SQLParser.SUB);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(91, SQLParser.T__91);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(96, SQLParser.T__96);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(34, SQLParser.EQ);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      recognizerSharedState0.tokenStartLine = 18;
      recognizerSharedState0.tokenStartLine = 91;
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 104;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(104, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(104, recognizerSharedState0.backtracking);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(46, SQLParser.SUB);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(76, SQLParser.T__76);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(33, SQLParser.XOR);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(295, 1078, (-2656), 103).when(tokenStream0).LA(anyInt());
      doReturn(1078).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(130, SQLParser.T__130);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(77, SQLParser.T__77);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(130, SQLParser.T__130);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(77, SQLParser.T__77);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(38, SQLParser.GE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(39, SQLParser.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(61, SQLParser.T__61);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(102, SQLParser.T__102);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(118, SQLParser.T__118);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(81, SQLParser.T__81);
      assertEquals(31, SQLParser.OR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser1.commands();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(130, SQLParser.T__130);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(77, SQLParser.T__77);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(38, SQLParser.GE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(39, SQLParser.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(61, SQLParser.T__61);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(102, SQLParser.T__102);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(118, SQLParser.T__118);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(81, SQLParser.T__81);
      assertEquals(31, SQLParser.OR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_commands_return0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      SQLParser sQLParser2 = new SQLParser(sQLParser1.input, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertFalse(sQLParser2.failed());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(130, SQLParser.T__130);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(77, SQLParser.T__77);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(38, SQLParser.GE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(39, SQLParser.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(61, SQLParser.T__61);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(102, SQLParser.T__102);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(118, SQLParser.T__118);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(81, SQLParser.T__81);
      assertEquals(31, SQLParser.OR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(60, SQLParser.WS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(136, SQLParser.T__136);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(63, SQLParser.T__63);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertNotNull(sQLParser2);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = sQLParser0.keyword();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(130, SQLParser.T__130);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(77, SQLParser.T__77);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser0.equals((Object)sQLParser2));
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser0, sQLParser2);
      assertNotSame(sQLParser_keyword_return1, sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return1.start;
      assertNull(token0);
      
      SQLParser sQLParser3 = new SQLParser(sQLParser2.input);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser3.getBacktrackingLevel());
      assertFalse(sQLParser3.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser3.getGrammarFileName());
      assertEquals(0, sQLParser3.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser3.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(130, SQLParser.T__130);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(77, SQLParser.T__77);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(38, SQLParser.GE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(39, SQLParser.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(61, SQLParser.T__61);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(102, SQLParser.T__102);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(118, SQLParser.T__118);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(81, SQLParser.T__81);
      assertEquals(31, SQLParser.OR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(60, SQLParser.WS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(136, SQLParser.T__136);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(63, SQLParser.T__63);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(73, SQLParser.T__73);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(98, SQLParser.T__98);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(61, SQLParser.T__61);
      assertEquals(57, SQLParser.DATE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(40, SQLParser.LE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(109, SQLParser.T__109);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser0.equals((Object)sQLParser2));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser1.equals((Object)sQLParser2));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertFalse(sQLParser3.equals((Object)sQLParser2));
      assertFalse(sQLParser3.equals((Object)sQLParser0));
      assertFalse(sQLParser3.equals((Object)sQLParser1));
      assertNotNull(sQLParser3);
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLParser.add_constraints_return sQLParser_add_constraints_return0 = new SQLParser.add_constraints_return();
      assertNotNull(sQLParser_add_constraints_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn((String) null).when(tokenStream0).getSourceName();
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(114, SQLParser.T__114);
      assertEquals(98, SQLParser.T__98);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertNotNull(sQLParser0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      recognizerSharedState0.failed = false;
      sQLParser0.reportError(recognitionException0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(1, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(1, recognizerSharedState0.syntaxErrors);
      assertTrue(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(114, SQLParser.T__114);
      assertEquals(98, SQLParser.T__98);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      
      // Undeclared exception!
      try { 
        sQLParser0.name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLParser.ora_flag_return sQLParser_ora_flag_return0 = new SQLParser.ora_flag_return();
      assertNotNull(sQLParser_ora_flag_return0);
      
      TokenStream tokenStream0 = null;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(137, SQLParser.T__137);
      assertEquals(42, SQLParser.NULL);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(46, SQLParser.SUB);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(101, SQLParser.T__101);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(34, SQLParser.EQ);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(129, SQLParser.T__129);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(67, SQLParser.T__67);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals(73, SQLParser.T__73);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(39, SQLParser.LT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(85, SQLParser.T__85);
      assertEquals(118, SQLParser.T__118);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(37, SQLParser.GT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(42, SQLParser.NULL);
      assertEquals(99, SQLParser.T__99);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(100, SQLParser.T__100);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(130, SQLParser.T__130);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(116, SQLParser.T__116);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(78, SQLParser.T__78);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(87, SQLParser.T__87);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(112, SQLParser.T__112);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(39, SQLParser.LT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.name_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(118, SQLParser.T__118);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(4, SQLParser.INT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(5, SQLParser.NOT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(78, SQLParser.T__78);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(76, SQLParser.T__76);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(37, SQLParser.GT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(43, SQLParser.IN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(74, SQLParser.T__74);
      assertEquals(112, SQLParser.T__112);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLParser.create_sequence_return sQLParser_create_sequence_return0 = new SQLParser.create_sequence_return();
      assertNotNull(sQLParser_create_sequence_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(7, SQLParser.STRING);
      assertEquals(86, SQLParser.T__86);
      assertEquals(107, SQLParser.T__107);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(57, SQLParser.DATE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(87, SQLParser.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(82, SQLParser.T__82);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(110, SQLParser.T__110);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(61, SQLParser.T__61);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertNotNull(sQLParser0);
      
      sQLParser0.traceOut("nplTW=", (-1581), (Object) null);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(7, SQLParser.STRING);
      assertEquals(86, SQLParser.T__86);
      assertEquals(107, SQLParser.T__107);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(57, SQLParser.DATE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(87, SQLParser.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(82, SQLParser.T__82);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(110, SQLParser.T__110);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(61, SQLParser.T__61);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      
      // Undeclared exception!
      try { 
        sQLParser0.type();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = sQLParser_arguments_return0.getTree();
      assertNull(object0);
      
      sQLParser_arguments_return0.start = null;
      SQLParser.drop_pk_return sQLParser_drop_pk_return0 = new SQLParser.drop_pk_return();
      assertNotNull(sQLParser_drop_pk_return0);
      
      sQLParser_drop_pk_return0.tree = null;
      Object object1 = sQLParser_drop_pk_return0.getTree();
      assertNull(object1);
      
      sQLParser_drop_pk_return0.stop = null;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.tokenStartCharIndex = (-2399);
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals((-2399), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(74, SQLParser.T__74);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(127, SQLParser.T__127);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(136, SQLParser.T__136);
      assertEquals(47, SQLParser.STAR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(137, SQLParser.T__137);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(78, SQLParser.T__78);
      assertEquals(32, SQLParser.AND);
      assertEquals(31, SQLParser.OR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(132, SQLParser.T__132);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(7, SQLParser.STRING);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(57, SQLParser.DATE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.check_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.errorRecovery = true;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      BitSet bitSet0 = SQLParser.FOLLOW_65_in_alter_table1087;
      assertEquals(32, bitSet0.size());
      assertFalse(bitSet0.isNil());
      assertEquals(192, bitSet0.numBits());
      assertEquals(3, bitSet0.lengthInLongWords());
      assertNotNull(bitSet0);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream1, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertTrue(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(67, SQLParser.T__67);
      assertEquals(42, SQLParser.NULL);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(4, SQLParser.INT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(7, SQLParser.STRING);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertNotNull(sQLParser0);
      
      Object object0 = sQLParser_column_comment_details_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      BitSet bitSet0 = SQLParser.FOLLOW_65_in_alter_table1087;
      assertEquals(192, bitSet0.numBits());
      assertEquals(3, bitSet0.lengthInLongWords());
      assertFalse(bitSet0.isNil());
      assertEquals(32, bitSet0.size());
      assertNotNull(bitSet0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(7, SQLParser.STRING);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(37, SQLParser.GT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(39, SQLParser.LT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(124, SQLParser.T__124);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(40, SQLParser.LE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser sQLParser2 = new SQLParser(sQLParser0.input);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(7, SQLParser.STRING);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(57, SQLParser.DATE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(67, SQLParser.T__67);
      assertEquals(115, SQLParser.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(97, SQLParser.T__97);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(88, SQLParser.T__88);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLParser.T__62);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(5, SQLParser.NOT);
      assertEquals(40, SQLParser.LE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertNotNull(sQLParser2);
      
      // Undeclared exception!
      try { 
        sQLParser2.ora_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(32, SQLParser.AND);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(116, SQLParser.T__116);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(83, SQLParser.T__83);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(46, SQLParser.SUB);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(106, SQLParser.T__106);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(37, SQLParser.GT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(4, SQLParser.INT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertNotNull(sQLParser0);
      
      Object object0 = sQLParser_column_comment_details_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser1 = new SQLParser(tokenStream1);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(120, SQLParser.T__120);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(125, SQLParser.T__125);
      assertEquals(66, SQLParser.T__66);
      assertEquals(133, SQLParser.T__133);
      assertEquals(89, SQLParser.T__89);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(47, SQLParser.STAR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.unique_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(42, SQLParser.NULL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(32, SQLParser.AND);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(93, SQLParser.T__93);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(94, SQLParser.T__94);
      assertEquals(37, SQLParser.GT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(39, SQLParser.LT);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(68, SQLParser.T__68);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertNotNull(sQLParser0);
      
      SQLParser.value_list_return sQLParser_value_list_return0 = new SQLParser.value_list_return();
      assertNotNull(sQLParser_value_list_return0);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      Object object0 = sQLParser_ora_partition_spec_return0.getTree();
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sQLParser0.name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.c);
      assertEquals(3964, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 3964).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      sQLParser_ora_partition_spec_return0.start = null;
      Object object0 = sQLParser_ora_partition_spec_return0.getTree();
      assertNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(41, SQLParser.IS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(102, SQLParser.T__102);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(37, SQLParser.GT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(67, SQLParser.T__67);
      assertEquals(89, SQLParser.T__89);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      sQLParser_drop_sequence_return0.stop = null;
      recognizerSharedState0.tokenStartLine = 0;
      sQLParser_drop_sequence_return0.stop = null;
      Object object0 = sQLParser_drop_sequence_return0.getTree();
      assertNull(object0);
      
      SQLParser.expression_list_return sQLParser_expression_list_return0 = new SQLParser.expression_list_return();
      assertNotNull(sQLParser_expression_list_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(69, SQLParser.T__69);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(38, SQLParser.GE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(43, SQLParser.IN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(40, SQLParser.LE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(127).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(46, SQLParser.SUB);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(129, SQLParser.T__129);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(80, SQLParser.T__80);
      assertEquals(31, SQLParser.OR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(38, SQLParser.GE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      recognizerSharedState0.token = null;
      Token token1 = recognizerSharedState0.token;
      assertNull(token1);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      BitSet bitSet0 = SQLParser.FOLLOW_table_name_in_alter_table1089;
      assertEquals(2, bitSet0.size());
      assertEquals(2, bitSet0.lengthInLongWords());
      assertFalse(bitSet0.isNil());
      assertEquals(128, bitSet0.numBits());
      assertNotNull(bitSet0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(38, SQLParser.GE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(68, SQLParser.T__68);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(135, SQLParser.T__135);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(76, SQLParser.T__76);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(60, SQLParser.WS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(33, SQLParser.XOR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      SQLParser.ora_configs_return sQLParser_ora_configs_return0 = sQLParser0.ora_configs();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(38, SQLParser.GE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(68, SQLParser.T__68);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(135, SQLParser.T__135);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(76, SQLParser.T__76);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(60, SQLParser.WS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(33, SQLParser.XOR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser_ora_configs_return0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      
      RecognitionException recognitionException1 = new RecognitionException();
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.c);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.index);
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(recognitionException1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(intStream0).LA(anyInt());
      doReturn(0, 0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognitionException recognitionException1 = new RecognitionException(recognitionException0.input);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.c);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException1.approximateLineInfo);
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(recognitionException1);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(47, SQLParser.STAR);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_value_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(38, SQLParser.GE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(62, SQLParser.T__62);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertNotNull(sQLParser0);
      
      Object object0 = sQLParser_column_comment_details_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(38, SQLParser.GE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(62, SQLParser.T__62);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(38, SQLParser.GE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(122, SQLParser.T__122);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(134, SQLParser.T__134);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(78, SQLParser.T__78);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(62, SQLParser.T__62);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g}#G}#nEF");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLParser.partition_value_spec_return sQLParser_partition_value_spec_return0 = new SQLParser.partition_value_spec_return();
      assertNotNull(sQLParser_partition_value_spec_return0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g}#G}#nEF");
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "g}#G}#nEF", 1015, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(64).when(intStream0).LA(anyInt());
      doReturn(64).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(64, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(64, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState1);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertNotNull(recognizerSharedState2);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState3 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState3.channel);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertFalse(recognizerSharedState3.failed);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertEquals(0, recognizerSharedState3.backtracking);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertFalse(recognizerSharedState3.errorRecovery);
      assertEquals(0, recognizerSharedState3.type);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState1));
      assertNotNull(recognizerSharedState3);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState3);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState3.channel);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertFalse(recognizerSharedState3.failed);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertEquals(0, recognizerSharedState3.backtracking);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertFalse(recognizerSharedState3.errorRecovery);
      assertEquals(0, recognizerSharedState3.type);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(74, SQLParser.T__74);
      assertEquals(112, SQLParser.T__112);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLParser.T__62);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(41, SQLParser.IS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState3));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.exclusive_or_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(135, 0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(7, SQLParser.STRING);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(68, SQLParser.T__68);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(96, SQLParser.T__96);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = sQLParser0.keyword();
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(7, SQLParser.STRING);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(68, SQLParser.T__68);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(96, SQLParser.T__96);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser_keyword_return0);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLParser.unary_expression_return sQLParser_unary_expression_return0 = new SQLParser.unary_expression_return();
      assertNotNull(sQLParser_unary_expression_return0);
      
      sQLParser_unary_expression_return0.stop = null;
      Object object0 = sQLParser_unary_expression_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(43, SQLParser.IN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(93, SQLParser.T__93);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(136, SQLParser.T__136);
      assertEquals(5, SQLParser.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(47, SQLParser.STAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(83, SQLParser.T__83);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(118, SQLParser.T__118);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(133, SQLParser.T__133);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(117, SQLParser.T__117);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(94, SQLParser.T__94);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(105, SQLParser.T__105);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLParser.value_return sQLParser_value_return0 = new SQLParser.value_return();
      assertNotNull(sQLParser_value_return0);
      
      Object object0 = sQLParser_value_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.token = null;
      sQLParser_value_return0.start = null;
      sQLParser_value_return0.tree = null;
      recognizerSharedState0.tokenStartLine = (-368);
      recognizerSharedState0.syntaxErrors = 102;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(102, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(102, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-368), recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(71, SQLParser.T__71);
      assertEquals(4, SQLParser.INT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      sQLParser_keyword_return0.stop = null;
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      Token token2 = sQLParser_keyword_return0.start;
      assertNull(token2);
      
      SQLParser.primary_key_constraint_return sQLParser_primary_key_constraint_return0 = new SQLParser.primary_key_constraint_return();
      assertNotNull(sQLParser_primary_key_constraint_return0);
      
      Object object0 = sQLParser_primary_key_constraint_return0.getTree();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(66).when(intStream0).LA(anyInt());
      doReturn(3).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(66, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(3, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 82).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(37, SQLParser.GT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(88, SQLParser.T__88);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(31, SQLParser.OR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLParser.create_index_return sQLParser_create_index_return0 = new SQLParser.create_index_return();
      assertNotNull(sQLParser_create_index_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(7, SQLParser.STRING);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(83, SQLParser.T__83);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = sQLParser_foreign_key_constraint_return1.getTree();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNull(object0);
      assertNotSame(sQLParser_foreign_key_constraint_return1, sQLParser_foreign_key_constraint_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(115, 0).when(tokenStream0).LA(anyInt());
      doReturn(115).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(77, SQLParser.T__77);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(109, SQLParser.T__109);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(33, SQLParser.XOR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(123, SQLParser.T__123);
      assertEquals(90, SQLParser.T__90);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(110, SQLParser.T__110);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(125, SQLParser.T__125);
      assertEquals(88, SQLParser.T__88);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(73, SQLParser.T__73);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(132, SQLParser.T__132);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(120, SQLParser.T__120);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(127, SQLParser.T__127);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(135, SQLParser.T__135);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(104, SQLParser.T__104);
      assertEquals(79, SQLParser.T__79);
      assertEquals(112, SQLParser.T__112);
      assertEquals(32, SQLParser.AND);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      Object object0 = sQLParser_literal_return0.tree;
      assertNull(object0);
      
      SQLParser.table_detail_return sQLParser_table_detail_return0 = new SQLParser.table_detail_return();
      assertNotNull(sQLParser_table_detail_return0);
      
      SQLParser.column_name_return sQLParser_column_name_return0 = new SQLParser.column_name_return();
      assertNotNull(sQLParser_column_name_return0);
      
      Object object1 = sQLParser_column_name_return0.getTree();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(90, SQLParser.T__90);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      recognizerSharedState0.failed = false;
      // Undeclared exception!
      try { 
        sQLParser0.drop_sequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = sQLParser_foreign_key_constraint_return1.getTree();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNull(object0);
      assertNotSame(sQLParser_foreign_key_constraint_return1, sQLParser_foreign_key_constraint_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(115, 151).when(tokenStream0).LA(anyInt());
      doReturn(115).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(84, SQLParser.T__84);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(114, SQLParser.T__114);
      assertEquals(92, SQLParser.T__92);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(43, SQLParser.IN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(121, SQLParser.T__121);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(136, SQLParser.T__136);
      assertEquals(78, SQLParser.T__78);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(128, SQLParser.T__128);
      assertEquals(63, SQLParser.T__63);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(64, SQLParser.T__64);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(87, SQLParser.T__87);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(117, SQLParser.T__117);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(47, SQLParser.STAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(116, SQLParser.T__116);
      assertEquals(83, SQLParser.T__83);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(98, SQLParser.T__98);
      assertEquals(131, SQLParser.T__131);
      assertEquals(68, SQLParser.T__68);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(100, SQLParser.T__100);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(84, SQLParser.T__84);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(114, SQLParser.T__114);
      assertEquals(92, SQLParser.T__92);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(43, SQLParser.IN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(121, SQLParser.T__121);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(136, SQLParser.T__136);
      assertEquals(78, SQLParser.T__78);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(128, SQLParser.T__128);
      assertEquals(63, SQLParser.T__63);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(64, SQLParser.T__64);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(87, SQLParser.T__87);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(117, SQLParser.T__117);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(47, SQLParser.STAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(116, SQLParser.T__116);
      assertEquals(83, SQLParser.T__83);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(98, SQLParser.T__98);
      assertEquals(131, SQLParser.T__131);
      assertEquals(68, SQLParser.T__68);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(100, SQLParser.T__100);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(60, SQLParser.WS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.size_uom_return sQLParser_size_uom_return0 = new SQLParser.size_uom_return();
      assertNotNull(sQLParser_size_uom_return0);
      
      // Undeclared exception!
      try { 
        sQLParser0.null_comparison();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(101, SQLParser.T__101);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(80, SQLParser.T__80);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(107, SQLParser.T__107);
      assertEquals(65, SQLParser.T__65);
      assertEquals(129, SQLParser.T__129);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, SQLParser.T__99);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(37, SQLParser.GT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertNotNull(sQLParser0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser1 = new SQLParser((TokenStream) null, (RecognizerSharedState) null);
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(121, SQLParser.T__121);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(39, SQLParser.LT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(34, SQLParser.EQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(42, SQLParser.NULL);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLParser.T__87);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        sQLParser1.in_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLParser.qualified_name_return sQLParser_qualified_name_return0 = new SQLParser.qualified_name_return();
      assertNotNull(sQLParser_qualified_name_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(38, SQLParser.GE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(108, SQLParser.T__108);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(116, SQLParser.T__116);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(4, SQLParser.INT);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(107, 107).when(tokenStream0).LA(anyInt());
      doReturn(107).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(127, SQLParser.T__127);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(88, SQLParser.T__88);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(75, SQLParser.T__75);
      assertEquals(32, SQLParser.AND);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(33, SQLParser.XOR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(5, SQLParser.NOT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(40, SQLParser.LE);
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(127, SQLParser.T__127);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(88, SQLParser.T__88);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(75, SQLParser.T__75);
      assertEquals(32, SQLParser.AND);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(33, SQLParser.XOR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(5, SQLParser.NOT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(80, SQLParser.T__80);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(133, SQLParser.T__133);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(110, SQLParser.T__110);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      Token token1 = recognizerSharedState1.token;
      assertNull(token1);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(127, SQLParser.T__127);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(88, SQLParser.T__88);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(75, SQLParser.T__75);
      assertEquals(32, SQLParser.AND);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(33, SQLParser.XOR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(5, SQLParser.NOT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(40, SQLParser.LE);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertNotNull(sQLParser_commands_return0);
      assertNotSame(sQLParser0, sQLParser1);
      
      Object object0 = sQLParser_commands_return0.getTree();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(127, SQLParser.T__127);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(88, SQLParser.T__88);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(75, SQLParser.T__75);
      assertEquals(32, SQLParser.AND);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(33, SQLParser.XOR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(5, SQLParser.NOT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(40, SQLParser.LE);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertNull(object0);
      assertNotSame(sQLParser0, sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLParser.commands_return sQLParser_commands_return0 = new SQLParser.commands_return();
      assertNotNull(sQLParser_commands_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(43, SQLParser.IN);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(95).when(tokenStream0).LA(anyInt());
      doReturn(95).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(67, SQLParser.T__67);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(92, SQLParser.T__92);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(107).when(tokenStream0).LA(anyInt());
      doReturn(107).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(37, SQLParser.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(7, SQLParser.STRING);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(5, SQLParser.NOT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(66, SQLParser.T__66);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(116, SQLParser.T__116);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(46, SQLParser.SUB);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(37, SQLParser.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(7, SQLParser.STRING);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(5, SQLParser.NOT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(66, SQLParser.T__66);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(116, SQLParser.T__116);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(46, SQLParser.SUB);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(118, SQLParser.T__118);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(110, SQLParser.T__110);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(37, SQLParser.GT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(43, SQLParser.IN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(57, SQLParser.DATE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(38, SQLParser.GE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(79, SQLParser.T__79);
      assertEquals(120, SQLParser.T__120);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(31, SQLParser.OR);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(46, SQLParser.SUB);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(102, SQLParser.T__102);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(69, SQLParser.T__69);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      Token token1 = recognitionException0.token;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(107, 101).when(tokenStream0).LA(anyInt());
      doReturn(107).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(32, SQLParser.AND);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(4, SQLParser.INT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(37, SQLParser.GT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(5, SQLParser.NOT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(34, SQLParser.EQ);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertNotNull(sQLParser0);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(32, SQLParser.AND);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(4, SQLParser.INT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(37, SQLParser.GT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(5, SQLParser.NOT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(34, SQLParser.EQ);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertNotNull(sQLParser_commands_return0);
      
      Object object0 = sQLParser_commands_return0.getTree();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(32, SQLParser.AND);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(4, SQLParser.INT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(37, SQLParser.GT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(5, SQLParser.NOT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(34, SQLParser.EQ);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLParser.partition_parts_return sQLParser_partition_parts_return0 = new SQLParser.partition_parts_return();
      assertNotNull(sQLParser_partition_parts_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(109, SQLParser.T__109);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(88, SQLParser.T__88);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(131, SQLParser.T__131);
      assertEquals(95, SQLParser.T__95);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(119, SQLParser.T__119);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(61, SQLParser.T__61);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(69, SQLParser.T__69);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(91, SQLParser.T__91);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(135, SQLParser.T__135);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(123, SQLParser.T__123);
      assertEquals(46, SQLParser.SUB);
      assertEquals(115, SQLParser.T__115);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(130, SQLParser.T__130);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.constraint_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      Object object0 = sQLParser_ora_partition_spec_return0.getTree();
      assertNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(60, SQLParser.WS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(123, SQLParser.T__123);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLParser.NULL);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(112, SQLParser.T__112);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.fractionDigits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLParser.sub_partition_config_return sQLParser_sub_partition_config_return0 = new SQLParser.sub_partition_config_return();
      assertNotNull(sQLParser_sub_partition_config_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      recognizerSharedState0.backtracking = 3;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(3, sQLParser0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(3, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(121, SQLParser.T__121);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(133, SQLParser.T__133);
      assertEquals(65, SQLParser.T__65);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.name_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLParser.index_name_return sQLParser_index_name_return0 = new SQLParser.index_name_return();
      assertNotNull(sQLParser_index_name_return0);
      
      Object object0 = sQLParser_index_name_return0.getTree();
      assertNull(object0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(72, SQLParser.T__72);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(116, SQLParser.T__116);
      assertEquals(88, SQLParser.T__88);
      assertEquals(131, SQLParser.T__131);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(96, SQLParser.T__96);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(81, SQLParser.T__81);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(60, SQLParser.WS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(89, SQLParser.T__89);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(82, SQLParser.T__82);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(97, SQLParser.T__97);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(38, SQLParser.GE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(76, SQLParser.T__76);
      assertEquals(106, SQLParser.T__106);
      assertEquals(42, SQLParser.NULL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(69, SQLParser.T__69);
      assertEquals(113, SQLParser.T__113);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(84, SQLParser.T__84);
      assertEquals(135, SQLParser.T__135);
      assertEquals(62, SQLParser.T__62);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(119, SQLParser.T__119);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(134, SQLParser.T__134);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(7, SQLParser.STRING);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(46, SQLParser.SUB);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(118, SQLParser.T__118);
      assertEquals(38, SQLParser.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(57, SQLParser.DATE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLParser.commands_return sQLParser_commands_return0 = new SQLParser.commands_return();
      assertNotNull(sQLParser_commands_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(78, SQLParser.T__78);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(116, SQLParser.T__116);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(39, SQLParser.LT);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(68, SQLParser.T__68);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(133, SQLParser.T__133);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(89, SQLParser.T__89);
      assertEquals(117, SQLParser.T__117);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(64, SQLParser.T__64);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(60, SQLParser.WS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(133, SQLParser.T__133);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(57, SQLParser.DATE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(34, SQLParser.EQ);
      assertEquals(121, SQLParser.T__121);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(37, SQLParser.GT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(38, SQLParser.GE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals(47, SQLParser.STAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(39, SQLParser.LT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(40, SQLParser.LE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLParser.nullability_return sQLParser_nullability_return0 = new SQLParser.nullability_return();
      assertNotNull(sQLParser_nullability_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(31, SQLParser.OR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(34, SQLParser.EQ);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(90, SQLParser.T__90);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(60, SQLParser.WS);
      assertEquals(68, SQLParser.T__68);
      assertEquals(111, SQLParser.T__111);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(118, SQLParser.T__118);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(76, SQLParser.T__76);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(92, SQLParser.T__92);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(117, SQLParser.T__117);
      assertEquals(37, SQLParser.GT);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      recognizerSharedState1.channel = 122;
      recognizerSharedState1.tokenStartLine = 93;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(104, SQLParser.T__104);
      assertEquals(76, SQLParser.T__76);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(46, SQLParser.SUB);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(74, SQLParser.T__74);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(72, SQLParser.T__72);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(31, SQLParser.OR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(115, SQLParser.T__115);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(77, SQLParser.T__77);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(118, SQLParser.T__118);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.c);
      assertEquals(3964, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser.alter_table_return sQLParser_alter_table_return0 = new SQLParser.alter_table_return();
      assertNotNull(sQLParser_alter_table_return0);
      
      Object object0 = sQLParser_alter_table_return0.getTree();
      assertNull(object0);
      
      SQLParser.commands_return sQLParser_commands_return0 = new SQLParser.commands_return();
      assertNotNull(sQLParser_commands_return0);
      
      Object object1 = sQLParser_alter_table_return0.tree;
      assertNull(object1);
      
      SQLParser.inline_constraint_return sQLParser_inline_constraint_return0 = new SQLParser.inline_constraint_return();
      assertNotNull(sQLParser_inline_constraint_return0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(78, SQLParser.T__78);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertNotNull(sQLParser0);
      
      String string0 = sQLParser0.getGrammarFileName();
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(78, SQLParser.T__78);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertNotNull(string0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(6, 0).when(tokenStream0).LA(anyInt());
      doReturn((-1492)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(7, SQLParser.STRING);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(117, SQLParser.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(38, SQLParser.GE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(57, SQLParser.DATE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(42, SQLParser.NULL);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(88, SQLParser.T__88);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState2 = null;
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(7, SQLParser.STRING);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(117, SQLParser.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(38, SQLParser.GE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(57, SQLParser.DATE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(42, SQLParser.NULL);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(88, SQLParser.T__88);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(110, SQLParser.T__110);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(111, SQLParser.T__111);
      assertEquals(63, SQLParser.T__63);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(7, SQLParser.STRING);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(40, SQLParser.LE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(80, SQLParser.T__80);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLParser.name_list_return sQLParser_name_list_return0 = new SQLParser.name_list_return();
      assertNotNull(sQLParser_name_list_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      sQLParser_name_list_return0.stop = null;
      Object object0 = sQLParser_name_list_return0.getTree();
      assertNull(object0);
      
      SQLParser.value_list_return sQLParser_value_list_return0 = new SQLParser.value_list_return();
      assertNotNull(sQLParser_value_list_return0);
      
      Object object1 = sQLParser_value_list_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(121, SQLParser.T__121);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(62, SQLParser.T__62);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(70, SQLParser.T__70);
      assertEquals(7, SQLParser.STRING);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(109, SQLParser.T__109);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(108, SQLParser.T__108);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(110, SQLParser.T__110);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(102, SQLParser.T__102);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(34, SQLParser.EQ);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(78, SQLParser.T__78);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(71, SQLParser.T__71);
      assertEquals(135, SQLParser.T__135);
      assertEquals(86, SQLParser.T__86);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(120, SQLParser.T__120);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(112, SQLParser.T__112);
      assertEquals(79, SQLParser.T__79);
      assertEquals(104, SQLParser.T__104);
      assertEquals(64, SQLParser.T__64);
      assertEquals(32, SQLParser.AND);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.relational_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(33, SQLParser.XOR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(80, SQLParser.T__80);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(47, SQLParser.STAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(34, SQLParser.EQ);
      assertEquals(89, SQLParser.T__89);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(7, SQLParser.STRING);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(46, SQLParser.SUB);
      assertEquals(101, SQLParser.T__101);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(40, SQLParser.LE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(4, SQLParser.INT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertNotNull(sQLParser0);
      
      SQLParser.equality_expression_return sQLParser_equality_expression_return0 = new SQLParser.equality_expression_return();
      assertNotNull(sQLParser_equality_expression_return0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(2106, 91, 0).when(tokenStream0).LA(anyInt());
      doReturn(91).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(130, SQLParser.T__130);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(130, SQLParser.T__130);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(88, SQLParser.T__88);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(135, SQLParser.T__135);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(69, SQLParser.T__69);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(7, SQLParser.STRING);
      assertEquals(76, SQLParser.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(75, SQLParser.T__75);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(77, SQLParser.T__77);
      assertEquals(110, SQLParser.T__110);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.constraint_spec_return sQLParser_constraint_spec_return0 = new SQLParser.constraint_spec_return();
      assertNotNull(sQLParser_constraint_spec_return0);
      
      SQLParser sQLParser2 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(130, SQLParser.T__130);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(65, SQLParser.T__65);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, SQLParser.T__99);
      assertEquals(41, SQLParser.IS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(129, SQLParser.T__129);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertNotNull(sQLParser2);
      
      // Undeclared exception!
      try { 
        sQLParser1.arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(3964, recognitionException0.c);
      assertEquals(3964, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109, 3964).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState2);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState2);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(133, SQLParser.T__133);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(81, SQLParser.T__81);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(123, SQLParser.T__123);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.name_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(131).when(tokenStream0).LA(anyInt());
      doReturn(131).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(68, SQLParser.T__68);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(33, SQLParser.XOR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(112, SQLParser.T__112);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(47, SQLParser.STAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(110, SQLParser.T__110);
      assertEquals(38, SQLParser.GE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(7, SQLParser.STRING);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(40, SQLParser.LE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(33, SQLParser.XOR);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(39, SQLParser.LT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals(80, SQLParser.T__80);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(108, SQLParser.T__108);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(34, SQLParser.EQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(80, SQLParser.T__80);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(137, SQLParser.T__137);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(122, SQLParser.T__122);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(39, SQLParser.LT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(57, SQLParser.DATE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(127, SQLParser.T__127);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(99, SQLParser.T__99);
      assertEquals(135, SQLParser.T__135);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(134, SQLParser.T__134);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(126, SQLParser.T__126);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(43, SQLParser.IN);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.constraint_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(107, 0).when(tokenStream0).LA(anyInt());
      doReturn(107).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(7, SQLParser.STRING);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(77, SQLParser.T__77);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(89, SQLParser.T__89);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(108, SQLParser.T__108);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(131, SQLParser.T__131);
      assertEquals(67, SQLParser.T__67);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(60, SQLParser.WS);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(132, SQLParser.T__132);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(78, SQLParser.T__78);
      assertEquals(104, SQLParser.T__104);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(31, SQLParser.OR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState1);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(7, SQLParser.STRING);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(77, SQLParser.T__77);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(89, SQLParser.T__89);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(108, SQLParser.T__108);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(131, SQLParser.T__131);
      assertEquals(67, SQLParser.T__67);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(60, SQLParser.WS);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(132, SQLParser.T__132);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(78, SQLParser.T__78);
      assertEquals(104, SQLParser.T__104);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(31, SQLParser.OR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(7, SQLParser.STRING);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(108, SQLParser.T__108);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(65, SQLParser.T__65);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(38, SQLParser.GE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      Token token1 = recognizerSharedState1.token;
      assertNull(token1);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(7, SQLParser.STRING);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(77, SQLParser.T__77);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(89, SQLParser.T__89);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(108, SQLParser.T__108);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(131, SQLParser.T__131);
      assertEquals(67, SQLParser.T__67);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(60, SQLParser.WS);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(132, SQLParser.T__132);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(78, SQLParser.T__78);
      assertEquals(104, SQLParser.T__104);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(31, SQLParser.OR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertNotNull(sQLParser_commands_return0);
      assertNotSame(sQLParser0, sQLParser1);
      
      Object object0 = sQLParser_commands_return0.getTree();
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(7, SQLParser.STRING);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(77, SQLParser.T__77);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(89, SQLParser.T__89);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(108, SQLParser.T__108);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(131, SQLParser.T__131);
      assertEquals(67, SQLParser.T__67);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(60, SQLParser.WS);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(132, SQLParser.T__132);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(78, SQLParser.T__78);
      assertEquals(104, SQLParser.T__104);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(31, SQLParser.OR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertNull(object0);
      assertNotSame(sQLParser0, sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState1.following = recognizerSharedState0.following;
      recognizerSharedState0.syntaxErrors = 0;
      recognizerSharedState1.failed = true;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertTrue(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(78, SQLParser.T__78);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(105, SQLParser.T__105);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(67, SQLParser.T__67);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(92, SQLParser.T__92);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(76, SQLParser.T__76);
      assertEquals(130, SQLParser.T__130);
      assertEquals(91, SQLParser.T__91);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.exclusive_or_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      SQLParser.keyword_return sQLParser_keyword_return2 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return2.equals((Object)sQLParser_keyword_return1));
      assertFalse(sQLParser_keyword_return2.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return2);
      
      Token token1 = sQLParser_keyword_return2.stop;
      assertNull(token1);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      Object object0 = sQLParser_ora_partition_spec_return0.getTree();
      assertNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(121, SQLParser.T__121);
      assertEquals(91, SQLParser.T__91);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(90, SQLParser.T__90);
      assertEquals(100, SQLParser.T__100);
      assertEquals(122, SQLParser.T__122);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(132, SQLParser.T__132);
      assertEquals(84, SQLParser.T__84);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(4, SQLParser.INT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(134, SQLParser.T__134);
      assertEquals(71, SQLParser.T__71);
      assertEquals(41, SQLParser.IS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(119, SQLParser.T__119);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(32, SQLParser.AND);
      assertEquals(97, SQLParser.T__97);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertNotNull(sQLParser0);
      
      SQLParser.command_return sQLParser_command_return0 = new SQLParser.command_return();
      assertNotNull(sQLParser_command_return0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(121, SQLParser.T__121);
      assertEquals(91, SQLParser.T__91);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(90, SQLParser.T__90);
      assertEquals(100, SQLParser.T__100);
      assertEquals(122, SQLParser.T__122);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(132, SQLParser.T__132);
      assertEquals(84, SQLParser.T__84);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(4, SQLParser.INT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(134, SQLParser.T__134);
      assertEquals(71, SQLParser.T__71);
      assertEquals(41, SQLParser.IS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(119, SQLParser.T__119);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(32, SQLParser.AND);
      assertEquals(97, SQLParser.T__97);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(57, SQLParser.DATE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(64, SQLParser.T__64);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(41, SQLParser.IS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(60, SQLParser.WS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(132, SQLParser.T__132);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser0.relational_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      SQLParser.name_return sQLParser_name_return0 = new SQLParser.name_return();
      assertNotNull(sQLParser_name_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(108, SQLParser.T__108);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(7, SQLParser.STRING);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(120, SQLParser.T__120);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(5, SQLParser.NOT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(42, SQLParser.NULL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(114, SQLParser.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(100, SQLParser.T__100);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(129, SQLParser.T__129);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.create_index();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(130, SQLParser.T__130);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(114, SQLParser.T__114);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(102, SQLParser.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(90, SQLParser.T__90);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(88, SQLParser.T__88);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(110, SQLParser.T__110);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(79, SQLParser.T__79);
      assertEquals(105, SQLParser.T__105);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(87, SQLParser.T__87);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(6, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((-1492)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      Token token1 = recognitionException0.token;
      assertNull(token1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(68, SQLParser.T__68);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(120, SQLParser.T__120);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(5, SQLParser.NOT);
      assertEquals(4, SQLParser.INT);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_pk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLParser.expression_list_return sQLParser_expression_list_return0 = new SQLParser.expression_list_return();
      assertNotNull(sQLParser_expression_list_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = null;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(90, SQLParser.T__90);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(79, SQLParser.T__79);
      assertEquals(136, SQLParser.T__136);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(113, SQLParser.T__113);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertNotNull(sQLParser0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return1 = new SQLParser.ora_partition_spec_return();
      assertFalse(sQLParser_ora_partition_spec_return1.equals((Object)sQLParser_ora_partition_spec_return0));
      assertNotNull(sQLParser_ora_partition_spec_return1);
      
      Object object0 = sQLParser_ora_partition_spec_return0.getTree();
      assertFalse(sQLParser_ora_partition_spec_return0.equals((Object)sQLParser_ora_partition_spec_return1));
      assertNull(object0);
      assertNotSame(sQLParser_ora_partition_spec_return0, sQLParser_ora_partition_spec_return1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<-R+hYi4{5`jQ)cN");
      assertFalse(boolean0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn(0).when(tokenStream0).mark();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(38, SQLParser.GE);
      assertEquals(43, SQLParser.IN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(93, SQLParser.T__93);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(31, SQLParser.OR);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.command();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(3964, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(109).when(tokenStream0).LA(anyInt());
      doReturn(3).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      IntStream intStream1 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream1).LA(anyInt());
      doReturn(0).when(intStream1).index();
      RecognitionException recognitionException1 = new RecognitionException(intStream1);
      assertEquals(0, recognitionException1.c);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(recognitionException1);
      
      Throwable throwable0 = recognitionException0.initCause(recognitionException1);
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertEquals(3964, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException1.c);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertFalse(recognitionException0.equals((Object)recognitionException1));
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(throwable0);
      assertNotSame(recognitionException0, recognitionException1);
      assertNotSame(recognitionException1, recognitionException0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(42, SQLParser.NULL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(62, SQLParser.T__62);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(41, SQLParser.IS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(130, SQLParser.T__130);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(39, SQLParser.LT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_value_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SQLParser.column_detail_return sQLParser_column_detail_return0 = new SQLParser.column_detail_return();
      assertNotNull(sQLParser_column_detail_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(1767, 1767, 1767, 1767).when(tokenStream0).LA(anyInt());
      doReturn(1767).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(79, SQLParser.T__79);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(74, SQLParser.T__74);
      assertEquals(32, SQLParser.AND);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertNotNull(sQLParser0);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(79, SQLParser.T__79);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(74, SQLParser.T__74);
      assertEquals(32, SQLParser.AND);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertNotNull(sQLParser_commands_return0);
      
      sQLParser_commands_return0.stop = null;
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      Object object0 = sQLParser_commands_return0.getTree();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(79, SQLParser.T__79);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(74, SQLParser.T__74);
      assertEquals(32, SQLParser.AND);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sQLParser0.default_value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(95, 2934, 54, 2934, 54).when(tokenStream0).LA(anyInt());
      doReturn(95).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(130, SQLParser.T__130);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(93, SQLParser.T__93);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(85, SQLParser.T__85);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(84, SQLParser.T__84);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(94, SQLParser.T__94);
      assertEquals(134, SQLParser.T__134);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(104, SQLParser.T__104);
      assertEquals(82, SQLParser.T__82);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(97, SQLParser.T__97);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(81, SQLParser.T__81);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.table_mutation_return sQLParser_table_mutation_return0 = new SQLParser.table_mutation_return();
      assertNotNull(sQLParser_table_mutation_return0);
      
      Object object0 = sQLParser_table_mutation_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(42, SQLParser.NULL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(100, SQLParser.T__100);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(114, SQLParser.T__114);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(108, SQLParser.T__108);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(110, SQLParser.T__110);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(47, SQLParser.STAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(83, SQLParser.T__83);
      assertEquals(5, SQLParser.NOT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(42, SQLParser.NULL);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(137, SQLParser.T__137);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(122, SQLParser.T__122);
      assertEquals(7, SQLParser.STRING);
      assertEquals(38, SQLParser.GE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(43, SQLParser.IN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(129, SQLParser.T__129);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_flag();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 0).when(tokenStream0).LA(anyInt());
      doReturn((-123)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(62, SQLParser.T__62);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(5, SQLParser.NOT);
      assertEquals(40, SQLParser.LE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(90, SQLParser.T__90);
      assertEquals(43, SQLParser.IN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(103, SQLParser.T__103);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(127, 137, (-2176), 0, 137).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(57, SQLParser.DATE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(46, SQLParser.SUB);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(60, SQLParser.WS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = sQLParser0.keyword();
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(57, SQLParser.DATE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(46, SQLParser.SUB);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(60, SQLParser.WS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser_keyword_return0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(57, SQLParser.DATE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(46, SQLParser.SUB);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(60, SQLParser.WS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(38, SQLParser.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(107, SQLParser.T__107);
      assertEquals(61, SQLParser.T__61);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(116, SQLParser.T__116);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(117, SQLParser.T__117);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(42, SQLParser.NULL);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser sQLParser2 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(57, SQLParser.DATE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(46, SQLParser.SUB);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(60, SQLParser.WS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(111, SQLParser.T__111);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(130, SQLParser.T__130);
      assertEquals(47, SQLParser.STAR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(75, SQLParser.T__75);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertNotNull(sQLParser2);
      
      SQLParser.name_return sQLParser_name_return0 = sQLParser2.name();
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(57, SQLParser.DATE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(46, SQLParser.SUB);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(60, SQLParser.WS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(111, SQLParser.T__111);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(130, SQLParser.T__130);
      assertEquals(47, SQLParser.STAR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(75, SQLParser.T__75);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser0.equals((Object)sQLParser2));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertNotNull(sQLParser_name_return0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser0, sQLParser2);
      assertNotSame(sQLParser2, sQLParser1);
      assertNotSame(sQLParser2, sQLParser0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(107, SQLParser.T__107);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(42, SQLParser.NULL);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SQLParser.ora_storage_spec_return sQLParser_ora_storage_spec_return0 = new SQLParser.ora_storage_spec_return();
      assertNotNull(sQLParser_ora_storage_spec_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0._fsp = 763;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(763, recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(763, recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(763, recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(763, recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(128, SQLParser.T__128);
      assertEquals(5, SQLParser.NOT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(77, SQLParser.T__77);
      assertEquals(135, SQLParser.T__135);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(127, SQLParser.T__127);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(31, SQLParser.OR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(119, SQLParser.T__119);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(88, SQLParser.T__88);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(97, SQLParser.T__97);
      assertEquals(60, SQLParser.WS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(100, SQLParser.T__100);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.between_expression();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 764
         //
         verifyException("org.antlr.runtime.BaseRecognizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(115, 118).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(4, SQLParser.INT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(33, SQLParser.XOR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(103, SQLParser.T__103);
      assertEquals(47, SQLParser.STAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.null_comparison();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(127, SQLParser.T__127);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(67, SQLParser.T__67);
      assertEquals(135, SQLParser.T__135);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(37, SQLParser.GT);
      assertEquals(5, SQLParser.NOT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(73, SQLParser.T__73);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(60, SQLParser.WS);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(31, SQLParser.OR);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(117, SQLParser.T__117);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(132, SQLParser.T__132);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(80, SQLParser.T__80);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(94, SQLParser.T__94);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertNotNull(sQLParser0);
      
      SQLParser.null_comparison_return sQLParser_null_comparison_return0 = new SQLParser.null_comparison_return();
      assertNotNull(sQLParser_null_comparison_return0);
      
      Object object0 = sQLParser_null_comparison_return0.getTree();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(69, SQLParser.T__69);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, SQLParser.T__99);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(73, SQLParser.T__73);
      assertEquals(107, SQLParser.T__107);
      assertEquals(81, SQLParser.T__81);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(87, SQLParser.T__87);
      assertEquals(101, SQLParser.T__101);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(111, SQLParser.T__111);
      assertEquals(62, SQLParser.T__62);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(70, SQLParser.T__70);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.default_value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLParser.and_expression_return sQLParser_and_expression_return0 = new SQLParser.and_expression_return();
      assertNotNull(sQLParser_and_expression_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(57, SQLParser.DATE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(82, SQLParser.T__82);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(76, SQLParser.T__76);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(132, SQLParser.T__132);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(101, SQLParser.T__101);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(33, SQLParser.XOR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.additive_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(125, SQLParser.T__125);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(128, SQLParser.T__128);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(82, SQLParser.T__82);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(87, SQLParser.T__87);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      recognizerSharedState0.ruleMemo = null;
      recognizerSharedState0.failed = true;
      recognizerSharedState1.failed = true;
      recognizerSharedState1.text = null;
      recognizerSharedState1.failed = true;
      String string0 = sQLParser0.getGrammarFileName();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertTrue(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertTrue(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(125, SQLParser.T__125);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(128, SQLParser.T__128);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(82, SQLParser.T__82);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(87, SQLParser.T__87);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(string0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", string0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      
      // Undeclared exception!
      try { 
        sQLParser0.index_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream0).LA(anyInt());
      doReturn(3964).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(3964, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      IntStream intStream1 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3964).when(intStream1).LA(anyInt());
      doReturn((-1275)).when(intStream1).index();
      RecognitionException recognitionException1 = new RecognitionException(intStream1);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals((-1275), recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(3964, recognitionException1.c);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(recognitionException1);
      
      Throwable throwable0 = recognitionException0.initCause(recognitionException1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertEquals(3964, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(3964, recognitionException0.index);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals((-1275), recognitionException1.index);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(3964, recognitionException1.c);
      assertEquals(0, recognitionException1.line);
      assertFalse(recognitionException0.equals((Object)recognitionException1));
      assertFalse(recognitionException1.equals((Object)recognitionException0));
      assertNotNull(throwable0);
      assertNotSame(recognitionException0, recognitionException1);
      assertNotSame(recognitionException1, recognitionException0);
      
      SQLParser.equality_expression_return sQLParser_equality_expression_return0 = new SQLParser.equality_expression_return();
      assertNotNull(sQLParser_equality_expression_return0);
      
      SQLParser.and_expression_return sQLParser_and_expression_return0 = new SQLParser.and_expression_return();
      assertNotNull(sQLParser_and_expression_return0);
      
      Object object0 = sQLParser_and_expression_return0.getTree();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'!{mk5NhSU%!%TtOz-");
      assertFalse(boolean0);
      
      SQLParser.ora_flag_return sQLParser_ora_flag_return0 = new SQLParser.ora_flag_return();
      assertNotNull(sQLParser_ora_flag_return0);
      
      TokenStream tokenStream0 = null;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(107, SQLParser.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(57, SQLParser.DATE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(112, SQLParser.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(33, SQLParser.XOR);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(118, SQLParser.T__118);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(99, SQLParser.T__99);
      assertEquals(110, SQLParser.T__110);
      assertEquals(47, SQLParser.STAR);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(7, SQLParser.STRING);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.name_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SQLParser.index_name_return sQLParser_index_name_return0 = new SQLParser.index_name_return();
      assertNotNull(sQLParser_index_name_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(129, SQLParser.T__129);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(42, SQLParser.NULL);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(32, SQLParser.AND);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(41, SQLParser.IS);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(39, SQLParser.LT);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_parts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(117).when(tokenStream0).LA(anyInt());
      doReturn((-3363)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertNotNull(recognizerSharedState2);
      
      RecognizerSharedState recognizerSharedState3 = new RecognizerSharedState(recognizerSharedState2);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState3.backtracking);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertFalse(recognizerSharedState3.errorRecovery);
      assertEquals(0, recognizerSharedState3.type);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertEquals(0, recognizerSharedState3.channel);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertFalse(recognizerSharedState3.failed);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState3);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState3);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState3.backtracking);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertFalse(recognizerSharedState3.errorRecovery);
      assertEquals(0, recognizerSharedState3.type);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertEquals(0, recognizerSharedState3.channel);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertFalse(recognizerSharedState3.failed);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(37, SQLParser.GT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(43, SQLParser.IN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(88, SQLParser.T__88);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(135, SQLParser.T__135);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(118, SQLParser.T__118);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(103, SQLParser.T__103);
      assertEquals(72, SQLParser.T__72);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(67, SQLParser.T__67);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState3));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      recognizerSharedState2.ruleMemo = null;
      recognizerSharedState2.failed = true;
      recognizerSharedState3.failed = true;
      recognizerSharedState3.text = null;
      recognizerSharedState3.failed = true;
      SQLParser.commands_return sQLParser_commands_return0 = new SQLParser.commands_return();
      assertNotNull(sQLParser_commands_return0);
      
      Object object0 = sQLParser_commands_return0.getTree();
      assertNull(object0);
      
      SQLParser.ora_lob_index_return sQLParser_ora_lob_index_return0 = new SQLParser.ora_lob_index_return();
      assertNotNull(sQLParser_ora_lob_index_return0);
      
      Object object1 = sQLParser_ora_lob_index_return0.getTree();
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(56, SQLParser.CHAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(41, SQLParser.IS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals(80, SQLParser.T__80);
      assertEquals(60, SQLParser.WS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(88, SQLParser.T__88);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(39, SQLParser.LT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(89, SQLParser.T__89);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(90, SQLParser.T__90);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(92, SQLParser.T__92);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(135, SQLParser.T__135);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(5, SQLParser.NOT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(39, SQLParser.LT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(127, SQLParser.T__127);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(60, SQLParser.WS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(137, SQLParser.T__137);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(65, SQLParser.T__65);
      assertEquals(107, SQLParser.T__107);
      assertEquals(80, SQLParser.T__80);
      assertEquals(129, SQLParser.T__129);
      assertEquals(95, SQLParser.T__95);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(57, SQLParser.DATE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(88, SQLParser.T__88);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(81, SQLParser.T__81);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(71, SQLParser.T__71);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(47, SQLParser.STAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(31, SQLParser.OR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, SQLParser.T__99);
      assertEquals(118, SQLParser.T__118);
      assertEquals(38, SQLParser.GE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(90, 0).when(tokenStream0).LA(anyInt());
      doReturn((-1576)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      Object object0 = new Object();
      assertNotNull(object0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(79, SQLParser.T__79);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLParser.INT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(108, SQLParser.T__108);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(121, SQLParser.T__121);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(67, SQLParser.T__67);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(97, SQLParser.T__97);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(73, SQLParser.T__73);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(32, SQLParser.AND);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(103, SQLParser.T__103);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(104, SQLParser.T__104);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(127, SQLParser.T__127);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(73, SQLParser.T__73);
      assertEquals(48, SQLParser.SLASH);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(68, SQLParser.T__68);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(76, SQLParser.T__76);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(131, SQLParser.T__131);
      assertEquals(77, SQLParser.T__77);
      assertEquals(101, SQLParser.T__101);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(118, SQLParser.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(46, SQLParser.SUB);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(32, SQLParser.AND);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(85, SQLParser.T__85);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(93, SQLParser.T__93);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.index_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      String string0 = null;
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(41, SQLParser.IS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(111, SQLParser.T__111);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(118, SQLParser.T__118);
      assertEquals(61, SQLParser.T__61);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(110, SQLParser.T__110);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(37, SQLParser.GT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(101, SQLParser.T__101);
      assertEquals(71, SQLParser.T__71);
      assertEquals(131, SQLParser.T__131);
      assertEquals(86, SQLParser.T__86);
      assertEquals(116, SQLParser.T__116);
      assertEquals(115, SQLParser.T__115);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(107, SQLParser.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(129, SQLParser.T__129);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(5, 80, 5).when(tokenStream0).LA(anyInt());
      doReturn((-472)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(107, SQLParser.T__107);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(7, SQLParser.STRING);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(41, SQLParser.IS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.nullability();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(117).when(tokenStream0).LA(anyInt());
      doReturn((-3363)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.type);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertNotNull(recognizerSharedState2);
      
      RecognizerSharedState recognizerSharedState3 = new RecognizerSharedState(recognizerSharedState2);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertEquals(0, recognizerSharedState3.type);
      assertEquals(0, recognizerSharedState3.channel);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState3.backtracking);
      assertFalse(recognizerSharedState3.failed);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertFalse(recognizerSharedState3.errorRecovery);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState3);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState3);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertEquals(0, recognizerSharedState3.type);
      assertEquals(0, recognizerSharedState3.channel);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState3.backtracking);
      assertFalse(recognizerSharedState3.failed);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertFalse(recognizerSharedState3.errorRecovery);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(130, SQLParser.T__130);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(108, SQLParser.T__108);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(110, SQLParser.T__110);
      assertEquals(87, SQLParser.T__87);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(85, SQLParser.T__85);
      assertEquals(4, SQLParser.INT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState3));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      recognizerSharedState2.ruleMemo = null;
      recognizerSharedState2.failed = true;
      recognizerSharedState3.failed = true;
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(2106, 445).when(tokenStream0).LA(anyInt());
      doReturn(445).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(101, SQLParser.T__101);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(103, SQLParser.T__103);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(79, SQLParser.T__79);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(40, SQLParser.LE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(37, SQLParser.GT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(47, SQLParser.STAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(75, SQLParser.T__75);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertNotNull(sQLParser0);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(101, SQLParser.T__101);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(103, SQLParser.T__103);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(79, SQLParser.T__79);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(40, SQLParser.LE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(37, SQLParser.GT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(47, SQLParser.STAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(75, SQLParser.T__75);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(107, SQLParser.T__107);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(78, SQLParser.T__78);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(39, SQLParser.LT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(76, SQLParser.T__76);
      assertEquals(47, SQLParser.STAR);
      assertEquals(91, SQLParser.T__91);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.constraint_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SQLParser.column_detail_return sQLParser_column_detail_return0 = new SQLParser.column_detail_return();
      assertNotNull(sQLParser_column_detail_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(47, SQLParser.STAR);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(74, SQLParser.T__74);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(57, SQLParser.DATE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertNotNull(sQLParser0);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(47, SQLParser.STAR);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(74, SQLParser.T__74);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(57, SQLParser.DATE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertNotNull(sQLParser_commands_return0);
      
      sQLParser_commands_return0.stop = null;
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      
      Object object0 = sQLParser_commands_return0.getTree();
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(47, SQLParser.STAR);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(74, SQLParser.T__74);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(57, SQLParser.DATE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sQLParser0.default_value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SQLParser.ora_config_return sQLParser_ora_config_return0 = new SQLParser.ora_config_return();
      assertNotNull(sQLParser_ora_config_return0);
      
      SQLParser.null_comparison_return sQLParser_null_comparison_return0 = new SQLParser.null_comparison_return();
      assertNotNull(sQLParser_null_comparison_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(78, SQLParser.T__78);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(31, SQLParser.OR);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(7, SQLParser.STRING);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(136, SQLParser.T__136);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(60, SQLParser.WS);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(74, SQLParser.T__74);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(43, SQLParser.IN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(37, SQLParser.GT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_mutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(127).when(tokenStream0).LA(anyInt());
      doReturn((-5)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(78, SQLParser.T__78);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(87, SQLParser.T__87);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(38, SQLParser.GE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(76, SQLParser.T__76);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(107, 0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(107).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState1);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(98, SQLParser.T__98);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(37, SQLParser.GT);
      assertEquals(72, SQLParser.T__72);
      assertEquals(38, SQLParser.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.primary_return sQLParser_primary_return0 = new SQLParser.primary_return();
      assertNotNull(sQLParser_primary_return0);
      
      SQLParser sQLParser2 = new SQLParser(sQLParser1.input);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(98, SQLParser.T__98);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(37, SQLParser.GT);
      assertEquals(72, SQLParser.T__72);
      assertEquals(38, SQLParser.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(31, SQLParser.OR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(69, SQLParser.T__69);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(7, SQLParser.STRING);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertNotNull(sQLParser2);
      
      sQLParser2.type();
      // Undeclared exception!
      try { 
        sQLParser1.drop_pk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(38, SQLParser.GE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(5, SQLParser.NOT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(113, SQLParser.T__113);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(4, SQLParser.INT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(82, SQLParser.T__82);
      assertEquals(108, SQLParser.T__108);
      assertEquals(74, SQLParser.T__74);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(131, SQLParser.T__131);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(60, SQLParser.WS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(98, SQLParser.T__98);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(125, SQLParser.T__125);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(88, SQLParser.T__88);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(109, SQLParser.T__109);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(120, SQLParser.T__120);
      assertEquals(104, SQLParser.T__104);
      assertEquals(78, SQLParser.T__78);
      assertEquals(112, SQLParser.T__112);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(31, SQLParser.OR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(127, SQLParser.T__127);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(119, SQLParser.T__119);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_sequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SQLParser.commands_return sQLParser_commands_return0 = new SQLParser.commands_return();
      assertNotNull(sQLParser_commands_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      Object object0 = sQLParser_commands_return0.getTree();
      assertNull(object0);
      
      SQLParser.ora_lob_index_return sQLParser_ora_lob_index_return0 = new SQLParser.ora_lob_index_return();
      assertNotNull(sQLParser_ora_lob_index_return0);
      
      Object object1 = sQLParser_ora_lob_index_return0.getTree();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      Object object0 = sQLParser_drop_sequence_return0.getTree();
      assertNull(object0);
      
      SQLParser.expression_list_return sQLParser_expression_list_return0 = new SQLParser.expression_list_return();
      assertNotNull(sQLParser_expression_list_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      sQLParser_foreign_key_constraint_return0.start = null;
      Object object1 = sQLParser_foreign_key_constraint_return0.getTree();
      assertNull(object1);
      
      SQLParser.alter_table_return sQLParser_alter_table_return0 = new SQLParser.alter_table_return();
      assertNotNull(sQLParser_alter_table_return0);
      
      Object object2 = sQLParser_alter_table_return0.getTree();
      assertNull(object2);
      
      SQLParser.ora_storage_opt_return sQLParser_ora_storage_opt_return0 = new SQLParser.ora_storage_opt_return();
      assertNotNull(sQLParser_ora_storage_opt_return0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SQLParser.sub_partition_config_return sQLParser_sub_partition_config_return0 = new SQLParser.sub_partition_config_return();
      assertNotNull(sQLParser_sub_partition_config_return0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(92, SQLParser.T__92);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(121, SQLParser.T__121);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(106, SQLParser.T__106);
      assertEquals(114, SQLParser.T__114);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(7, SQLParser.STRING);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(96, SQLParser.T__96);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.type();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(100).when(tokenStream0).LA(anyInt());
      doReturn(117).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(43, SQLParser.IN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(63, SQLParser.T__63);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(32, SQLParser.AND);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(46, SQLParser.SUB);
      assertEquals(101, SQLParser.T__101);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(99, SQLParser.T__99);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(130, SQLParser.T__130);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(136, SQLParser.T__136);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.value_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(2411, 2411, 2411).when(tokenStream0).LA(anyInt());
      doReturn(2411).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(118, SQLParser.T__118);
      assertEquals(42, SQLParser.NULL);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(68, SQLParser.T__68);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(100, SQLParser.T__100);
      assertEquals(47, SQLParser.STAR);
      assertEquals(130, SQLParser.T__130);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(118, SQLParser.T__118);
      assertEquals(42, SQLParser.NULL);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(68, SQLParser.T__68);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(100, SQLParser.T__100);
      assertEquals(47, SQLParser.STAR);
      assertEquals(130, SQLParser.T__130);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(37, SQLParser.GT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(137, SQLParser.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(78, SQLParser.T__78);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(130, SQLParser.T__130);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(4, SQLParser.INT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(76, SQLParser.T__76);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.ora_partition_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = sQLParser_foreign_key_constraint_return1.getTree();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNull(object0);
      assertNotSame(sQLParser_foreign_key_constraint_return1, sQLParser_foreign_key_constraint_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      Token token1 = recognizerSharedState0.token;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(115, 1862, 115).when(tokenStream0).LA(anyInt());
      doReturn(115).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(37, SQLParser.GT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(7, SQLParser.STRING);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(104, SQLParser.T__104);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(71, SQLParser.T__71);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(85, SQLParser.T__85);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState1 = null;
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(37, SQLParser.GT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(7, SQLParser.STRING);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(104, SQLParser.T__104);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(71, SQLParser.T__71);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(85, SQLParser.T__85);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(117, SQLParser.T__117);
      assertEquals(79, SQLParser.T__79);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser sQLParser2 = new SQLParser(sQLParser1.input, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(37, SQLParser.GT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(7, SQLParser.STRING);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(104, SQLParser.T__104);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(71, SQLParser.T__71);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(85, SQLParser.T__85);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(117, SQLParser.T__117);
      assertEquals(79, SQLParser.T__79);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(4, SQLParser.INT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(61, SQLParser.T__61);
      assertEquals(39, SQLParser.LT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(105, SQLParser.T__105);
      assertEquals(76, SQLParser.T__76);
      assertEquals(120, SQLParser.T__120);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, SQLParser.T__99);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(115, SQLParser.T__115);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(73, SQLParser.T__73);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(130, SQLParser.T__130);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(46, SQLParser.SUB);
      assertEquals(87, SQLParser.T__87);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(126, SQLParser.T__126);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(85, SQLParser.T__85);
      assertEquals(118, SQLParser.T__118);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(38, SQLParser.GE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertNotNull(sQLParser2);
      
      // Undeclared exception!
      try { 
        sQLParser2.drop_pk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(42, SQLParser.NULL);
      assertEquals(93, SQLParser.T__93);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(62, SQLParser.T__62);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(34, SQLParser.EQ);
      assertEquals(47, SQLParser.STAR);
      assertEquals(106, SQLParser.T__106);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(90, SQLParser.T__90);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(37, SQLParser.GT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      sQLParser_keyword_return1.stop = null;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(165, 165, 165).when(tokenStream0).LA(anyInt());
      doReturn((-1801)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser.additive_expression_return sQLParser_additive_expression_return0 = new SQLParser.additive_expression_return();
      assertNotNull(sQLParser_additive_expression_return0);
      
      Object object0 = sQLParser_additive_expression_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(73, SQLParser.T__73);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(89, SQLParser.T__89);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(105, SQLParser.T__105);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(120, SQLParser.T__120);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(135, SQLParser.T__135);
      assertEquals(63, SQLParser.T__63);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(38, SQLParser.GE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(32, SQLParser.AND);
      assertEquals(114, SQLParser.T__114);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(77, SQLParser.T__77);
      assertEquals(106, SQLParser.T__106);
      assertEquals(92, SQLParser.T__92);
      assertEquals(121, SQLParser.T__121);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(93, SQLParser.T__93);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(42, SQLParser.NULL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(124, SQLParser.T__124);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_sequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(89).when(tokenStream0).LA(anyInt());
      doReturn(89).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(67, SQLParser.T__67);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(89, SQLParser.T__89);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(90, SQLParser.T__90);
      assertEquals(129, SQLParser.T__129);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(107, SQLParser.T__107);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(108, SQLParser.T__108);
      assertEquals(84, SQLParser.T__84);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(31, SQLParser.OR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(72, SQLParser.T__72);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = sQLParser_comment_return0.tree;
      assertNull(object0);
      
      sQLParser_keyword_return0.tree = null;
      Object object1 = sQLParser_keyword_return0.getTree();
      assertNull(object1);
      
      SQLParser.partition_parts_return sQLParser_partition_parts_return0 = new SQLParser.partition_parts_return();
      assertNotNull(sQLParser_partition_parts_return0);
      
      sQLParser_partition_parts_return0.stop = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      sQLParser_partition_parts_return0.start = null;
      sQLParser_partition_parts_return0.tree = null;
      Object object2 = sQLParser_partition_parts_return0.getTree();
      assertNull(object2);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      recognizerSharedState1.token = null;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(98, SQLParser.T__98);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(68, SQLParser.T__68);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(7, SQLParser.STRING);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(92, SQLParser.T__92);
      assertEquals(41, SQLParser.IS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(79, SQLParser.T__79);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      recognizerSharedState0.ruleMemo = null;
      // Undeclared exception!
      try { 
        sQLParser0.constraint_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(62, SQLParser.T__62);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(78, SQLParser.T__78);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(68, SQLParser.T__68);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(108, SQLParser.T__108);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(42, SQLParser.NULL);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.comment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      SQLParser.ora_flag_return sQLParser_ora_flag_return0 = new SQLParser.ora_flag_return();
      assertNotNull(sQLParser_ora_flag_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(96, SQLParser.T__96);
      assertEquals(33, SQLParser.XOR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(39, SQLParser.LT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(89, SQLParser.T__89);
      assertEquals(40, SQLParser.LE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(109, SQLParser.T__109);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(41, SQLParser.IS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(107, SQLParser.T__107);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(34, SQLParser.EQ);
      assertEquals(114, SQLParser.T__114);
      assertEquals(85, SQLParser.T__85);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(129, SQLParser.T__129);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(7, SQLParser.STRING);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(32, SQLParser.AND);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.equality_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(108, SQLParser.T__108);
      assertEquals(84, SQLParser.T__84);
      assertEquals(31, SQLParser.OR);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(107, SQLParser.T__107);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(43, SQLParser.IN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.inline_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return0 = new SQLParser.ora_lob_config_return();
      assertNotNull(sQLParser_ora_lob_config_return0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return1 = new SQLParser.ora_lob_config_return();
      assertFalse(sQLParser_ora_lob_config_return1.equals((Object)sQLParser_ora_lob_config_return0));
      assertNotNull(sQLParser_ora_lob_config_return1);
      
      Object object0 = sQLParser_ora_lob_config_return1.getTree();
      assertFalse(sQLParser_ora_lob_config_return1.equals((Object)sQLParser_ora_lob_config_return0));
      assertNull(object0);
      assertNotSame(sQLParser_ora_lob_config_return1, sQLParser_ora_lob_config_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(122, SQLParser.T__122);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(62, SQLParser.T__62);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(113, SQLParser.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(86, SQLParser.T__86);
      assertEquals(105, SQLParser.T__105);
      assertEquals(79, SQLParser.T__79);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(95, SQLParser.T__95);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(81, SQLParser.T__81);
      assertEquals(125, SQLParser.T__125);
      assertEquals(73, SQLParser.T__73);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(102, SQLParser.T__102);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(122, SQLParser.T__122);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(62, SQLParser.T__62);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(113, SQLParser.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(86, SQLParser.T__86);
      assertEquals(105, SQLParser.T__105);
      assertEquals(79, SQLParser.T__79);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(95, SQLParser.T__95);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(81, SQLParser.T__81);
      assertEquals(125, SQLParser.T__125);
      assertEquals(73, SQLParser.T__73);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(102, SQLParser.T__102);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(108, SQLParser.T__108);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(94, SQLParser.T__94);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(111, SQLParser.T__111);
      assertEquals(74, SQLParser.T__74);
      assertEquals(126, SQLParser.T__126);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(75, SQLParser.T__75);
      assertEquals(133, SQLParser.T__133);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(76, SQLParser.T__76);
      assertEquals(5, SQLParser.NOT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(40, SQLParser.LE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.DFA2 sQLParser_DFA2_0 = sQLParser0.new DFA2(sQLParser1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", sQLParser_DFA2_0.getDescription());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(122, SQLParser.T__122);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(62, SQLParser.T__62);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(113, SQLParser.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(86, SQLParser.T__86);
      assertEquals(105, SQLParser.T__105);
      assertEquals(79, SQLParser.T__79);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(95, SQLParser.T__95);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(81, SQLParser.T__81);
      assertEquals(125, SQLParser.T__125);
      assertEquals(73, SQLParser.T__73);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(102, SQLParser.T__102);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(108, SQLParser.T__108);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(94, SQLParser.T__94);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(111, SQLParser.T__111);
      assertEquals(74, SQLParser.T__74);
      assertEquals(126, SQLParser.T__126);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(75, SQLParser.T__75);
      assertEquals(133, SQLParser.T__133);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(76, SQLParser.T__76);
      assertEquals(5, SQLParser.NOT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(40, SQLParser.LE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertFalse(DFA.debug);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_DFA2_0);
      
      String string0 = sQLParser_DFA2_0.getDescription();
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", sQLParser_DFA2_0.getDescription());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(122, SQLParser.T__122);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(62, SQLParser.T__62);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(113, SQLParser.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(86, SQLParser.T__86);
      assertEquals(105, SQLParser.T__105);
      assertEquals(79, SQLParser.T__79);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(95, SQLParser.T__95);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(81, SQLParser.T__81);
      assertEquals(125, SQLParser.T__125);
      assertEquals(73, SQLParser.T__73);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(102, SQLParser.T__102);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(108, SQLParser.T__108);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(94, SQLParser.T__94);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(111, SQLParser.T__111);
      assertEquals(74, SQLParser.T__74);
      assertEquals(126, SQLParser.T__126);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(75, SQLParser.T__75);
      assertEquals(133, SQLParser.T__133);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(76, SQLParser.T__76);
      assertEquals(5, SQLParser.NOT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(40, SQLParser.LE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertFalse(DFA.debug);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(string0);
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", string0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      recognizerSharedState0.channel = 34;
      SQLParser.default_value_return sQLParser_default_value_return0 = new SQLParser.default_value_return();
      assertNotNull(sQLParser_default_value_return0);
      
      Object object1 = sQLParser_default_value_return0.getTree();
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        sQLParser1.ora_storage_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.value_list_return sQLParser_value_list_return0 = new SQLParser.value_list_return();
      assertNotNull(sQLParser_value_list_return0);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      Object object0 = sQLParser_ora_partition_spec_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(40, SQLParser.LE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(60, SQLParser.WS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(42, SQLParser.NULL);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(134, SQLParser.T__134);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertNotNull(sQLParser0);
      
      TreeAdaptor treeAdaptor0 = sQLParser0.getTreeAdaptor();
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(40, SQLParser.LE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(60, SQLParser.WS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(42, SQLParser.NULL);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(134, SQLParser.T__134);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertNotNull(treeAdaptor0);
      
      sQLParser0.setTreeAdaptor(treeAdaptor0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(40, SQLParser.LE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(60, SQLParser.WS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(42, SQLParser.NULL);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(134, SQLParser.T__134);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_partition_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(108).when(tokenStream0).LA(anyInt());
      doReturn(108).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(41, SQLParser.IS);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(102, SQLParser.T__102);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(73, SQLParser.T__73);
      assertEquals(109, SQLParser.T__109);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(88, SQLParser.T__88);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(39, SQLParser.LT);
      assertEquals(135, SQLParser.T__135);
      assertEquals(70, SQLParser.T__70);
      assertEquals(4, SQLParser.INT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(40, SQLParser.LE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(78, SQLParser.T__78);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(85, SQLParser.T__85);
      assertEquals(86, SQLParser.T__86);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(38, SQLParser.GE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(136, SQLParser.T__136);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(32, SQLParser.AND);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(128, SQLParser.T__128);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(113, SQLParser.T__113);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(105, SQLParser.T__105);
      assertEquals(92, SQLParser.T__92);
      assertEquals(120, SQLParser.T__120);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(82, SQLParser.T__82);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(89, SQLParser.T__89);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertNotNull(sQLParser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BitSet bitSet0 = SQLParser.FOLLOW_65_in_alter_table1087;
      assertEquals(32, bitSet0.size());
      assertFalse(bitSet0.isNil());
      assertEquals(192, bitSet0.numBits());
      assertEquals(3, bitSet0.lengthInLongWords());
      assertNotNull(bitSet0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(61, SQLParser.T__61);
      assertEquals(4, SQLParser.INT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(99, SQLParser.T__99);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(111, SQLParser.T__111);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(133, SQLParser.T__133);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(110, SQLParser.T__110);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(38, SQLParser.GE);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(34, SQLParser.EQ);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(108, SQLParser.T__108);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(41, SQLParser.IS);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(137, SQLParser.T__137);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_part_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(84).when(tokenStream0).LA(anyInt());
      doReturn(84).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(90, SQLParser.T__90);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(98, SQLParser.T__98);
      assertEquals(111, SQLParser.T__111);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(114, SQLParser.T__114);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(42, SQLParser.NULL);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(93, SQLParser.T__93);
      assertEquals(46, SQLParser.SUB);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(31, SQLParser.OR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(115, SQLParser.T__115);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(90, SQLParser.T__90);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(98, SQLParser.T__98);
      assertEquals(111, SQLParser.T__111);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(114, SQLParser.T__114);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(42, SQLParser.NULL);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(93, SQLParser.T__93);
      assertEquals(46, SQLParser.SUB);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(31, SQLParser.OR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(115, SQLParser.T__115);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(38, SQLParser.GE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(40, SQLParser.LE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(5, SQLParser.NOT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals(97, SQLParser.T__97);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(74, SQLParser.T__74);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.value_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      SQLParser.check_constraint_return sQLParser_check_constraint_return0 = new SQLParser.check_constraint_return();
      assertNotNull(sQLParser_check_constraint_return0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":)m3oV9xcE");
      assertFalse(boolean0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(34, SQLParser.EQ);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(101, SQLParser.T__101);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLParser.OR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(38, SQLParser.GE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(7, SQLParser.STRING);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(112, SQLParser.T__112);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(115).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(131, SQLParser.T__131);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(94, SQLParser.T__94);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(79, SQLParser.T__79);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(88, SQLParser.T__88);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(135, SQLParser.T__135);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser1.commands();
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(131, SQLParser.T__131);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(94, SQLParser.T__94);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(79, SQLParser.T__79);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(88, SQLParser.T__88);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(135, SQLParser.T__135);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_commands_return0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser2 = new SQLParser(tokenStream1, recognizerSharedState1);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLParser.T__90);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(101, SQLParser.T__101);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(72, SQLParser.T__72);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertNotNull(sQLParser2);
      
      TreeAdaptor treeAdaptor0 = sQLParser2.getTreeAdaptor();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLParser.T__90);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(101, SQLParser.T__101);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(72, SQLParser.T__72);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertNotNull(treeAdaptor0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertNotSame(sQLParser2, sQLParser0);
      assertNotSame(sQLParser2, sQLParser1);
      
      sQLParser0.setTreeAdaptor(treeAdaptor0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLParser.T__90);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(101, SQLParser.T__101);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(72, SQLParser.T__72);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser0.equals((Object)sQLParser2));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser0, sQLParser2);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertNotSame(sQLParser2, sQLParser0);
      assertNotSame(sQLParser2, sQLParser1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(82).when(tokenStream0).LA(anyInt());
      doReturn(82).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(78, SQLParser.T__78);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(91, SQLParser.T__91);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(121, SQLParser.T__121);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(32, SQLParser.AND);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(80, SQLParser.T__80);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(109, SQLParser.T__109);
      assertEquals(93, SQLParser.T__93);
      assertEquals(34, SQLParser.EQ);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(78, SQLParser.T__78);
      assertEquals(92, SQLParser.T__92);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(84, SQLParser.T__84);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(107, SQLParser.T__107);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(89, SQLParser.T__89);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(88, SQLParser.T__88);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals(7, SQLParser.STRING);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SQLParser.sub_partition_config_return sQLParser_sub_partition_config_return0 = new SQLParser.sub_partition_config_return();
      assertNotNull(sQLParser_sub_partition_config_return0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      SQLParser.nullability_return sQLParser_nullability_return0 = new SQLParser.nullability_return();
      assertNotNull(sQLParser_nullability_return0);
      
      Object object0 = sQLParser_nullability_return0.tree;
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(126).when(tokenStream0).LA(anyInt());
      doReturn((-2779)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(105, SQLParser.T__105);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(98, SQLParser.T__98);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(32, SQLParser.AND);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(31, SQLParser.OR);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(40, SQLParser.LE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(4, SQLParser.INT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.expression_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = sQLParser_foreign_key_constraint_return1.getTree();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNull(object0);
      assertNotSame(sQLParser_foreign_key_constraint_return1, sQLParser_foreign_key_constraint_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(7, SQLParser.STRING);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.create_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SQLParser.multiplicative_expression_return sQLParser_multiplicative_expression_return0 = new SQLParser.multiplicative_expression_return();
      assertNotNull(sQLParser_multiplicative_expression_return0);
      
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      Object object0 = sQLParser_table_comment_details_return0.tree;
      assertNull(object0);
      
      sQLParser_multiplicative_expression_return0.tree = null;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(97, SQLParser.T__97);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(32, SQLParser.AND);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(103, SQLParser.T__103);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(80, SQLParser.T__80);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(40, SQLParser.LE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(47, SQLParser.STAR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.primary_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(37, SQLParser.GT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(38, SQLParser.GE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(98, SQLParser.T__98);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(68, SQLParser.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.nullability();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SQLParser.sub_partition_config_return sQLParser_sub_partition_config_return0 = new SQLParser.sub_partition_config_return();
      assertNotNull(sQLParser_sub_partition_config_return0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      SQLParser.nullability_return sQLParser_nullability_return0 = new SQLParser.nullability_return();
      assertNotNull(sQLParser_nullability_return0);
      
      Object object0 = sQLParser_nullability_return0.tree;
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(125).when(tokenStream0).LA(anyInt());
      doReturn((-2779)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(68, SQLParser.T__68);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(97, SQLParser.T__97);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertNotNull(sQLParser0);
      
      SQLParser.expression_list_return sQLParser_expression_list_return0 = new SQLParser.expression_list_return();
      assertNotNull(sQLParser_expression_list_return0);
      
      Object object1 = sQLParser_expression_list_return0.getTree();
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        sQLParser0.equality_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(111, SQLParser.T__111);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(125, SQLParser.T__125);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(114, SQLParser.T__114);
      assertEquals(94, SQLParser.T__94);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(129, SQLParser.T__129);
      assertEquals(72, SQLParser.T__72);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(80, SQLParser.T__80);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.nullability();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return0 = new SQLParser.ora_lob_config_return();
      assertNotNull(sQLParser_ora_lob_config_return0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return1 = new SQLParser.ora_lob_config_return();
      assertFalse(sQLParser_ora_lob_config_return1.equals((Object)sQLParser_ora_lob_config_return0));
      assertNotNull(sQLParser_ora_lob_config_return1);
      
      Object object0 = sQLParser_ora_lob_config_return1.getTree();
      assertFalse(sQLParser_ora_lob_config_return1.equals((Object)sQLParser_ora_lob_config_return0));
      assertNull(object0);
      assertNotSame(sQLParser_ora_lob_config_return1, sQLParser_ora_lob_config_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(130, SQLParser.T__130);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(102, SQLParser.T__102);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(65, SQLParser.T__65);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(119, SQLParser.T__119);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(7, SQLParser.STRING);
      assertEquals(77, SQLParser.T__77);
      assertEquals(32, SQLParser.AND);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(130, SQLParser.T__130);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(102, SQLParser.T__102);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(65, SQLParser.T__65);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(119, SQLParser.T__119);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(7, SQLParser.STRING);
      assertEquals(77, SQLParser.T__77);
      assertEquals(32, SQLParser.AND);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(98, SQLParser.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(57, SQLParser.DATE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(4, SQLParser.INT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(95, SQLParser.T__95);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(65, SQLParser.T__65);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(43, SQLParser.IN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(79, SQLParser.T__79);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(37, SQLParser.GT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.name_list_return sQLParser_name_list_return0 = new SQLParser.name_list_return();
      assertNotNull(sQLParser_name_list_return0);
      
      Object object1 = sQLParser_name_list_return0.getTree();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.failed = true;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertTrue(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(7, SQLParser.STRING);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(37, SQLParser.GT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(41, SQLParser.IS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(73, SQLParser.T__73);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(123, SQLParser.T__123);
      assertEquals(46, SQLParser.SUB);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(122, SQLParser.T__122);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(86, SQLParser.T__86);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(129, SQLParser.T__129);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(110, SQLParser.T__110);
      assertEquals(83, SQLParser.T__83);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(89, SQLParser.T__89);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLParser.INT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(38, SQLParser.GE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(79, SQLParser.T__79);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(72, SQLParser.T__72);
      assertEquals(80, SQLParser.T__80);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.null_comparison();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      SQLParser.value_return sQLParser_value_return0 = new SQLParser.value_return();
      assertNotNull(sQLParser_value_return0);
      
      SQLParser.fractionDigits_return sQLParser_fractionDigits_return0 = new SQLParser.fractionDigits_return();
      assertNotNull(sQLParser_fractionDigits_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(92, SQLParser.T__92);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(129, SQLParser.T__129);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(134, SQLParser.T__134);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(65, SQLParser.T__65);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertNotNull(sQLParser0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(69, SQLParser.T__69);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(60, SQLParser.WS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(43, SQLParser.IN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(37, SQLParser.GT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(133, SQLParser.T__133);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(57, SQLParser.DATE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(31, SQLParser.OR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.multiplicative_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      SQLParser.null_comparison_return sQLParser_null_comparison_return0 = new SQLParser.null_comparison_return();
      assertNotNull(sQLParser_null_comparison_return0);
      
      sQLParser_null_comparison_return0.stop = null;
      Object object0 = sQLParser_null_comparison_return0.getTree();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.tokenStartCharIndex = 127;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(127, recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(127, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(127, recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(127, recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(37, SQLParser.GT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(40, SQLParser.LE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(99, SQLParser.T__99);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(90, SQLParser.T__90);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(64, SQLParser.T__64);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.multiplicative_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(intStream0).LA(anyInt());
      doReturn((-506)).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals((-506), recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(3, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLParser.IN);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(78, SQLParser.T__78);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(108, SQLParser.T__108);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(31, SQLParser.OR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(73, SQLParser.T__73);
      assertEquals(120, SQLParser.T__120);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.between_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SQLParser.table_name_return sQLParser_table_name_return0 = new SQLParser.table_name_return();
      assertNotNull(sQLParser_table_name_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(5, SQLParser.NOT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(73, SQLParser.T__73);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(114, SQLParser.T__114);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(79, SQLParser.T__79);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals(87, SQLParser.T__87);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(31, SQLParser.OR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(111, SQLParser.T__111);
      assertEquals(69, SQLParser.T__69);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(7, SQLParser.STRING);
      assertNotNull(sQLParser0);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      sQLParser0.input = tokenStream1;
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.input.index());
      assertNull(sQLParser0.input.getSourceName());
      assertEquals(0, sQLParser0.input.mark());
      assertEquals(0, sQLParser0.input.range());
      assertEquals(0, sQLParser0.input.size());
      
      // Undeclared exception!
      try { 
        sQLParser0.name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = sQLParser_foreign_key_constraint_return1.getTree();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNull(object0);
      assertNotSame(sQLParser_foreign_key_constraint_return1, sQLParser_foreign_key_constraint_return0);
      
      SQLParser.between_expression_return sQLParser_between_expression_return0 = new SQLParser.between_expression_return();
      assertNotNull(sQLParser_between_expression_return0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object1 = sQLParser_between_expression_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(107, SQLParser.T__107);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(106, SQLParser.T__106);
      assertEquals(77, SQLParser.T__77);
      assertEquals(121, SQLParser.T__121);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(109, SQLParser.T__109);
      assertEquals(74, SQLParser.T__74);
      assertEquals(124, SQLParser.T__124);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(123, SQLParser.T__123);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(81, SQLParser.T__81);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(33, SQLParser.XOR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(117, SQLParser.T__117);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(39, SQLParser.LT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(66, SQLParser.T__66);
      assertEquals(4, SQLParser.INT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(40, SQLParser.LE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(78, SQLParser.T__78);
      assertEquals(120, SQLParser.T__120);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(37, SQLParser.GT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(38, SQLParser.GE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_opt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(2283, 0).when(intStream0).LA(anyInt());
      doReturn((-419)).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals((-419), recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(2283, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(42, SQLParser.NULL);
      assertEquals(87, SQLParser.T__87);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(38, SQLParser.GE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(60, SQLParser.WS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(39, SQLParser.LT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertNotNull(sQLParser0);
      
      BitSet bitSet0 = SQLParser.FOLLOW_121_in_ora_lob_index1070;
      assertEquals(128, bitSet0.numBits());
      assertEquals(1, bitSet0.size());
      assertFalse(bitSet0.isNil());
      assertEquals(2, bitSet0.lengthInLongWords());
      assertNotNull(bitSet0);
      
      boolean boolean0 = sQLParser0.mismatchIsMissingToken(recognitionException0.input, bitSet0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(128, bitSet0.numBits());
      assertEquals(1, bitSet0.size());
      assertFalse(bitSet0.isNil());
      assertEquals(2, bitSet0.lengthInLongWords());
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals((-419), recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(2283, recognitionException0.c);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(103, SQLParser.T__103);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(42, SQLParser.NULL);
      assertEquals(87, SQLParser.T__87);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(38, SQLParser.GE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(60, SQLParser.WS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(39, SQLParser.LT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        sQLParser0.add_constraints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = new SQLParser.keyword_return();
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      sQLParser_keyword_return1.start = null;
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      RecognitionException recognitionException0 = new RecognitionException(intStream0);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      RecognitionException recognitionException1 = (RecognitionException)recognitionException0.fillInStackTrace();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException1.index);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.line);
      assertEquals(0, recognitionException1.c);
      assertNotNull(recognitionException1);
      assertSame(recognitionException0, recognitionException1);
      assertSame(recognitionException1, recognitionException0);
      
      MockThrowable mockThrowable0 = (MockThrowable)recognitionException0.initCause(recognitionException1);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException1.index);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.line);
      assertEquals(0, recognitionException1.c);
      assertNotNull(mockThrowable0);
      assertSame(recognitionException0, recognitionException1);
      assertSame(recognitionException1, recognitionException0);
      
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException1.index);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.line);
      assertEquals(0, recognitionException1.c);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      mockThrowable1.setOriginForDelegate((StackTraceElement) null);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.getMessage());
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException1.index);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.line);
      assertEquals(0, recognitionException1.c);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertSame(recognitionException0, recognitionException1);
      assertSame(recognitionException1, recognitionException0);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      
      mockThrowable1.setOriginForDelegate((StackTraceElement) null);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.getMessage());
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException1.index);
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.line);
      assertEquals(0, recognitionException1.c);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertSame(recognitionException0, recognitionException1);
      assertSame(recognitionException1, recognitionException0);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      
      List<String> list0 = BaseRecognizer.getRuleInvocationStack((Throwable) recognitionException0, (String) null);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertNotNull(list0);
      assertSame(recognitionException0, recognitionException1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(4, SQLParser.INT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(40, SQLParser.LE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(41, SQLParser.IS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(60, SQLParser.WS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(32, SQLParser.AND);
      assertEquals(42, SQLParser.NULL);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(120, SQLParser.T__120);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.check_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SQLParser.between_expression_return sQLParser_between_expression_return0 = new SQLParser.between_expression_return();
      assertNotNull(sQLParser_between_expression_return0);
      
      SQLParser.index_name_return sQLParser_index_name_return0 = new SQLParser.index_name_return();
      assertNotNull(sQLParser_index_name_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(127, SQLParser.T__127);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(33, SQLParser.XOR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(98, SQLParser.T__98);
      assertEquals(111, SQLParser.T__111);
      assertEquals(68, SQLParser.T__68);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(69, SQLParser.T__69);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, SQLParser.T__99);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(94, SQLParser.T__94);
      assertEquals(115, SQLParser.T__115);
      assertEquals(79, SQLParser.T__79);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(108, SQLParser.T__108);
      assertEquals(64, SQLParser.T__64);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(137, SQLParser.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(80, SQLParser.T__80);
      assertEquals(107, SQLParser.T__107);
      assertEquals(57, SQLParser.DATE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(129, SQLParser.T__129);
      assertEquals(95, SQLParser.T__95);
      assertEquals(88, SQLParser.T__88);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.alter_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return0 = new SQLParser.ora_lob_config_return();
      assertNotNull(sQLParser_ora_lob_config_return0);
      
      Object object0 = sQLParser_ora_lob_config_return0.getTree();
      assertNull(object0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(97, SQLParser.T__97);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(67, SQLParser.T__67);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(131, SQLParser.T__131);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(100, SQLParser.T__100);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(85, SQLParser.T__85);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(129, SQLParser.T__129);
      assertEquals(72, SQLParser.T__72);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(121, SQLParser.T__121);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(80, SQLParser.T__80);
      assertEquals(34, SQLParser.EQ);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser((TokenStream) null);
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(111, SQLParser.T__111);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(41, SQLParser.IS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(115, SQLParser.T__115);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(4, SQLParser.INT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(32, SQLParser.AND);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(128, SQLParser.T__128);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(88, SQLParser.T__88);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.DFA2 sQLParser_DFA2_0 = sQLParser1.new DFA2(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", sQLParser_DFA2_0.getDescription());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(97, SQLParser.T__97);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(67, SQLParser.T__67);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(131, SQLParser.T__131);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(100, SQLParser.T__100);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(85, SQLParser.T__85);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(129, SQLParser.T__129);
      assertEquals(72, SQLParser.T__72);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(121, SQLParser.T__121);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(80, SQLParser.T__80);
      assertEquals(34, SQLParser.EQ);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(111, SQLParser.T__111);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(41, SQLParser.IS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(115, SQLParser.T__115);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(4, SQLParser.INT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(32, SQLParser.AND);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(128, SQLParser.T__128);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals(88, SQLParser.T__88);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertFalse(DFA.debug);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_DFA2_0);
      
      SQLParser.DFA2 sQLParser_DFA2_1 = sQLParser0.dfa2;
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", sQLParser_DFA2_1.getDescription());
      assertFalse(DFA.debug);
      assertFalse(sQLParser_DFA2_1.equals((Object)sQLParser_DFA2_0));
      assertNotNull(sQLParser_DFA2_1);
      assertNotSame(sQLParser_DFA2_1, sQLParser_DFA2_0);
      
      String string0 = sQLParser_DFA2_1.getDescription();
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", sQLParser_DFA2_1.getDescription());
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(97, SQLParser.T__97);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(67, SQLParser.T__67);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(131, SQLParser.T__131);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(100, SQLParser.T__100);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(85, SQLParser.T__85);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(129, SQLParser.T__129);
      assertEquals(72, SQLParser.T__72);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(121, SQLParser.T__121);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(80, SQLParser.T__80);
      assertEquals(34, SQLParser.EQ);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertFalse(DFA.debug);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser_DFA2_1.equals((Object)sQLParser_DFA2_0));
      assertNotNull(string0);
      assertEquals("95:1: command : ( ( create_table ';' ) | ( comment ';' ) | ( drop_table ';' ) | ( alter_table ';' ) | ( create_index ';' ) | ( drop_index ';' ) | ( create_sequence ';' ) | ( drop_sequence ';' ) );", string0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser_DFA2_1, sQLParser_DFA2_0);
      
      // Undeclared exception!
      try { 
        sQLParser1.ora_storage_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(107, (-745), (-745), 107, 335).when(tokenStream0).LA(anyInt());
      doReturn(107).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(96, SQLParser.T__96);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertNotNull(sQLParser0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState1);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(96, SQLParser.T__96);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(81, SQLParser.T__81);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(7, SQLParser.STRING);
      assertEquals(105, SQLParser.T__105);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.primary_return sQLParser_primary_return0 = new SQLParser.primary_return();
      assertNotNull(sQLParser_primary_return0);
      
      SQLParser sQLParser2 = new SQLParser(sQLParser1.input);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(96, SQLParser.T__96);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(81, SQLParser.T__81);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(7, SQLParser.STRING);
      assertEquals(105, SQLParser.T__105);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(31, SQLParser.OR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(86, SQLParser.T__86);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(118, SQLParser.T__118);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertNotNull(sQLParser2);
      
      SQLParser.type_return sQLParser_type_return0 = sQLParser2.type();
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(96, SQLParser.T__96);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(81, SQLParser.T__81);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(7, SQLParser.STRING);
      assertEquals(105, SQLParser.T__105);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(31, SQLParser.OR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(86, SQLParser.T__86);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(118, SQLParser.T__118);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser0.equals((Object)sQLParser2));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser1.equals((Object)sQLParser2));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertNotNull(sQLParser_type_return0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser0, sQLParser2);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertNotSame(sQLParser1, sQLParser0);
      assertNotSame(sQLParser1, sQLParser2);
      assertNotSame(sQLParser2, sQLParser0);
      assertNotSame(sQLParser2, sQLParser1);
      
      // Undeclared exception!
      try { 
        sQLParser1.drop_pk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.drop_index_return sQLParser_drop_index_return0 = new SQLParser.drop_index_return();
      assertNotNull(sQLParser_drop_index_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(125, SQLParser.T__125);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(128, SQLParser.T__128);
      assertEquals(89, SQLParser.T__89);
      assertEquals(67, SQLParser.T__67);
      assertEquals(121, SQLParser.T__121);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(88, SQLParser.T__88);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLParser.NULL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLParser.T__115);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(123, SQLParser.T__123);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(47, SQLParser.STAR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.null_comparison();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return1 = new SQLParser.foreign_key_constraint_return();
      assertFalse(sQLParser_foreign_key_constraint_return1.equals((Object)sQLParser_foreign_key_constraint_return0));
      assertNotNull(sQLParser_foreign_key_constraint_return1);
      
      Object object0 = sQLParser_foreign_key_constraint_return0.getTree();
      assertFalse(sQLParser_foreign_key_constraint_return0.equals((Object)sQLParser_foreign_key_constraint_return1));
      assertNull(object0);
      assertNotSame(sQLParser_foreign_key_constraint_return0, sQLParser_foreign_key_constraint_return1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(128).when(tokenStream0).LA(anyInt());
      doReturn(128).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(42, SQLParser.NULL);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(295, 1078, (-2656), 120).when(tokenStream0).LA(anyInt());
      doReturn(1078).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(37, SQLParser.GT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(65, SQLParser.T__65);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(37, SQLParser.GT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(65, SQLParser.T__65);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(112, SQLParser.T__112);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(57, SQLParser.DATE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(42, SQLParser.NULL);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser1.commands();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(37, SQLParser.GT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(65, SQLParser.T__65);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(112, SQLParser.T__112);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(57, SQLParser.DATE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(42, SQLParser.NULL);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser_commands_return0);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser1, sQLParser0);
      
      SQLParser sQLParser2 = new SQLParser(sQLParser1.input, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(37, SQLParser.GT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(65, SQLParser.T__65);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(112, SQLParser.T__112);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(57, SQLParser.DATE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(42, SQLParser.NULL);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(42, SQLParser.NULL);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(96, SQLParser.T__96);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(67, SQLParser.T__67);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(122, SQLParser.T__122);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertNotNull(sQLParser2);
      
      SQLParser.keyword_return sQLParser_keyword_return1 = sQLParser0.keyword();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(37, SQLParser.GT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(65, SQLParser.T__65);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertFalse(sQLParser0.equals((Object)sQLParser2));
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotNull(sQLParser_keyword_return1);
      assertNotSame(sQLParser0, sQLParser2);
      assertNotSame(sQLParser0, sQLParser1);
      assertNotSame(sQLParser_keyword_return1, sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return1.start;
      assertNull(token0);
      
      SQLParser sQLParser3 = new SQLParser(sQLParser2.input);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertFalse(sQLParser3.failed());
      assertEquals(0, sQLParser3.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser3.getBacktrackingLevel());
      assertEquals(0, sQLParser3.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser3.getGrammarFileName());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(130, SQLParser.T__130);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(37, SQLParser.GT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(65, SQLParser.T__65);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(112, SQLParser.T__112);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(57, SQLParser.DATE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(42, SQLParser.NULL);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(42, SQLParser.NULL);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(96, SQLParser.T__96);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(67, SQLParser.T__67);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(122, SQLParser.T__122);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(114, SQLParser.T__114);
      assertEquals(137, SQLParser.T__137);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(78, SQLParser.T__78);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(4, SQLParser.INT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(136, SQLParser.T__136);
      assertEquals(79, SQLParser.T__79);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(128, SQLParser.T__128);
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertFalse(sQLParser0.equals((Object)sQLParser2));
      assertFalse(sQLParser0.equals((Object)sQLParser1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser1.equals((Object)sQLParser2));
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertFalse(sQLParser3.equals((Object)sQLParser0));
      assertFalse(sQLParser3.equals((Object)sQLParser2));
      assertFalse(sQLParser3.equals((Object)sQLParser1));
      assertNotNull(sQLParser3);
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(110, SQLParser.T__110);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(69, SQLParser.T__69);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(106, SQLParser.T__106);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(57, SQLParser.DATE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.fractionDigits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(126, SQLParser.T__126);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(47, SQLParser.STAR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(34, SQLParser.EQ);
      assertEquals(98, SQLParser.T__98);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(114, SQLParser.T__114);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(129, SQLParser.T__129);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(92, SQLParser.T__92);
      assertEquals(7, SQLParser.STRING);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(116, SQLParser.T__116);
      assertEquals(46, SQLParser.SUB);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(109, SQLParser.T__109);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(76, SQLParser.T__76);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(64, SQLParser.T__64);
      assertEquals(40, SQLParser.LE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(37, SQLParser.GT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertNotNull(sQLParser0);
      
      SQLParser sQLParser1 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(90, SQLParser.T__90);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(115, SQLParser.T__115);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(43, SQLParser.IN);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(37, SQLParser.GT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(87, SQLParser.T__87);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(118, SQLParser.T__118);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertNotNull(sQLParser1);
      
      SQLParser sQLParser2 = new SQLParser((TokenStream) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser2.getGrammarFileName());
      assertEquals(0, sQLParser2.getBacktrackingLevel());
      assertEquals(0, sQLParser2.getRuleMemoizationCacheSize());
      assertFalse(sQLParser2.failed());
      assertEquals(0, sQLParser2.getNumberOfSyntaxErrors());
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(37, SQLParser.GT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(111, SQLParser.T__111);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(127, SQLParser.T__127);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(72, SQLParser.T__72);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(77, SQLParser.T__77);
      assertEquals(62, SQLParser.T__62);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(39, SQLParser.LT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertFalse(sQLParser2.equals((Object)sQLParser1));
      assertFalse(sQLParser2.equals((Object)sQLParser0));
      assertNotNull(sQLParser2);
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_sequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(61, SQLParser.T__61);
      assertEquals(39, SQLParser.LT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(4, SQLParser.INT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(38, SQLParser.GE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(46, SQLParser.SUB);
      assertEquals(87, SQLParser.T__87);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_mutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      recognizerSharedState0.errorRecovery = true;
      recognizerSharedState1.token = null;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertTrue(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(79, SQLParser.T__79);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(42, SQLParser.NULL);
      assertEquals(80, SQLParser.T__80);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(103, SQLParser.T__103);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(37, SQLParser.GT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(123, SQLParser.T__123);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.type();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      SQLParser.between_expression_return sQLParser_between_expression_return0 = new SQLParser.between_expression_return();
      assertNotNull(sQLParser_between_expression_return0);
      
      SQLParser.index_name_return sQLParser_index_name_return0 = new SQLParser.index_name_return();
      assertNotNull(sQLParser_index_name_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(132, 96, 132).when(tokenStream0).LA(anyInt());
      doReturn(132).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(42, SQLParser.NULL);
      assertEquals(126, SQLParser.T__126);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(133, SQLParser.T__133);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(57, SQLParser.DATE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(119, SQLParser.T__119);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(117, SQLParser.T__117);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(7, SQLParser.STRING);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(114, SQLParser.T__114);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.create_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLParser.null_comparison_return sQLParser_null_comparison_return0 = new SQLParser.null_comparison_return();
      assertNotNull(sQLParser_null_comparison_return0);
      
      SQLParser.constraint_detail_return sQLParser_constraint_detail_return0 = new SQLParser.constraint_detail_return();
      assertNotNull(sQLParser_constraint_detail_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.channel = 0;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(77, SQLParser.T__77);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(102, SQLParser.T__102);
      assertEquals(78, SQLParser.T__78);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(37, SQLParser.GT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(98, SQLParser.T__98);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(83, SQLParser.T__83);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertNotNull(sQLParser0);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(135, SQLParser.T__135);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(42, SQLParser.NULL);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(34, SQLParser.EQ);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertNotNull(sQLParser0);
      
      Object object0 = sQLParser_column_comment_details_return0.getTree();
      assertNull(object0);
      
      SQLParser.unique_constraint_return sQLParser_unique_constraint_return0 = new SQLParser.unique_constraint_return();
      assertNotNull(sQLParser_unique_constraint_return0);
      
      Object object1 = sQLParser_unique_constraint_return0.getTree();
      assertNull(object1);
      
      SQLParser.ora_storage_opt_return sQLParser_ora_storage_opt_return0 = new SQLParser.ora_storage_opt_return();
      assertNotNull(sQLParser_ora_storage_opt_return0);
      
      Object object2 = sQLParser_ora_storage_opt_return0.getTree();
      assertNull(object2);
  }
}
