/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:45:25 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.SortFilterModel;
import java.awt.HeadlessException;
import java.awt.MultipleGradientPaint;
import java.awt.Scrollbar;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.util.Stack;
import java.util.Vector;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowSorter;
import javax.swing.event.RowSorterEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SortFilterModel_ESTest extends SortFilterModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.sum(2, 2);
      assertEquals(4, int0);
      
      boolean boolean0 = vector0.add(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals("[3]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains(int0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) vector0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 3);
      assertEquals(3, objectArray0.length);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(3, objectArray0.length);
      assertNotNull(sortFilterModel0);
      
      Object[][] objectArray1 = new Object[2][0];
      objectArray1[0] = objectArray0;
      JTable jTable0 = new JTable(objectArray1, objectArray0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(jTable0);
      
      RowSorter<String> rowSorter0 = (RowSorter<String>) mock(RowSorter.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      intArray0[2] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      sortFilterModel0.setTable(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      sortFilterModel0.sortTable(2);
      assertEquals(3, objectArray0.length);
      
      int int1 = sortFilterModel0.getColumnCount();
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals(3, objectArray0.length);
      
      System.setCurrentTimeMillis((-547L));
      sortFilterModel0.sort(2);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(jTable0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.setTable(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      
      SortFilterModel sortFilterModel1 = new SortFilterModel(sortFilterModel0);
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertNotNull(sortFilterModel1);
      
      sortFilterModel1.sort(30);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertNotSame(sortFilterModel0, sortFilterModel1);
      assertNotSame(sortFilterModel1, sortFilterModel0);
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jTable0, 2306, 30, 362, 0, 300, 0, (-1022), 300, false, 300, (-1001), (-1609));
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals((-1022), mouseWheelEvent0.getYOnScreen());
      assertTrue(mouseWheelEvent0.isAltGraphDown());
      assertEquals(2306, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(300, mouseWheelEvent0.getY());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals(300, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals((-1609), mouseWheelEvent0.getWheelRotation());
      assertEquals((-1001), mouseWheelEvent0.getScrollAmount());
      assertEquals(30L, mouseWheelEvent0.getWhen());
      assertEquals(0, mouseWheelEvent0.getX());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(1610609, mouseWheelEvent0.getUnitsToScroll());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(42, mouseWheelEvent0.getModifiers());
      assertEquals(300, mouseWheelEvent0.getClickCount());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertNotNull(mouseWheelEvent0);
      
      sortFilterModel0.mouseClicked(mouseWheelEvent0);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals((-1022), mouseWheelEvent0.getYOnScreen());
      assertTrue(mouseWheelEvent0.isAltGraphDown());
      assertEquals(2306, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(300, mouseWheelEvent0.getY());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals(300, mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals((-1609), mouseWheelEvent0.getWheelRotation());
      assertEquals((-1001), mouseWheelEvent0.getScrollAmount());
      assertEquals(30L, mouseWheelEvent0.getWhen());
      assertEquals(0, mouseWheelEvent0.getX());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(1610609, mouseWheelEvent0.getUnitsToScroll());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertEquals(42, mouseWheelEvent0.getModifiers());
      assertEquals(300, mouseWheelEvent0.getClickCount());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertNotSame(sortFilterModel0, sortFilterModel1);
      
      String string0 = sortFilterModel1.getColumnName(30);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertEquals("AE", string0);
      assertNotNull(string0);
      assertNotSame(sortFilterModel0, sortFilterModel1);
      assertNotSame(sortFilterModel1, sortFilterModel0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      JTable jTable0 = new JTable();
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertNotNull(jTable0);
      
      sortFilterModel0.setTable(jTable0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      
      sortFilterModel0.sortTable((-277));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.isCellEditable(1685, 1685);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1685
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.sort(747);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.sort(3);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(3));
      
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertNotNull(jComboBox0);
      
      MouseEvent mouseEvent0 = new MouseEvent(jComboBox0, 3, 1731L, 3, (-201), 0, (-201), true, 3);
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(3, mouseEvent0.getID());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertTrue(mouseEvent0.isControlDown());
      assertEquals((-201), mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltDown());
      assertEquals(3, mouseEvent0.getButton());
      assertEquals((-201), mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(3, mouseEvent0.getModifiers());
      assertTrue(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(1731L, mouseEvent0.getWhen());
      assertFalse(mouseEvent0.isMetaDown());
      assertNotNull(mouseEvent0);
      
      sortFilterModel0.mouseReleased(mouseEvent0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(3, mouseEvent0.getID());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertTrue(mouseEvent0.isControlDown());
      assertEquals((-201), mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltDown());
      assertEquals(3, mouseEvent0.getButton());
      assertEquals((-201), mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(3, mouseEvent0.getModifiers());
      assertTrue(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(1731L, mouseEvent0.getWhen());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(vector0.contains(0));
      
      sortFilterModel0.mouseExited(mouseEvent0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(3, mouseEvent0.getID());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertTrue(mouseEvent0.isControlDown());
      assertEquals((-201), mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltDown());
      assertEquals(3, mouseEvent0.getButton());
      assertEquals((-201), mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(3, mouseEvent0.getModifiers());
      assertTrue(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(1731L, mouseEvent0.getWhen());
      assertFalse(mouseEvent0.isMetaDown());
      assertFalse(vector0.contains(0));
      
      int int0 = sortFilterModel0.getRowCount();
      assertEquals(0, int0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(0));
      
      int int1 = sortFilterModel0.getColumnCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      Object object0 = sortFilterModel0.getValueAt(300, 300);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 3);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(3));
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(3));
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.updateTable();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(3));
      
      sortFilterModel0.sortTable(3);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(3));
      
      JSlider jSlider0 = new JSlider();
      assertFalse(jSlider0.isFocusTraversalPolicyProvider());
      assertFalse(jSlider0.isFocusCycleRoot());
      assertTrue(jSlider0.getFocusTraversalKeysEnabled());
      assertFalse(jSlider0.isFocusTraversalPolicySet());
      assertFalse(jSlider0.getIgnoreRepaint());
      assertNotNull(jSlider0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-81);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-28), (byte) (-1), (byte) (-87), (byte) (-81)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jSlider0, 1447, 1447, 3, 176, (-178), (-216), 695, (-2145), false, (-2145), 1459, 15, 695);
      assertFalse(jSlider0.isFocusTraversalPolicyProvider());
      assertFalse(jSlider0.isFocusCycleRoot());
      assertTrue(jSlider0.getFocusTraversalKeysEnabled());
      assertFalse(jSlider0.isFocusTraversalPolicySet());
      assertFalse(jSlider0.getIgnoreRepaint());
      assertEquals(1447L, mouseWheelEvent0.getWhen());
      assertEquals((-216), mouseWheelEvent0.getXOnScreen());
      assertEquals(695, mouseWheelEvent0.getYOnScreen());
      assertEquals(3, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(1459, mouseWheelEvent0.getScrollAmount());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(176, mouseWheelEvent0.getX());
      assertEquals((-178), mouseWheelEvent0.getY());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(1447, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(15, mouseWheelEvent0.getWheelRotation());
      assertEquals((-2145), mouseWheelEvent0.getScrollType());
      assertEquals(21885, mouseWheelEvent0.getUnitsToScroll());
      assertEquals((-2145), mouseWheelEvent0.getClickCount());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertNotNull(mouseWheelEvent0);
      
      sortFilterModel0.mouseEntered(mouseWheelEvent0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(jSlider0.isFocusTraversalPolicyProvider());
      assertFalse(jSlider0.isFocusCycleRoot());
      assertTrue(jSlider0.getFocusTraversalKeysEnabled());
      assertFalse(jSlider0.isFocusTraversalPolicySet());
      assertFalse(jSlider0.getIgnoreRepaint());
      assertEquals(1447L, mouseWheelEvent0.getWhen());
      assertEquals((-216), mouseWheelEvent0.getXOnScreen());
      assertEquals(695, mouseWheelEvent0.getYOnScreen());
      assertEquals(3, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(1459, mouseWheelEvent0.getScrollAmount());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(176, mouseWheelEvent0.getX());
      assertEquals((-178), mouseWheelEvent0.getY());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(1447, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(15, mouseWheelEvent0.getWheelRotation());
      assertEquals((-2145), mouseWheelEvent0.getScrollType());
      assertEquals(21885, mouseWheelEvent0.getUnitsToScroll());
      assertEquals((-2145), mouseWheelEvent0.getClickCount());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertFalse(vector0.contains(1447));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = null;
      try {
        sortFilterModel0 = new SortFilterModel((TableModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(sortFilterModel0);
      
      Object object0 = sortFilterModel0.getValueAt(140, 0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(0));
      assertNull(object0);
      
      Object[][] objectArray0 = new Object[5][3];
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) defaultTableModel0;
      objectArray1[1] = (Object) defaultTableModel0;
      objectArray1[2] = (Object) defaultTableModel0;
      objectArray1[3] = (Object) sortFilterModel0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[8];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray2[0] = (Object) vector0;
      objectArray2[1] = null;
      objectArray2[2] = (Object) vector0;
      objectArray2[3] = (Object) sortFilterModel0;
      objectArray2[4] = (Object) sortFilterModel0;
      objectArray2[5] = null;
      objectArray2[6] = (Object) defaultTableModel0;
      objectArray2[7] = (Object) defaultTableModel0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[1];
      assertFalse(objectArray3.equals((Object)objectArray2));
      assertFalse(objectArray3.equals((Object)objectArray1));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray3[0] = object1;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[6];
      assertFalse(objectArray4.equals((Object)objectArray1));
      assertFalse(objectArray4.equals((Object)objectArray3));
      assertFalse(objectArray4.equals((Object)objectArray2));
      
      objectArray4[0] = (Object) vector0;
      objectArray4[1] = object1;
      objectArray4[2] = (Object) sortFilterModel0;
      objectArray4[3] = object1;
      objectArray4[4] = null;
      objectArray4[5] = (Object) sortFilterModel0;
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[8];
      assertFalse(objectArray5.equals((Object)objectArray4));
      assertFalse(objectArray5.equals((Object)objectArray1));
      assertFalse(objectArray5.equals((Object)objectArray3));
      assertFalse(objectArray5.equals((Object)objectArray2));
      
      Object object2 = sortFilterModel0.getValueAt((-451), (-1043));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(0));
      assertNull(object2);
      
      objectArray5[0] = null;
      objectArray5[1] = (Object) defaultTableModel0;
      objectArray5[2] = (Object) defaultTableModel0;
      objectArray5[3] = null;
      objectArray5[4] = object1;
      objectArray5[5] = null;
      objectArray5[6] = (Object) defaultTableModel0;
      objectArray5[7] = (Object) vector0;
      objectArray0[4] = objectArray5;
      defaultTableModel0.setDataVector(objectArray0, objectArray4);
      assertFalse(objectArray4.equals((Object)objectArray1));
      assertFalse(objectArray4.equals((Object)objectArray3));
      assertFalse(objectArray4.equals((Object)objectArray5));
      assertFalse(objectArray4.equals((Object)objectArray2));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(0));
      assertEquals(5, objectArray0.length);
      assertEquals(6, objectArray4.length);
      assertNotSame(objectArray4, objectArray1);
      assertNotSame(objectArray4, objectArray3);
      assertNotSame(objectArray4, objectArray5);
      assertNotSame(objectArray4, objectArray2);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.setValueAt((Object) null, 140, (-1043));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 140
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) sortFilterModel0;
      objectArray0[1] = (Object) sortFilterModel0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) defaultTableModel0;
      objectArray0[4] = (Object) defaultTableModel0;
      Vector<MultipleGradientPaint.CycleMethod> vector0 = new Vector<MultipleGradientPaint.CycleMethod>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      JTable jTable0 = new JTable(vector0, vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertNotNull(jTable0);
      
      sortFilterModel0.setTable(jTable0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      
      sortFilterModel0.sortTable((-1374));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      TableModelEvent tableModelEvent0 = new TableModelEvent(sortFilterModel0, 1702, 1702);
      assertNotNull(tableModelEvent0);
      
      sortFilterModel0.fireTableChanged(tableModelEvent0);
      Stack<MetalComboBoxEditor> stack0 = new Stack<MetalComboBoxEditor>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DefaultTableModel defaultTableModel1 = new DefaultTableModel(stack0, 3251);
      assertFalse(defaultTableModel1.equals((Object)defaultTableModel0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(defaultTableModel1);
      
      SortFilterModel sortFilterModel1 = new SortFilterModel(defaultTableModel1);
      assertFalse(defaultTableModel1.equals((Object)defaultTableModel0));
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(sortFilterModel1);
      
      Object object0 = sortFilterModel1.getValueAt(4, (-18));
      assertFalse(defaultTableModel1.equals((Object)defaultTableModel0));
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNull(object0);
      assertNotSame(defaultTableModel1, defaultTableModel0);
      assertNotSame(sortFilterModel1, sortFilterModel0);
      
      int int0 = sortFilterModel0.getColumnCount();
      assertFalse(defaultTableModel0.equals((Object)defaultTableModel1));
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertEquals(0, int0);
      assertNotSame(defaultTableModel0, defaultTableModel1);
      assertNotSame(sortFilterModel0, sortFilterModel1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 0);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.updateTable();
      int int1 = (-2315);
      String string0 = sortFilterModel0.getColumnName((-2315));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) sortFilterModel0;
      objectArray0[2] = (Object) sortFilterModel0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) defaultTableModel0;
      objectArray0[5] = (Object) sortFilterModel0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) defaultTableModel0;
      defaultTableModel0.addRow(objectArray0);
      assertEquals(8, objectArray0.length);
      
      String string1 = "";
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1512, 1512);
      assertNotNull(defaultTableModel0);
      
      defaultTableModel0.fireTableRowsUpdated((-618), (-3421));
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      defaultTableModel0.setColumnCount(0);
      sortFilterModel0.mouseClicked((MouseEvent) null);
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.setValueAt(object0, 0, (-618));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -618
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.sort(3);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(3));
      
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertNotNull(jComboBox0);
      
      MouseEvent mouseEvent0 = new MouseEvent(jComboBox0, 3, 3, 3, (-201), 0, (-201), true, 3);
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(3, mouseEvent0.getButton());
      assertEquals((-201), mouseEvent0.getX());
      assertTrue(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals((-201), mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltDown());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(0, mouseEvent0.getY());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(3, mouseEvent0.getModifiers());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(3, mouseEvent0.getID());
      assertEquals(3L, mouseEvent0.getWhen());
      assertTrue(mouseEvent0.isControlDown());
      assertNotNull(mouseEvent0);
      
      sortFilterModel0.mouseReleased(mouseEvent0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(3, mouseEvent0.getButton());
      assertEquals((-201), mouseEvent0.getX());
      assertTrue(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals((-201), mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltDown());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(0, mouseEvent0.getY());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(3, mouseEvent0.getModifiers());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(3, mouseEvent0.getID());
      assertEquals(3L, mouseEvent0.getWhen());
      assertTrue(mouseEvent0.isControlDown());
      assertFalse(vector0.contains(true));
      
      sortFilterModel0.mouseExited(mouseEvent0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(3, mouseEvent0.getButton());
      assertEquals((-201), mouseEvent0.getX());
      assertTrue(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals((-201), mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltDown());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(0, mouseEvent0.getY());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(3, mouseEvent0.getModifiers());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(3, mouseEvent0.getID());
      assertEquals(3L, mouseEvent0.getWhen());
      assertTrue(mouseEvent0.isControlDown());
      assertFalse(vector0.contains(true));
      
      int int0 = sortFilterModel0.getColumnCount();
      assertEquals(0, int0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(true));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 1023);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(1023));
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(1023));
      assertNotNull(sortFilterModel0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.sort(295);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 295 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(3020, 3020);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      int int0 = sortFilterModel0.getRowCount();
      assertEquals(3020, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      String string0 = sortFilterModel0.getColumnName(1435);
      assertEquals("BCF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      SortFilterModel sortFilterModel1 = new SortFilterModel(sortFilterModel0);
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertNotNull(sortFilterModel1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) defaultTableModel0;
      objectArray0[1] = (Object) sortFilterModel1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) sortFilterModel1;
      objectArray0[4] = (Object) defaultTableModel0;
      objectArray0[5] = (Object) defaultTableModel0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) sortFilterModel1;
      defaultTableModel0.addColumn((Object) sortFilterModel0, objectArray0);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertEquals(8, objectArray0.length);
      assertNotSame(sortFilterModel0, sortFilterModel1);
      
      sortFilterModel0.setSort(true);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertNotSame(sortFilterModel0, sortFilterModel1);
      
      SortFilterModel sortFilterModel2 = new SortFilterModel(sortFilterModel0);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertFalse(sortFilterModel2.equals((Object)sortFilterModel0));
      assertFalse(sortFilterModel2.equals((Object)sortFilterModel1));
      assertNotNull(sortFilterModel2);
      
      sortFilterModel2.sort(1478);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel2));
      assertFalse(sortFilterModel2.equals((Object)sortFilterModel0));
      assertFalse(sortFilterModel2.equals((Object)sortFilterModel1));
      assertNotSame(sortFilterModel0, sortFilterModel1);
      assertNotSame(sortFilterModel0, sortFilterModel2);
      assertNotSame(sortFilterModel2, sortFilterModel0);
      assertNotSame(sortFilterModel2, sortFilterModel1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      int int0 = 3;
      Integer integer0 = new Integer(3);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) vector0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) vector0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 2268);
      assertEquals(5, objectArray0.length);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(5, objectArray0.length);
      assertNotNull(sortFilterModel0);
      
      SortFilterModel sortFilterModel1 = new SortFilterModel(sortFilterModel0);
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertEquals(5, objectArray0.length);
      assertNotNull(sortFilterModel1);
      
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      assertNotNull(metalComboBoxEditor_UIResource0);
      
      int int1 = 2259;
      sortFilterModel0.setValueAt(objectArray0[1], int1, int0);
      assertFalse(int0 == int1);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertFalse(int1 == int0);
      assertEquals(5, objectArray0.length);
      assertNotSame(sortFilterModel0, sortFilterModel1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(sortFilterModel0);
      
      JTableHeader jTableHeader0 = new JTableHeader();
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertNotNull(jTableHeader0);
      
      JTable jTable0 = jTableHeader0.getTable();
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertNull(jTable0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.setTable((JTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      int int0 = sortFilterModel0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable();
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.setTable(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      
      sortFilterModel0.sortTable((-341));
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jTable0, 3, 894L, 3, (-341), 3, 3, 3, (-341), true, (-341), 7, 2226, 0.0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(3, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(3, mouseWheelEvent0.getYOnScreen());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(7, mouseWheelEvent0.getScrollAmount());
      assertEquals((-341), mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals((-341), mouseWheelEvent0.getClickCount());
      assertEquals((-341), mouseWheelEvent0.getX());
      assertEquals(894L, mouseWheelEvent0.getWhen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(15582, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(3, mouseWheelEvent0.getXOnScreen());
      assertEquals(3, mouseWheelEvent0.getY());
      assertEquals(3, mouseWheelEvent0.getModifiers());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(2226, mouseWheelEvent0.getWheelRotation());
      assertNotNull(mouseWheelEvent0);
      
      double double0 = mouseWheelEvent0.getPreciseWheelRotation();
      assertEquals(0.0, double0, 0.01);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(3, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(3, mouseWheelEvent0.getYOnScreen());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(7, mouseWheelEvent0.getScrollAmount());
      assertEquals((-341), mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals((-341), mouseWheelEvent0.getClickCount());
      assertEquals((-341), mouseWheelEvent0.getX());
      assertEquals(894L, mouseWheelEvent0.getWhen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(15582, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(3, mouseWheelEvent0.getXOnScreen());
      assertEquals(3, mouseWheelEvent0.getY());
      assertEquals(3, mouseWheelEvent0.getModifiers());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(2226, mouseWheelEvent0.getWheelRotation());
      
      sortFilterModel0.mouseClicked(mouseWheelEvent0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(3, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(3, mouseWheelEvent0.getYOnScreen());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(7, mouseWheelEvent0.getScrollAmount());
      assertEquals((-341), mouseWheelEvent0.getScrollType());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals((-341), mouseWheelEvent0.getClickCount());
      assertEquals((-341), mouseWheelEvent0.getX());
      assertEquals(894L, mouseWheelEvent0.getWhen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(15582, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(3, mouseWheelEvent0.getXOnScreen());
      assertEquals(3, mouseWheelEvent0.getY());
      assertEquals(3, mouseWheelEvent0.getModifiers());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(2226, mouseWheelEvent0.getWheelRotation());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1);
      assertEquals(2, objectArray0.length);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(2, objectArray0.length);
      assertNotNull(sortFilterModel0);
      
      int int0 = sortFilterModel0.getColumnCount();
      assertEquals(2, int0);
      assertEquals(2, objectArray0.length);
      
      Object object0 = sortFilterModel0.getValueAt((-1), (-1));
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.setValueAt("jZ5iRji.R-E@", 1, 300);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.fireTableRowsUpdated(0, 300);
      int int0 = sortFilterModel0.getRowCount();
      assertEquals(0, int0);
      
      Class<MetalComboBoxEditor> class0 = MetalComboBoxEditor.class;
      MetalComboBoxEditor[] metalComboBoxEditorArray0 = sortFilterModel0.getListeners(class0);
      assertEquals(0, metalComboBoxEditorArray0.length);
      assertNotNull(metalComboBoxEditorArray0);
      
      sortFilterModel0.sort(3);
      Class class1 = sortFilterModel0.getColumnClass(3);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      JTable jTable0 = new JTable();
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(jTable0);
      
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertNotNull(jTableHeader0);
      
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent(jTableHeader0, 3, 538L, 0, 0, 300, 1398, 2, 154, false, 1376);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.sum(2, (-893));
      assertEquals((-891), int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vector0;
      JTable jTable0 = new JTable();
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 1485);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains((-893)));
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains((-893)));
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.setTable(jTable0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(vector0.contains((-893)));
      
      MouseEvent mouseEvent0 = new MouseEvent(jTable0, 3, 1L, (-891), 2, 3, 833, true);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals(3, mouseEvent0.getID());
      assertFalse(mouseEvent0.isAltDown());
      assertTrue(mouseEvent0.isMetaDown());
      assertEquals(1L, mouseEvent0.getWhen());
      assertFalse(mouseEvent0.isControlDown());
      assertEquals((-2147483643), mouseEvent0.getModifiers());
      assertEquals(2, mouseEvent0.getX());
      assertEquals(833, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(3, mouseEvent0.getY());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertTrue(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertNotNull(mouseEvent0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.mouseClicked(mouseEvent0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 3);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(3));
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(3));
      assertNotNull(sortFilterModel0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.sort(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      JTable jTable0 = new JTable();
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultTableModel0;
      objectArray0[1] = (Object) stack0;
      objectArray0[2] = (Object) jTable0;
      objectArray0[3] = (Object) jTable0;
      defaultTableModel0.addColumn((Object) integer0, objectArray0);
      assertEquals(4, objectArray0.length);
      
      SortFilterModel sortFilterModel1 = new SortFilterModel(defaultTableModel0);
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertNotNull(sortFilterModel1);
      
      sortFilterModel1.sort(0);
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertNotSame(sortFilterModel1, sortFilterModel0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1485, 1485);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      int int0 = sortFilterModel0.getColumnCount();
      assertEquals(1485, int0);
      
      String string0 = sortFilterModel0.getColumnName(1485);
      assertEquals("BED", string0);
      assertNotNull(string0);
      
      Object object0 = sortFilterModel0.getValueAt(1485, 1485);
      assertNull(object0);
      
      sortFilterModel0.sortTable(1485);
      Class class0 = sortFilterModel0.getColumnClass(341);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      int int1 = sortFilterModel0.getRowCount();
      assertTrue(int1 == int0);
      assertEquals(1485, int1);
      
      Class class1 = sortFilterModel0.getColumnClass(1493);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      assertSame(class1, class0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.isCellEditable(1493, 1500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1493
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)60}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(sortFilterModel0);
      
      Vector<Integer> vector1 = new Vector<Integer>();
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      
      JTable jTable0 = new JTable(vector1, vector0);
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      sortFilterModel0.setTable(jTable0);
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.sortTable(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.mouseClicked((MouseEvent) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.sort(3);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(3));
      
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertNotNull(jComboBox0);
      
      MouseEvent mouseEvent0 = new MouseEvent(jComboBox0, 3, 3, 3, (-201), 0, (-201), true, 3);
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertFalse(mouseEvent0.isAltDown());
      assertEquals((-201), mouseEvent0.getClickCount());
      assertEquals((-201), mouseEvent0.getX());
      assertTrue(mouseEvent0.isShiftDown());
      assertEquals(3, mouseEvent0.getModifiers());
      assertEquals(0, mouseEvent0.getY());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(3, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(3, mouseEvent0.getID());
      assertTrue(mouseEvent0.isControlDown());
      assertEquals(3L, mouseEvent0.getWhen());
      assertNotNull(mouseEvent0);
      
      sortFilterModel0.mouseReleased(mouseEvent0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertFalse(mouseEvent0.isAltDown());
      assertEquals((-201), mouseEvent0.getClickCount());
      assertEquals((-201), mouseEvent0.getX());
      assertTrue(mouseEvent0.isShiftDown());
      assertEquals(3, mouseEvent0.getModifiers());
      assertEquals(0, mouseEvent0.getY());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(3, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(3, mouseEvent0.getID());
      assertTrue(mouseEvent0.isControlDown());
      assertEquals(3L, mouseEvent0.getWhen());
      assertFalse(vector0.contains(true));
      
      int int0 = new Integer(3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      defaultTableModel0.addColumn(object0, objectArray0);
      assertEquals(8, objectArray0.length);
      
      SortFilterModel sortFilterModel1 = new SortFilterModel(sortFilterModel0);
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertNotNull(sortFilterModel1);
      
      sortFilterModel1.sort(1478);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertNotSame(sortFilterModel0, sortFilterModel1);
      assertNotSame(sortFilterModel1, sortFilterModel0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      JTable jTable0 = new JTable();
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      sortFilterModel0.setTable(jTable0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      
      sortFilterModel0.setSort(false);
      sortFilterModel0.sortTable((-277));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Object[][]) null, (Object[]) null);
      assertNotNull(defaultTableModel0);
      
      int int0 = defaultTableModel0.getRowCount();
      assertEquals(0, int0);
      
      Class<MetalComboBoxEditor> class0 = MetalComboBoxEditor.class;
      MetalComboBoxEditor[] metalComboBoxEditorArray0 = defaultTableModel0.getListeners(class0);
      assertEquals(0, metalComboBoxEditorArray0.length);
      assertNotNull(metalComboBoxEditorArray0);
      
      defaultTableModel0.fireTableRowsInserted(0, 0);
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      int int1 = sortFilterModel0.findColumn("Id*n&&5p|FG`Fj)J");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = sortFilterModel0.getColumnCount();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      Object object0 = sortFilterModel0.getValueAt(30, 30);
      assertNull(object0);
      
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertTrue(defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTableCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTableCellRenderer0.getIgnoreRepaint());
      assertNotNull(defaultTableCellRenderer0);
      
      sortFilterModel0.fireTableRowsUpdated(0, 30);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTableCellRenderer0, 2, (-1), 367, 735, 2922, (-1), 0, 0, true, 0, 367, (-1));
      assertTrue(defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTableCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals((-367), mouseWheelEvent0.getUnitsToScroll());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(2922, mouseWheelEvent0.getY());
      assertTrue(mouseWheelEvent0.isAltGraphDown());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertEquals(735, mouseWheelEvent0.getX());
      assertEquals((-1), mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertEquals((-1L), mouseWheelEvent0.getWhen());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(2, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(47, mouseWheelEvent0.getModifiers());
      assertEquals((-1), mouseWheelEvent0.getWheelRotation());
      assertEquals(367, mouseWheelEvent0.getScrollAmount());
      assertNotNull(mouseWheelEvent0);
      
      sortFilterModel0.mousePressed(mouseWheelEvent0);
      assertTrue(defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTableCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals((-367), mouseWheelEvent0.getUnitsToScroll());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(2922, mouseWheelEvent0.getY());
      assertTrue(mouseWheelEvent0.isAltGraphDown());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertEquals(735, mouseWheelEvent0.getX());
      assertEquals((-1), mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertEquals((-1L), mouseWheelEvent0.getWhen());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(2, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(47, mouseWheelEvent0.getModifiers());
      assertEquals((-1), mouseWheelEvent0.getWheelRotation());
      assertEquals(367, mouseWheelEvent0.getScrollAmount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.updateTable();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      assertNotNull(listSelectionModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertNotNull(jTable0);
      
      sortFilterModel0.removeTableModelListener(jTable0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      
      int int0 = (-1);
      int int1 = 963;
      sortFilterModel0.setSort(true);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        sortFilterModel0.isCellEditable((-1), 963);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      int int0 = (-1319);
      sortFilterModel0.sort((-1319));
      int int1 = 0;
      sortFilterModel0.sortTable(0);
      Object object0 = sortFilterModel0.getValueAt((-1319), (-1319));
      assertNull(object0);
      
      String string0 = sortFilterModel0.getColumnName(0);
      assertEquals("A", string0);
      assertNotNull(string0);
      
      int int2 = sortFilterModel0.getColumnCount();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertTrue(defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      assertFalse(defaultListCellRenderer_UIResource1.equals((Object)defaultListCellRenderer_UIResource0));
      assertFalse(defaultListCellRenderer_UIResource1.isFocusTraversalPolicyProvider());
      assertTrue(defaultListCellRenderer_UIResource1.getFocusTraversalKeysEnabled());
      assertFalse(defaultListCellRenderer_UIResource1.isFocusCycleRoot());
      assertFalse(defaultListCellRenderer_UIResource1.isFocusTraversalPolicySet());
      assertFalse(defaultListCellRenderer_UIResource1.getIgnoreRepaint());
      assertNotNull(defaultListCellRenderer_UIResource1);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        defaultListCellRenderer_UIResource0.getListCellRendererComponent((JList<?>) null, defaultListCellRenderer_UIResource1, 0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DefaultListCellRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      Vector vector0 = defaultTableModel0.getDataVector();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.setTable((JTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.sum(2, 0);
      assertEquals(2, int0);
      
      boolean boolean0 = vector0.add(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[3]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains(int0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) vector0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 3);
      assertEquals(3, objectArray0.length);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(3, objectArray0.length);
      assertNotNull(sortFilterModel0);
      
      Object[][] objectArray1 = new Object[2][0];
      objectArray1[0] = objectArray0;
      JTable jTable0 = new JTable(objectArray1, objectArray0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(jTable0);
      
      RowSorter<String> rowSorter0 = (RowSorter<String>) mock(RowSorter.class, new ViolatedAssumptionAnswer());
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      int[] intArray0 = new int[4];
      intArray0[2] = 0;
      intArray0[2] = 3;
      intArray0[3] = 3;
      RowSorterEvent rowSorterEvent0 = new RowSorterEvent(rowSorter0, rowSorterEvent_Type0, intArray0);
      assertArrayEquals(new int[] {0, 0, 3, 3}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(rowSorterEvent0);
      
      RowSorterEvent.Type rowSorterEvent_Type1 = rowSorterEvent0.getType();
      assertEquals(RowSorterEvent.Type.SORT_ORDER_CHANGED, rowSorterEvent_Type1);
      assertArrayEquals(new int[] {0, 0, 3, 3}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(rowSorterEvent_Type1, rowSorterEvent_Type0);
      assertSame(rowSorterEvent_Type0, rowSorterEvent_Type1);
      
      jTable0.sorterChanged(rowSorterEvent0);
      assertArrayEquals(new int[] {0, 0, 3, 3}, intArray0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertEquals(4, intArray0.length);
      assertSame(rowSorterEvent_Type0, rowSorterEvent_Type1);
      
      sortFilterModel0.setTable(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      sortFilterModel0.sortTable(2);
      assertEquals(3, objectArray0.length);
      
      int int1 = sortFilterModel0.getColumnCount();
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals(3, objectArray0.length);
      
      System.setCurrentTimeMillis((-547L));
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jTable0, 2, 3, 3, 2, (-2412), 991, 2, 2, false, 523, 20, 2, 3);
      assertFalse(mouseWheelEvent0.isConsumed());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(2, mouseWheelEvent0.getYOnScreen());
      assertEquals(20, mouseWheelEvent0.getScrollAmount());
      assertEquals(2, mouseWheelEvent0.getWheelRotation());
      assertEquals(3L, mouseWheelEvent0.getWhen());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals(40, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(523, mouseWheelEvent0.getScrollType());
      assertEquals(2, mouseWheelEvent0.getID());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertEquals((-2412), mouseWheelEvent0.getY());
      assertEquals(2, mouseWheelEvent0.getX());
      assertEquals(991, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(3, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(2, mouseWheelEvent0.getClickCount());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(mouseWheelEvent0);
      
      sortFilterModel0.mouseClicked(mouseWheelEvent0);
      assertFalse(mouseWheelEvent0.isConsumed());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals(2, mouseWheelEvent0.getYOnScreen());
      assertEquals(20, mouseWheelEvent0.getScrollAmount());
      assertEquals(2, mouseWheelEvent0.getWheelRotation());
      assertEquals(3L, mouseWheelEvent0.getWhen());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertEquals(40, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(523, mouseWheelEvent0.getScrollType());
      assertEquals(2, mouseWheelEvent0.getID());
      assertFalse(mouseWheelEvent0.isAltDown());
      assertEquals((-2412), mouseWheelEvent0.getY());
      assertEquals(2, mouseWheelEvent0.getX());
      assertEquals(991, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(3, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(2, mouseWheelEvent0.getClickCount());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vector0.add(integer0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[3]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(3));
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 3);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[3]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(3));
      assertNotNull(defaultTableModel0);
      
      TableModelListener[] tableModelListenerArray0 = defaultTableModel0.getTableModelListeners();
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[3]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(3));
      assertEquals(0, tableModelListenerArray0.length);
      assertNotNull(tableModelListenerArray0);
      
      defaultTableModel0.setColumnCount(1016);
      assertEquals(1016, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1016, vector0.size());
      assertFalse(vector0.contains(1016));
      assertTrue(vector0.contains(3));
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(1016, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1016, vector0.size());
      assertFalse(vector0.contains(1016));
      assertTrue(vector0.contains(3));
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.mouseClicked((MouseEvent) null);
      assertEquals(1016, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1016, vector0.size());
      assertFalse(vector0.contains(1016));
      assertTrue(vector0.contains(3));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      sortFilterModel0.updateTable();
      assertEquals(1016, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1016, vector0.size());
      assertFalse(vector0.contains(1016));
      assertTrue(vector0.contains(3));
      
      SortFilterModel sortFilterModel1 = new SortFilterModel(sortFilterModel0);
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertEquals(1016, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1016, vector0.size());
      assertFalse(vector0.contains(1016));
      assertTrue(vector0.contains(3));
      assertNotNull(sortFilterModel1);
      
      sortFilterModel1.sort(3);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
      assertFalse(sortFilterModel1.equals((Object)sortFilterModel0));
      assertEquals(1016, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1016, vector0.size());
      assertFalse(vector0.contains(1016));
      assertTrue(vector0.contains(3));
      assertNotSame(sortFilterModel0, sortFilterModel1);
      assertNotSame(sortFilterModel1, sortFilterModel0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertNotNull(jTable0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.setTable(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        sortFilterModel0.mouseClicked((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Object[][]) null, (Object[]) null);
      assertNotNull(defaultTableModel0);
      
      int int0 = defaultTableModel0.getRowCount();
      assertEquals(0, int0);
      
      Class<MetalComboBoxEditor> class0 = MetalComboBoxEditor.class;
      MetalComboBoxEditor[] metalComboBoxEditorArray0 = defaultTableModel0.getListeners(class0);
      assertEquals(0, metalComboBoxEditorArray0.length);
      assertNotNull(metalComboBoxEditorArray0);
      
      defaultTableModel0.fireTableRowsInserted(0, 0);
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      int int1 = sortFilterModel0.findColumn("Id*n&&5p|FG`Fj)J");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = sortFilterModel0.getColumnCount();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = sortFilterModel0.getColumnCount();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      Object object0 = sortFilterModel0.getValueAt(30, 30);
      assertNull(object0);
      
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertFalse(defaultTableCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTableCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertTrue(defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertNotNull(defaultTableCellRenderer0);
      
      int int4 = defaultTableCellRenderer0.getDisplayedMnemonic();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      assertFalse(defaultTableCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTableCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertTrue(defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      
      sortFilterModel0.fireTableRowsUpdated(0, 30);
      MetalComboBoxEditor[] metalComboBoxEditorArray1 = sortFilterModel0.getListeners(class0);
      assertFalse(metalComboBoxEditorArray1.equals((Object)metalComboBoxEditorArray0));
      assertEquals(0, metalComboBoxEditorArray1.length);
      assertNotNull(metalComboBoxEditorArray1);
      assertNotSame(metalComboBoxEditorArray1, metalComboBoxEditorArray0);
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTableCellRenderer0, 2, (-1), 367, 735, 2922, 0, 0, 0, true, 0, 367, (-1));
      assertFalse(defaultTableCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTableCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertTrue(defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(2, mouseWheelEvent0.getID());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals(735, mouseWheelEvent0.getX());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertTrue(mouseWheelEvent0.isAltGraphDown());
      assertEquals((-367), mouseWheelEvent0.getUnitsToScroll());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(47, mouseWheelEvent0.getModifiers());
      assertEquals((-1), mouseWheelEvent0.getWheelRotation());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(367, mouseWheelEvent0.getScrollAmount());
      assertEquals(2922, mouseWheelEvent0.getY());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals((-1L), mouseWheelEvent0.getWhen());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertNotNull(mouseWheelEvent0);
      
      sortFilterModel0.mousePressed(mouseWheelEvent0);
      assertFalse(defaultTableCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTableCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertTrue(defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertEquals(2, mouseWheelEvent0.getID());
      assertEquals(0, mouseWheelEvent0.getScrollType());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals(735, mouseWheelEvent0.getX());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertTrue(mouseWheelEvent0.isAltGraphDown());
      assertEquals((-367), mouseWheelEvent0.getUnitsToScroll());
      assertEquals(0, mouseWheelEvent0.getClickCount());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(47, mouseWheelEvent0.getModifiers());
      assertEquals((-1), mouseWheelEvent0.getWheelRotation());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(367, mouseWheelEvent0.getScrollAmount());
      assertEquals(2922, mouseWheelEvent0.getY());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals((-1L), mouseWheelEvent0.getWhen());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      
      sortFilterModel0.sortTable((-1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      int int0 = 1023;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 1023);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(1023));
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(1023));
      assertNotNull(sortFilterModel0);
      
      Object object0 = sortFilterModel0.getValueAt(1023, 1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(1023));
      assertNull(object0);
      
      boolean boolean0 = sortFilterModel0.isCellEditable(1, 1);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(1023));
      
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar(1507);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.updateTable();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        sortFilterModel0.isCellEditable((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1512, 1512);
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      sortFilterModel0.updateTable();
      sortFilterModel0.getValueAt((-1), (-618));
      boolean boolean0 = sortFilterModel0.isCellEditable(1445, (-3421));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      Class class0 = sortFilterModel0.getColumnClass(979);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 983);
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      Object object0 = sortFilterModel0.getValueAt(300, 300);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 738;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(738, 738);
      defaultTableModel0.getColumnName(1826);
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      boolean boolean0 = false;
      sortFilterModel0.setSort(false);
      sortFilterModel0.setSort(false);
      sortFilterModel0.updateTable();
      int int1 = (-1);
      Class class0 = sortFilterModel0.getColumnClass((-1));
      Object[][] objectArray0 = new Object[1][4];
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) sortFilterModel0;
      objectArray1[1] = (Object) class0;
      objectArray0[0] = objectArray1;
      DefaultTableModel defaultTableModel1 = new DefaultTableModel(objectArray0, objectArray1);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel1, defaultTableColumnModel0, (ListSelectionModel) null);
      sortFilterModel0.setTable(jTable0);
      int int2 = 2080;
      // Undeclared exception!
      try { 
        defaultTableModel1.setValueAt((Object) null, (-2733), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      sortFilterModel0.sortTable(6);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      JTable jTable0 = new JTable();
      sortFilterModel0.setTable(jTable0);
      // Undeclared exception!
      try { 
        sortFilterModel0.mouseClicked((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      JTable jTable0 = new JTable();
      sortFilterModel0.setTable(jTable0);
      // Undeclared exception!
      try { 
        sortFilterModel0.sortTable(29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      // Undeclared exception!
      try { 
        sortFilterModel0.setValueAt(metalComboBoxEditor_UIResource0, 300, 300);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 300
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      sortFilterModel0.setSort(false);
      sortFilterModel0.getColumnName(1435);
      int int0 = sortFilterModel0.getRowCount();
      assertEquals(0, int0);
  }
}
