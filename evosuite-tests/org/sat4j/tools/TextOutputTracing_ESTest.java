/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:25:54 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.TextOutputTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextOutputTracing_ESTest extends TextOutputTracing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, ".lzma");
      textOutputTracing0.adding(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VecInt vecInt0 = new VecInt(1666, (-271));
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredClause(vecInt0);
      // Undeclared exception!
      try { 
        textOutputTracing0.learn(constr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -271
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2845);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(hashMap0);
      textOutputTracing0.adding(2845);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(0.0, 657);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, arminRestarts0);
      GroupClauseSelectorSolver<Solver<ClausalDataStructureWL>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      Integer integer0 = groupClauseSelectorSolver0.getGroupVar(iVecInt0, 3932);
      hashMap0.put(integer0, "");
      textOutputTracing0.adding((-1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      textOutputTracing0.adding((-768));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, ClausalDataStructureWL> hashMap0 = new HashMap<Integer, ClausalDataStructureWL>();
      TextOutputTracing<ClausalDataStructureWL> textOutputTracing0 = new TextOutputTracing<ClausalDataStructureWL>(hashMap0);
      textOutputTracing0.learnUnit((-2211));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      Constr constr0 = Constr.TAUTOLOGY;
      textOutputTracing0.delete(constr0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      textOutputTracing0.restarting();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder(0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
      GroupClauseSelectorSolver<Solver<ClausalDataStructureWL>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(map0);
      Lbool lbool0 = Lbool.UNDEFINED;
      textOutputTracing0.end(lbool0);
      assertEquals("U", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, ClausalDataStructureWL> hashMap0 = new HashMap<Integer, ClausalDataStructureWL>();
      TextOutputTracing<ClausalDataStructureWL> textOutputTracing0 = new TextOutputTracing<ClausalDataStructureWL>(hashMap0);
      textOutputTracing0.backtracking((-2211));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GroupClauseSelectorSolver<Solver<ClausalDataStructureWL>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Solver<ClausalDataStructureWL>>((Solver<ClausalDataStructureWL>) null);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(map0);
      int[] intArray0 = new int[1];
      textOutputTracing0.solutionFound(intArray0, groupClauseSelectorSolver0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.enqueueing((-108), (IConstr) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>((Map<Integer, String>) null);
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-1610.0));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, eMARestarts0);
      textOutputTracing0.init(solver0);
      assertEquals(2147483, solver0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.conflictFound((-1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, ClausalDataStructureWL> hashMap0 = new HashMap<Integer, ClausalDataStructureWL>();
      TextOutputTracing<ClausalDataStructureWL> textOutputTracing0 = new TextOutputTracing<ClausalDataStructureWL>(hashMap0);
      textOutputTracing0.start();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.beginLoop();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.conflictFound((IConstr) null, 1, 1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.learn((IConstr) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.cleaning();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.assuming(1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, ClausalDataStructureWL> hashMap0 = new HashMap<Integer, ClausalDataStructureWL>();
      TextOutputTracing<ClausalDataStructureWL> textOutputTracing0 = new TextOutputTracing<ClausalDataStructureWL>(hashMap0);
      textOutputTracing0.backjump(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, ClausalDataStructureWL> hashMap0 = new HashMap<Integer, ClausalDataStructureWL>();
      TextOutputTracing<ClausalDataStructureWL> textOutputTracing0 = new TextOutputTracing<ClausalDataStructureWL>(hashMap0);
      textOutputTracing0.propagating(907);
  }
}
