/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:27:31 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WLClause_ESTest extends WLClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.clear();
      vecInt0.unsafePush(27);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      vecInt0.unsafePush((-3873));
      int int0 = originalWLClause0.getAssertionLevel(vecInt0, 27);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      VecInt vecInt1 = new VecInt();
      originalWLClause0.calcReasonOnTheFly(0, vecInt0, vecInt1);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(1199);
      vecInt0.unsafePush((-3873));
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.hashCode();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      OriginalWLClause originalWLClause1 = new OriginalWLClause(vecInt0, (ILits) null);
      boolean boolean0 = originalWLClause0.equals(originalWLClause1);
      assertEquals(0.0, originalWLClause1.getActivity(), 0.01);
      assertFalse(originalWLClause1.equals((Object)originalWLClause0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.rescaleBy(0.0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(933, 0).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(11);
      vecInt0.unsafePush(771);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.propagate((UnitPropagationListener) null, 583);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(25);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt1.clear();
      vecInt1.iterator();
      vecInt0.ensure(11);
      vecInt1.iterator();
      vecInt0.clear();
      vecInt0.ensure(14);
      vecInt1.unsafePush((-1810));
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(933, 0).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, true, false).when(iLits0).isFalsified(anyInt());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      originalWLClause0.propagate((UnitPropagationListener) null, 0);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason((-356), vecInt1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt1.clear();
      vecInt1.iterator();
      vecInt0.ensure(14);
      vecInt1.unsafePush(14);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(933, 0).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isFalsified(anyInt());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      originalWLClause0.propagate((UnitPropagationListener) null, 0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(14, 0).when(iVecInt0).size();
      Lits lits0 = new Lits();
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("R$QMq,YXagn");
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, lits0);
      String string0 = learntWLClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] ", string0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(14, 0).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      String string0 = originalWLClause0.toString();
      assertEquals("0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] 0[?] ", string0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-1810));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iLits0).valueToString(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      Constr constr0 = originalWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      Constr constr0 = learntWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-1810));
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.size();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      originalWLClause0.getVocabulary();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(14);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      int[] intArray0 = originalWLClause0.getLits();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertArrayEquals(new int[] {14}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(63);
      vecInt0.unsafePush((-3873));
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      vecInt0.shrinkTo(27);
      vecInt0.insertFirst(57);
      int int0 = originalWLClause0.getAssertionLevel(vecInt0, 57);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.incActivity(362.27);
      double double0 = learntWLClause0.getActivity();
      assertEquals(362.27, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.incActivity((-1.0));
      double double0 = learntWLClause0.getActivity();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      originalWLClause0.get(0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt(24, 24);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      originalWLClause0.get(0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.pop();
      vecInt0.unsafePush((-3864));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      originalWLClause0.get(0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push((-1));
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.getAssertionLevel((IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.insertFirst((-3873));
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReasonOnTheFly(4, vecInt0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      vecInt0.insertFirst(1);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReasonOnTheFly(1, vecInt0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason((-1417), vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(3622);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(933, 0).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason(0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3622
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[11];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.calcReason((-1), vecInt0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.size();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(100);
      vecInt0.unsafePush((-3873));
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      vecInt0.shrinkTo(27);
      int int0 = originalWLClause0.getAssertionLevel(vecInt0, 2568);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      vecInt0.insertFirst(2092);
      // Undeclared exception!
      try { 
        originalWLClause0.getAssertionLevel(vecInt0, (-1869));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(14);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      boolean boolean0 = originalWLClause0.isSatisfied();
      assertTrue(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(14, 0).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      boolean boolean0 = originalWLClause0.isSatisfied();
      assertFalse(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[19];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      OriginalWLClause originalWLClause1 = new OriginalWLClause(vecInt0, lits0);
      boolean boolean0 = originalWLClause1.equals(originalWLClause0);
      assertFalse(boolean0);
      assertEquals(0.0, originalWLClause1.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      boolean boolean0 = originalWLClause0.equals(originalWLClause0);
      assertTrue(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      boolean boolean0 = originalWLClause0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = originalWLClause0.equals(learntWLClause0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(933, 0).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(933, 0).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isFalsified(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      originalWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("Z#jb*/?L");
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(1199);
      vecInt0.unsafePush((-3873));
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.toString((VarMapper) null);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(1199);
      vecInt0.unsafePush((-3873));
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.toString();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      boolean boolean0 = originalWLClause0.locked();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(933, 0).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      boolean boolean0 = originalWLClause0.propagate((UnitPropagationListener) null, 0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-1810));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      boolean boolean0 = originalWLClause0.simplify();
      assertFalse(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(14);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      boolean boolean0 = originalWLClause0.simplify();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 1).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = null;
      try {
        originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.getVocabulary();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      int int0 = originalWLClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.canBePropagatedMultipleTimes();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.setActivity((-1751.0038606));
      assertEquals((-1751.0038606), originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      double double0 = learntWLClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.rescaleBy(2983.2178027725);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalWLClause0.get((-1474));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1474
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.getLits();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }
}
