/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:44:54 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.encoding.Commander;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Commander_ESTest extends Commander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(dimacsOutputSolver0).primeImplicant();
      doReturn(0).when(dimacsOutputSolver0).nextFreeVarId(anyBoolean());
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      negationDecorator0.primeImplicant();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      iVecInt0.clear();
      iVecInt0.iterator();
      commander0.addAtLeastOne(negationDecorator0, iVecInt0);
      // Undeclared exception!
      try { 
        commander0.addExactly(negationDecorator0, iVecInt0, 281);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, true);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(903, 903, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      iVecInt0.last();
      IConstr iConstr0 = commander0.addAtMostOne(fullClauseSelectorSolver0, iVecInt0);
      int int0 = 0;
      IConstr iConstr1 = commander0.addExactly(dimacsOutputSolver0, iVecInt0, int0);
      assertNotSame(iConstr1, iConstr0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(dimacsOutputSolver0).primeImplicant();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      negationDecorator0.primeImplicant();
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(negationDecorator0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dimacsOutputSolver0).isSatisfiable(anyBoolean());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(dimacsOutputSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(264, 264, 1883, 1).when(dimacsOutputSolver0).nVars();
      doReturn(1883, 0, 0, 0, 0).when(dimacsOutputSolver0).nextFreeVarId(anyBoolean());
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      clausalCardinalitiesDecorator0.nextFreeVarId(true);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(clausalCardinalitiesDecorator0);
      VecInt vecInt0 = new VecInt(1883);
      vecInt0.clear();
      VecInt vecInt1 = new VecInt();
      vecInt1.size();
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.push(2492);
      vecInt1.iterator();
      clausalCardinalitiesDecorator0.isSatisfiable(true);
      VecInt vecInt2 = new VecInt(2492, 1);
      // Undeclared exception!
      commander0.addAtMostOne(minimal4CardinalityModel0, vecInt2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, true);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(903, 903, (-2336)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      iVecInt0.last();
      commander0.addExactlyOne(fullClauseSelectorSolver0, iVecInt0);
      assertEquals(1, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, true);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      iVecInt0.push((-688));
      iVecInt0.iterator();
      IVecInt iVecInt1 = iVecInt0.push(0);
      IConstr iConstr0 = commander0.addAtMostOne(dimacsOutputSolver0, iVecInt1);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Commander commander0 = new Commander();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "}{'go,nml0Ce9<9.6";
      stringArray0[2] = "check every ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      ManyCore<DimacsOutputSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsOutputSolver>((ASolverFactory<DimacsOutputSolver>) null, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Commander commander0 = new Commander();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      iVecInt0.clear();
      iVecInt0.iterator();
      // Undeclared exception!
      try { 
        commander0.addExactly((ISolver) null, iVecInt0, 102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dimacsOutputSolver0).isVerbose();
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(dimacsOutputSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(30, 30, 30, 30, 30).when(dimacsOutputSolver0).nVars();
      doReturn(1, 0, 0).when(dimacsOutputSolver0).nextFreeVarId(anyBoolean());
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      clausalCardinalitiesDecorator0.isVerbose();
      clausalCardinalitiesDecorator0.nextFreeVarId(true);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(clausalCardinalitiesDecorator0);
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      VecInt vecInt1 = new VecInt();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-688);
      intArray0[2] = 30;
      intArray0[3] = (-688);
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.push(0);
      vecInt1.iterator();
      vecInt0.push(32);
      Commander commander1 = new Commander();
      IConstr iConstr0 = commander1.addAtMostOne(clausalCardinalitiesDecorator0, vecInt2);
      assertEquals(12, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Commander commander0 = new Commander();
      int[] intArray0 = new int[0];
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(dimacsOutputSolver0).primeImplicant();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      negationDecorator0.primeImplicant();
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(negationDecorator0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Commander", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Commander commander0 = new Commander();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "l.OkrkZOd!F!) v)E3L";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "*u,Pp[";
      stringArray0[5] = "org.sat4j.tools.encoding.Commander";
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[7];
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(dimacsOutputSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[2] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[3] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[4] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[5] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[6] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(false, stringArray0, dimacsOutputSolverArray0);
      manyCore0.setExpectedNumberOfClauses((-403));
      dimacsOutputSolver0.reset();
      dimacsOutputSolver0.clearLearntClauses();
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt1.size();
      IVecInt iVecInt0 = vecInt1.clone();
      IConstr iConstr0 = commander0.addExactly(manyCore0, iVecInt0, (-873));
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dimacsOutputSolver0).isVerbose();
      doReturn(0, 0, 0, 0).when(dimacsOutputSolver0).nVars();
      doReturn(0).when(dimacsOutputSolver0).nextFreeVarId(anyBoolean());
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      clausalCardinalitiesDecorator0.isVerbose();
      clausalCardinalitiesDecorator0.nextFreeVarId(true);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(clausalCardinalitiesDecorator0);
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      VecInt vecInt1 = new VecInt();
      vecInt1.size();
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.push(2492);
      vecInt1.iterator();
      IVecInt iVecInt0 = vecInt1.push(3);
      commander0.addAtMostOne(minimal4CardinalityModel0, iVecInt0);
      IVecInt iVecInt1 = null;
      AbstractMinimalModel.negativeLiterals(clausalCardinalitiesDecorator0);
      int int0 = (-2757);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.addAtMost((IVecInt) null, (-2757));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }
}
