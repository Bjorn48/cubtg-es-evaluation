/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:54:42 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.SearchListener;
import org.sat4j.specs.UnitClauseProvider;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.MultiTracing;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StatisticsSolver_ESTest extends StatisticsSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      int int0 = statisticsSolver0.newVar(1557);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(1557, statisticsSolver0.nVars());
      assertEquals(1557, statisticsSolver0.realNumberOfVariables());
      assertEquals(1557, int0);
      
      int int1 = statisticsSolver0.realNumberOfVariables();
      assertTrue(int1 == int0);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(1557, statisticsSolver0.nVars());
      assertEquals(1557, statisticsSolver0.realNumberOfVariables());
      assertEquals(1557, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      int int0 = statisticsSolver0.newVar(0);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      int int0 = statisticsSolver0.newVar((-1));
      assertEquals((-1), statisticsSolver0.nVars());
      assertEquals((-1), statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals((-1), int0);
      
      int int1 = statisticsSolver0.realNumberOfVariables();
      assertTrue(int1 == int0);
      assertEquals((-1), statisticsSolver0.nVars());
      assertEquals((-1), statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      int int0 = statisticsSolver0.newVar(1557);
      assertEquals(1557, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(1557, statisticsSolver0.realNumberOfVariables());
      assertEquals(1557, int0);
      
      int int1 = statisticsSolver0.nVars();
      assertTrue(int1 == int0);
      assertEquals(1557, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(1557, statisticsSolver0.realNumberOfVariables());
      assertEquals(1557, int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      statisticsSolver0.setExpectedNumberOfClauses(1597);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(1597, statisticsSolver0.nConstraints());
      
      int int0 = statisticsSolver0.nConstraints();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(1597, statisticsSolver0.nConstraints());
      assertEquals(1597, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      int int0 = statisticsSolver0.newVar(5000);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(5000, statisticsSolver0.realNumberOfVariables());
      assertEquals(5000, statisticsSolver0.nVars());
      assertEquals(5000, int0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("literals occurrences (mn/ma/avg) ");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      statisticsSolver0.printStat((PrintWriter) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.newVar((-820));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      statisticsSolver0.printStat((PrintWriter) null);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      int int0 = statisticsSolver0.newVar(1748);
      assertEquals(1748, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(1748, statisticsSolver0.nVars());
      assertEquals(1748, int0);
      
      vecInt0.insertFirst(1748);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1748, vecInt0.last());
      
      IConstr iConstr0 = statisticsSolver0.addClause(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1748, vecInt0.last());
      assertEquals(1748, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(1748, statisticsSolver0.nVars());
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      VecInt vecInt0 = new VecInt(210, 210);
      assertEquals(210, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(210, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst((-42));
      assertEquals(210, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(211, vecInt0.size());
      
      // Undeclared exception!
      try { 
        statisticsSolver0.addClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IConstr iConstr0 = statisticsSolver0.addClause(vecInt0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNull(iConstr0);
      
      IConstr iConstr1 = statisticsSolver0.addClause(vecInt0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNull(iConstr1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.expireTimeout();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(1394, 6);
      assertEquals(6, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1394, vecInt0.size());
      assertNotNull(vecInt0);
      
      OriginalBinaryClause originalBinaryClause0 = OriginalBinaryClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      assertEquals(6, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1394, vecInt0.size());
      assertFalse(originalBinaryClause0.simplify());
      assertFalse(originalBinaryClause0.isSatisfied());
      assertEquals(2, originalBinaryClause0.size());
      assertFalse(originalBinaryClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(1, originalBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalBinaryClause0.learnt());
      assertFalse(originalBinaryClause0.locked());
      assertTrue(originalBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalBinaryClause0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.removeConstr(originalBinaryClause0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.model(3106);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      try { 
        statisticsSolver0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.unsatExplanation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.clearLearntClauses();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      try { 
        statisticsSolver0.findModel((IVecInt) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.nextFreeVarId(true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      statisticsSolver0.setTimeout((-2755));
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.registerLiteral(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.getTimeout();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.getTimeoutMs();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.createBlockingClauseForCurrentModel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.discardCurrentModel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      try { 
        statisticsSolver0.findModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.removeSubsumedConstr((IConstr) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      statisticsSolver0.printInfos((PrintWriter) null, "?6ey EFA|fP2kw");
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.setTimeoutOnConflicts(65535);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.isDBSimplificationAllowed();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.getStat();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.setKeepSolverHot(true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.addAtMost((IVecInt) null, (-773));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.getSearchListener();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.isVerbose();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      LinkedList<SearchListener<Solver<MixedDataStructureSingleWL>>> linkedList0 = new LinkedList<SearchListener<Solver<MixedDataStructureSingleWL>>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      MultiTracing<Solver<MixedDataStructureSingleWL>> multiTracing0 = new MultiTracing<Solver<MixedDataStructureSingleWL>>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(multiTracing0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.setSearchListener((SearchListener<Solver<MixedDataStructureSingleWL>>) multiTracing0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      String string0 = statisticsSolver0.toString("");
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(string0);
      assertEquals("Statistics about the benchmarks", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      statisticsSolver0.printInfos((PrintWriter) null);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      int int0 = statisticsSolver0.realNumberOfVariables();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.newVar();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(statisticsSolver0);
      // Undeclared exception!
      try { 
        statisticsSolver0.addExactly(iVecInt0, (-2454));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      statisticsSolver0.newVar(1557);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("literals occurrences (mn/ma/avg) ");
      statisticsSolver0.printStat((PrintWriter) mockPrintWriter0);
      assertEquals(1557, statisticsSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<Solver<MixedDataStructureSingleWL>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureSingleWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureSingleWL>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureSingleWL>>(aSolverFactory0);
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      // Undeclared exception!
      try { 
        statisticsSolver0.printStat(printWriter0, (String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.primeImplicant(1250);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.addAtLeast((IVecInt) null, (-1628));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt();
      try { 
        statisticsSolver0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      Vec<IVecInt> vec0 = new Vec<IVecInt>(2701);
      // Undeclared exception!
      try { 
        statisticsSolver0.addAllClauses(vec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.addConstr((Constr) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.getLogPrefix();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      statisticsSolver0.reset();
      assertEquals(0, statisticsSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      try { 
        statisticsSolver0.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.isSolverKeptHot();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.setLogPrefix("F~[NYN<p564Q^WK[H]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      statisticsSolver0.setDBSimplificationAllowed(true);
      assertEquals(0, statisticsSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      int int0 = statisticsSolver0.nVars();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      statisticsSolver0.setVerbose(false);
      assertEquals(0, statisticsSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      try { 
        statisticsSolver0.isSatisfiable(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      int int0 = statisticsSolver0.nConstraints();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.addParity((IVecInt) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      UnitClauseProvider unitClauseProvider0 = UnitClauseProvider.VOID;
      // Undeclared exception!
      try { 
        statisticsSolver0.setUnitClauseProvider(unitClauseProvider0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.printStat((PrintStream) null, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.setTimeoutMs(145L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.addBlockingClause((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.getSolvingEngine();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.primeImplicant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }
}
