/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:37:41 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.FakeConstr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.Backbone;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.IBackboneProgressListener;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binomial;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Policy;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Backbone_ESTest extends Backbone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 5209, 5209, 0, 0).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(groupClauseSelectorSolver0);
      assertEquals(8, intArray0.length);
      assertNotNull(iVecInt0);
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IVecInt iVecInt1 = backbone0.compute((ISolver) groupClauseSelectorSolver0, iVecInt0, iVecInt0);
      assertEquals(8, intArray0.length);
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2), iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nVars());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1069;
      intArray0[1] = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) dimacsOutputSolver0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2147483648
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>[]) Array.newInstance(GroupClauseSelectorSolver.class, 7);
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1.0), (-461.602149149), (-461.602149149), 0);
      assertNotNull(searchParams0);
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(subsetVarOrder0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, glucose21Restarts0);
      assertEquals(1, intArray0.length);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertArrayEquals(new int[] {0}, intArray0);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0);
      assertEquals(1, intArray0.length);
      assertNotNull(abstractMinimalModel0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0}, intArray0);
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(abstractMinimalModel0, solutionFoundListener0);
      assertEquals(1, intArray0.length);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      assertEquals(1, intArray0.length);
      assertNotNull(groupClauseSelectorSolver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(groupClauseSelectorSolver0.isSatisfiable());
      assertArrayEquals(new int[] {0}, intArray0);
      
      groupClauseSelectorSolverArray0[0] = groupClauseSelectorSolver0;
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      assertEquals(1, intArray0.length);
      assertFalse(groupClauseSelectorSolver1.equals((Object)groupClauseSelectorSolver0));
      assertNotNull(groupClauseSelectorSolver1);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0}, intArray0);
      
      groupClauseSelectorSolverArray0[1] = groupClauseSelectorSolver1;
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver2 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      assertEquals(1, intArray0.length);
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver1));
      assertNotNull(groupClauseSelectorSolver2);
      assertTrue(groupClauseSelectorSolver2.isSatisfiable());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0}, intArray0);
      
      groupClauseSelectorSolverArray0[2] = groupClauseSelectorSolver2;
      Minimal4CardinalityModel minimal4CardinalityModel1 = new Minimal4CardinalityModel(groupClauseSelectorSolver2, vecInt0, (SolutionFoundListener) null);
      assertEquals(1, intArray0.length);
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver1));
      assertFalse(minimal4CardinalityModel1.equals((Object)minimal4CardinalityModel0));
      assertNotNull(minimal4CardinalityModel1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(groupClauseSelectorSolver2.isSatisfiable());
      assertArrayEquals(new int[] {0}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver3 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel1);
      assertEquals(1, intArray0.length);
      assertFalse(minimal4CardinalityModel0.equals((Object)minimal4CardinalityModel1));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver1));
      assertFalse(minimal4CardinalityModel1.equals((Object)minimal4CardinalityModel0));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver1));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver2));
      assertNotNull(groupClauseSelectorSolver3);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(groupClauseSelectorSolver2.isSatisfiable());
      assertTrue(groupClauseSelectorSolver3.isSatisfiable());
      assertArrayEquals(new int[] {0}, intArray0);
      
      groupClauseSelectorSolverArray0[3] = groupClauseSelectorSolver3;
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver4 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel1);
      assertEquals(1, intArray0.length);
      assertFalse(minimal4CardinalityModel0.equals((Object)minimal4CardinalityModel1));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver3));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver1));
      assertFalse(minimal4CardinalityModel1.equals((Object)minimal4CardinalityModel0));
      assertFalse(groupClauseSelectorSolver4.equals((Object)groupClauseSelectorSolver1));
      assertFalse(groupClauseSelectorSolver4.equals((Object)groupClauseSelectorSolver3));
      assertFalse(groupClauseSelectorSolver4.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver4.equals((Object)groupClauseSelectorSolver2));
      assertNotNull(groupClauseSelectorSolver4);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(groupClauseSelectorSolver2.isSatisfiable());
      assertTrue(groupClauseSelectorSolver4.isSatisfiable());
      assertArrayEquals(new int[] {0}, intArray0);
      
      groupClauseSelectorSolverArray0[4] = groupClauseSelectorSolver4;
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver5 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel1);
      assertEquals(1, intArray0.length);
      assertFalse(minimal4CardinalityModel0.equals((Object)minimal4CardinalityModel1));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver4));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver3));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver1));
      assertFalse(minimal4CardinalityModel1.equals((Object)minimal4CardinalityModel0));
      assertFalse(groupClauseSelectorSolver5.equals((Object)groupClauseSelectorSolver1));
      assertFalse(groupClauseSelectorSolver5.equals((Object)groupClauseSelectorSolver3));
      assertFalse(groupClauseSelectorSolver5.equals((Object)groupClauseSelectorSolver4));
      assertFalse(groupClauseSelectorSolver5.equals((Object)groupClauseSelectorSolver2));
      assertFalse(groupClauseSelectorSolver5.equals((Object)groupClauseSelectorSolver0));
      assertNotNull(groupClauseSelectorSolver5);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(groupClauseSelectorSolver2.isSatisfiable());
      assertTrue(groupClauseSelectorSolver5.isSatisfiable());
      assertArrayEquals(new int[] {0}, intArray0);
      
      groupClauseSelectorSolverArray0[5] = groupClauseSelectorSolver5;
      Minimal4CardinalityModel minimal4CardinalityModel2 = new Minimal4CardinalityModel(groupClauseSelectorSolver3, vecInt0, (SolutionFoundListener) null);
      assertEquals(1, intArray0.length);
      assertFalse(minimal4CardinalityModel0.equals((Object)minimal4CardinalityModel1));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver5));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver4));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver3));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver1));
      assertFalse(minimal4CardinalityModel1.equals((Object)minimal4CardinalityModel0));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver1));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver4));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver2));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver5));
      assertFalse(minimal4CardinalityModel2.equals((Object)minimal4CardinalityModel0));
      assertFalse(minimal4CardinalityModel2.equals((Object)minimal4CardinalityModel1));
      assertNotNull(minimal4CardinalityModel2);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(groupClauseSelectorSolver2.isSatisfiable());
      assertTrue(groupClauseSelectorSolver3.isSatisfiable());
      assertArrayEquals(new int[] {0}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver6 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel2);
      assertEquals(1, intArray0.length);
      assertFalse(minimal4CardinalityModel0.equals((Object)minimal4CardinalityModel2));
      assertFalse(minimal4CardinalityModel0.equals((Object)minimal4CardinalityModel1));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver5));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver4));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver3));
      assertFalse(groupClauseSelectorSolver2.equals((Object)groupClauseSelectorSolver1));
      assertFalse(minimal4CardinalityModel1.equals((Object)minimal4CardinalityModel0));
      assertFalse(minimal4CardinalityModel1.equals((Object)minimal4CardinalityModel2));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver1));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver0));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver4));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver2));
      assertFalse(groupClauseSelectorSolver3.equals((Object)groupClauseSelectorSolver5));
      assertFalse(minimal4CardinalityModel2.equals((Object)minimal4CardinalityModel0));
      assertFalse(minimal4CardinalityModel2.equals((Object)minimal4CardinalityModel1));
      assertFalse(groupClauseSelectorSolver6.equals((Object)groupClauseSelectorSolver1));
      assertFalse(groupClauseSelectorSolver6.equals((Object)groupClauseSelectorSolver5));
      assertFalse(groupClauseSelectorSolver6.equals((Object)groupClauseSelectorSolver4));
      assertFalse(groupClauseSelectorSolver6.equals((Object)groupClauseSelectorSolver3));
      assertFalse(groupClauseSelectorSolver6.equals((Object)groupClauseSelectorSolver2));
      assertFalse(groupClauseSelectorSolver6.equals((Object)groupClauseSelectorSolver0));
      assertNotNull(groupClauseSelectorSolver6);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-461.602149149), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-461.602149149), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(groupClauseSelectorSolver2.isSatisfiable());
      assertTrue(groupClauseSelectorSolver3.isSatisfiable());
      assertTrue(groupClauseSelectorSolver6.isSatisfiable());
      assertArrayEquals(new int[] {0}, intArray0);
      
      groupClauseSelectorSolverArray0[6] = groupClauseSelectorSolver6;
      ManyCore<GroupClauseSelectorSolver<Minimal4CardinalityModel>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolverArray0);
      assertEquals(7, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      Backbone backbone1 = Backbone.bb();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(9, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(9);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      IVecInt iVecInt0 = backbone0.compute((ISolver) dimacsStringSolver0, intArray0, (IVecInt) vecInt0);
      assertEquals(9, intArray0.length);
      assertFalse(backbone0.equals((Object)backbone1));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(backbone0, backbone1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, iVecInt0.last());
      assertEquals(9, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertNotNull(groupClauseSelectorSolver1);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1931.27619769), 28);
      assertNotNull(searchParams0);
      assertEquals((-1931.27619769), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(28, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(Integer.MIN_VALUE);
      assertNotNull(pureOrder0);
      assertEquals(Integer.MIN_VALUE, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax1, searchParams0, levelBasedVarOrderHeap0, eMARestarts0, mUSLauncher0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals((-1931.27619769), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(28, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 28;
      intArray0[3] = 28;
      intArray0[4] = 28;
      intArray0[5] = Integer.MIN_VALUE;
      intArray0[6] = 779;
      intArray0[7] = 28;
      intArray0[8] = Integer.MIN_VALUE;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(Integer.MIN_VALUE, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertArrayEquals(new int[] {1, 0, 28, 28, 28, Integer.MIN_VALUE, 779, 28, Integer.MIN_VALUE}, intArray0);
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0, vecInt0, solutionFoundListener0);
      assertEquals(9, intArray0.length);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals((-1931.27619769), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(28, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertArrayEquals(new int[] {1, 0, 28, 28, 28, Integer.MIN_VALUE, 779, 28, Integer.MIN_VALUE}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      assertEquals(9, intArray0.length);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(groupClauseSelectorSolver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals((-1931.27619769), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(28, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertTrue(groupClauseSelectorSolver0.isSatisfiable());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(eMARestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertArrayEquals(new int[] {1, 0, 28, 28, 28, Integer.MIN_VALUE, 779, 28, Integer.MIN_VALUE}, intArray0);
      
      Policy policy0 = new Policy();
      assertNotNull(policy0);
      
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNull(encodingStrategyAdapter0);
      
      ClausalCardinalitiesDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0, policy0);
      assertEquals(9, intArray0.length);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(clausalCardinalitiesDecorator0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals((-1931.27619769), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(28, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(eMARestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(Integer.MIN_VALUE, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertTrue(groupClauseSelectorSolver0.isSatisfiable());
      assertArrayEquals(new int[] {1, 0, 28, 28, 28, Integer.MIN_VALUE, 779, 28, Integer.MIN_VALUE}, intArray0);
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) clausalCardinalitiesDecorator0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2147483648
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(15, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      
      vecInt0.insertFirst(0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(16, vecInt0.size());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = false;
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertNotNull(groupClauseSelectorSolver1);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      
      groupClauseSelectorSolver1.externalState();
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      assertNotNull(singleSolutionDetector0);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver1, (IVecInt) vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Backbone backbone0 = Backbone.instance((IBackboneProgressListener) null, true);
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      ASolverFactory<GroupClauseSelectorSolver<Minimal4CardinalityModel>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<Minimal4CardinalityModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<GroupClauseSelectorSolver<Minimal4CardinalityModel>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(aSolverFactory0, true, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(15, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(15, vecInt0.size());
      
      vecInt0.insertFirst(0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(16, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      assertEquals(8, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = false;
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(groupClauseSelectorSolver0).nVars();
      doReturn((int[]) null).when(groupClauseSelectorSolver0).primeImplicant();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertNotNull(groupClauseSelectorSolver1);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      assertNotNull(singleSolutionDetector0);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) singleSolutionDetector0, iVecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 44;
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      VecInt vecInt0 = new VecInt(44, 44);
      assertNotNull(vecInt0);
      assertEquals(44, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(44, vecInt0.size());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 44);
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertArrayEquals(new int[] {0, 44, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null, iVecInt0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertNotNull(solver0);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      LightFactory.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      VecInt vecInt0 = (VecInt)backbone0.compute((ISolver) solver0);
      assertNotNull(vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      VecInt vecInt2 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      
      Backbone backbone1 = Backbone.bb();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-341);
      intArray0[1] = 47;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 848;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        backbone1.compute((ISolver) solver0, intArray0, (IVecInt) vecInt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertNotNull(solver0);
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      LightFactory.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      VecInt vecInt0 = (VecInt)backbone0.compute((ISolver) solver0);
      assertNotNull(vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      VecInt vecInt2 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      
      Backbone backbone1 = Backbone.bb();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-341);
      intArray0[1] = 47;
      intArray0[2] = 0;
      VecInt vecInt3 = null;
      try {
        vecInt3 = new VecInt((-327));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, false);
      assertNotNull(maxSatDecorator0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, checkMUSSolutionListener0);
      assertNotNull(optToSatAdapter0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(optToSatAdapter0.isOptimal());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      VecInt vecInt0 = new VecInt(37);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push(1387);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1387, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1387, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) optToSatAdapter0, intArray0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertNotNull(solver0);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      VecInt vecInt0 = (VecInt)backbone0.compute((ISolver) solver0);
      assertNotNull(vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[0];
      VecInt vecInt1 = (VecInt)backbone0.compute((ISolver) solver0, intArray0, (IVecInt) vecInt0);
      assertEquals(0, intArray0.length);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(15, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.insertFirst(0);
      assertEquals(0, vecInt0.last());
      assertEquals(16, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(groupClauseSelectorSolver0).nVars();
      doReturn((int[]) null).when(groupClauseSelectorSolver0).primeImplicant();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertEquals(8, intArray0.length);
      assertNotNull(groupClauseSelectorSolver1);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      vecInt0.growTo(4, 1380);
      assertEquals(4, vecInt0.size());
      assertEquals(1380, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      assertEquals(8, intArray0.length);
      assertNotNull(singleSolutionDetector0);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(1380, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(4, vecInt0.size());
      assertEquals(1380, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) singleSolutionDetector0, iVecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1000;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, (IVecInt) null, 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      Backbone backbone1 = Backbone.instance();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Backbone backbone0 = Backbone.instance();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-627);
      intArray0[1] = 22;
      intArray0[2] = 36;
      intArray0[3] = 102;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(subsetVarOrder0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertArrayEquals(new int[] {(-627), 22, 36, 102}, intArray0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, (RestartStrategy) null);
      assertEquals(4, intArray0.length);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertArrayEquals(new int[] {(-627), 22, 36, 102}, intArray0);
      
      Solver solver1 = (Solver)solver0.getSolvingEngine();
      assertEquals(4, intArray0.length);
      assertNotNull(solver1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertArrayEquals(new int[] {(-627), 22, 36, 102}, intArray0);
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) solver1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -627
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 44;
      intArray0[1] = 44;
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      VecInt vecInt0 = new VecInt(44, 44);
      assertNotNull(vecInt0);
      assertEquals(44, vecInt0.last());
      assertEquals(44, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 44);
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertArrayEquals(new int[] {0, 44, 0, 0, 0, 0, 0, 0}, intArray0);
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertNotNull(solver0);
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) solver0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(9, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      assertEquals(9, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertNotNull(learntWLClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(learntWLClause0).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, (-1660)).when(groupClauseSelectorSolver0).nVars();
      doReturn((Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1047);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.01, (-4332.7), 2879.1287, (-1));
      assertNotNull(searchParams0);
      assertEquals((-4332.7), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.01, searchParams0.getVarDecay(), 0.01);
      assertEquals(2879.1287, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 1047);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      SearchParams searchParams1 = new SearchParams(1152);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertNotNull(searchParams1);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1152, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, (CardinalityDataStructureYanMax) null, searchParams1, pureOrder0, (RestartStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertNotNull(groupClauseSelectorSolver1);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      
      VecInt vecInt0 = new VecInt(10);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver1, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      doReturn(false).when(groupClauseSelectorSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      IVecInt iVecInt0 = backbone0.compute((ISolver) groupClauseSelectorSolver0);
      assertEquals(8, intArray0.length);
      assertNotNull(iVecInt0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(8, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver1 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver2 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver1);
      assertNotNull(groupClauseSelectorSolver2);
      assertFalse(groupClauseSelectorSolver2.isSatisfiable());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver2, iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(15, 0);
      assertNotNull(vecInt0);
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      vecInt0.insertFirst(0);
      assertEquals(16, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      assertEquals(8, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray1).when(groupClauseSelectorSolver0).primeImplicant();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(groupClauseSelectorSolver1);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0}, intArray1);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(singleSolutionDetector0);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0}, intArray1);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt1 = backbone0.compute((ISolver) singleSolutionDetector0, iVecInt0, (IVecInt) vecInt0);
      assertEquals(1, intArray1.length);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(iVecInt1);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(intArray1, intArray0);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0}, intArray1);
      
      ManyCore<Minimal4CardinalityModel> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<Minimal4CardinalityModel>(false, (Minimal4CardinalityModel[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-2754);
      intArray0[3] = 1005;
      int int1 = (-2530);
      intArray0[4] = (-2530);
      intArray0[5] = (-2116);
      int int2 = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(8, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 1, (-2754), 1005, (-2530), (-2116), 0, 1}, intArray0);
      
      int int3 = (-2010);
      vecInt0.clear();
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertArrayEquals(new int[] {0, 1, (-2754), 1005, (-2530), (-2116), 0, 1}, intArray0);
      
      vecInt0.clear();
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertArrayEquals(new int[] {0, 1, (-2754), 1005, (-2530), (-2116), 0, 1}, intArray0);
      
      vecInt0.shrinkTo((-2010));
      assertEquals(8, intArray0.length);
      assertEquals((-2010), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 1, (-2754), 1005, (-2530), (-2116), 0, 1}, intArray0);
      
      vecInt0.sortUnique();
      assertEquals(8, intArray0.length);
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 1, (-2754), 1005, (-2530), (-2116), 0, 1}, intArray0);
      
      vecInt0.insertFirst((-2754));
      assertEquals(8, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertArrayEquals(new int[] {(-2754), 0, (-2754), 1005, (-2530), (-2116), 0, 1}, intArray0);
      
      // Undeclared exception!
      try { 
        Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2754
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      Backbone backbone1 = Backbone.ibb();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
      
      ASolverFactory<GroupClauseSelectorSolver<Minimal4CardinalityModel>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<Minimal4CardinalityModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.sat4j.tools.Backbone$2";
      stringArray0[1] = "";
      stringArray0[2] = "ZrN#>0hVuYUa";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "5I\"t@";
      stringArray0[6] = "kDwI^=F+CEC";
      stringArray0[7] = "X/e`2Pb%\"h0Z*&*V";
      ManyCore<GroupClauseSelectorSolver<Minimal4CardinalityModel>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(aSolverFactory0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(9, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      assertEquals(9, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      Backbone backbone1 = Backbone.ibb();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
      
      String[] stringArray0 = new String[0];
      ManyCore<GroupClauseSelectorSolver<Minimal4CardinalityModel>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<Minimal4CardinalityModel>>((ASolverFactory<GroupClauseSelectorSolver<Minimal4CardinalityModel>>) null, true, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      IVecInt iVecInt1 = vecInt0.pop();
      assertNotNull(iVecInt1);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        backbone1.compute((ISolver) manyCore0, iVecInt1, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Backbone backbone0 = Backbone.instance((IBackboneProgressListener) null, false);
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SubsetVarOrder subsetVarOrder0 = null;
      try {
        subsetVarOrder0 = new SubsetVarOrder((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      
      try { 
        backbone0.compute((ISolver) statisticsSolver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(9, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      assertNotNull(learntWLClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, learntWLClause0.size());
      
      Constr constr0 = learntWLClause0.toConstraint();
      assertNotNull(constr0);
      assertSame(learntWLClause0, constr0);
      assertSame(constr0, learntWLClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, learntWLClause0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.locked());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, constr0.size());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(constr0).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, (-2231)).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      LexicoDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>> lexicoDecorator0 = new LexicoDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertEquals(9, intArray0.length);
      assertNotNull(lexicoDecorator0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, learntWLClause0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.locked());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, constr0.size());
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, checkMUSSolutionListener0);
      assertEquals(9, intArray0.length);
      assertNotNull(optToSatAdapter0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, learntWLClause0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.locked());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, constr0.size());
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(optToSatAdapter0.isOptimal());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-498);
      intArray1[1] = 9;
      intArray1[2] = 9;
      intArray1[3] = 9;
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) lexicoDecorator0, intArray1, (IVecInt) vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter((ISolver) null, checkMUSSolutionListener0);
      assertNotNull(modelIteratorToSATAdapter0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIteratorToSATAdapter0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertNotNull(solver0);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1123;
      intArray0[1] = (-339);
      intArray0[2] = (-1241);
      intArray0[3] = (-752);
      intArray0[4] = 951;
      intArray0[5] = 1;
      intArray0[6] = 3230;
      intArray0[7] = 0;
      intArray0[8] = 2388;
      VecInt vecInt0 = new VecInt(0, (-1980));
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = (VecInt)vecInt0.push(1123);
      assertNotNull(vecInt1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals(1123, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1123, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) solver0, intArray0, (IVecInt) vecInt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(1, int0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertNotNull(groupClauseSelectorSolver1);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertNotNull(solver0);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      VecInt vecInt0 = (VecInt)backbone0.compute((ISolver) solver0);
      assertNotNull(vecInt0);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      Backbone backbone1 = Backbone.ibb();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
      
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, iVecInt0, 0);
      assertEquals(1, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertArrayEquals(new int[] {0}, intArray0);
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, solutionFoundListener0);
      assertNotNull(abstractMinimalModel0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      IVecInt iVecInt1 = backbone0.compute((ISolver) abstractMinimalModel0, (IVecInt) vecInt1);
      assertFalse(backbone0.equals((Object)backbone1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertNotSame(backbone0, backbone1);
      assertNotSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt1);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(eMARestarts0.shouldRestart());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      VecInt vecInt0 = new VecInt(15, (-1));
      assertNotNull(vecInt0);
      assertEquals((-1), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 15;
      intArray0[4] = (-1);
      intArray0[5] = 15;
      intArray0[6] = 3;
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(3, vecInt1.last());
      assertEquals(7, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertArrayEquals(new int[] {15, (-1), (-1), 15, (-1), 15, 3}, intArray0);
      
      vecInt1.insertFirst(15);
      assertEquals(7, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt1, vecInt0);
      assertEquals(15, vecInt1.last());
      assertEquals(8, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertArrayEquals(new int[] {15, (-1), (-1), 15, (-1), 15, 3}, intArray0);
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 18);
      assertEquals(7, intArray0.length);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertNotSame(vecInt0, vecInt1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertArrayEquals(new int[] {15, (-1), (-1), 15, (-1), 15, 3}, intArray0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(6752);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, checkMUSSolutionListener0);
      assertNotNull(modelIteratorToSATAdapter0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(modelIteratorToSATAdapter0, vecInt0, solutionFoundListener0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertNotNull(groupClauseSelectorSolver0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertNotNull(groupClauseSelectorSolver1);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertNotNull(singleSolutionDetector0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      try { 
        backbone0.compute((ISolver) minimal4CardinalityModel0, (IVecInt) vecInt0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      
      try { 
        backbone0.compute((ISolver) statisticsSolver0, (IVecInt) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      VecInt vecInt0 = new VecInt(15, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      Binomial binomial0 = new Binomial();
      assertNotNull(binomial0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(groupClauseSelectorSolver0, vecInt0, solutionFoundListener0);
      assertEquals(8, intArray0.length);
      assertNotNull(minimal4CardinalityModel0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      assertEquals(8, intArray0.length);
      assertFalse(groupClauseSelectorSolver1.equals((Object)groupClauseSelectorSolver0));
      assertNotNull(groupClauseSelectorSolver1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver2 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver1);
      assertEquals(8, intArray0.length);
      assertFalse(groupClauseSelectorSolver1.equals((Object)groupClauseSelectorSolver0));
      assertNotNull(groupClauseSelectorSolver2);
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertTrue(groupClauseSelectorSolver2.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      assertEquals(8, intArray0.length);
      assertFalse(groupClauseSelectorSolver1.equals((Object)groupClauseSelectorSolver0));
      assertNotNull(singleSolutionDetector0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IVecInt iVecInt0 = backbone0.compute((ISolver) minimal4CardinalityModel0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      assertEquals(8, intArray0.length);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(15, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      LexicoDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>> lexicoDecorator0 = new LexicoDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver1);
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertFalse(groupClauseSelectorSolver1.equals((Object)groupClauseSelectorSolver0));
      assertNotNull(lexicoDecorator0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(lexicoDecorator0.isOptimal());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, solutionFoundListener0);
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertFalse(groupClauseSelectorSolver1.equals((Object)groupClauseSelectorSolver0));
      assertNotNull(optToSatAdapter0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IVecInt iVecInt1 = backbone0.compute((ISolver) optToSatAdapter0, intArray0, (IVecInt) vecInt0);
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertFalse(groupClauseSelectorSolver1.equals((Object)groupClauseSelectorSolver0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertNotNull(iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      assertEquals(15, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.last());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(groupClauseSelectorSolver0);
      assertEquals(8, intArray0.length);
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IVecInt iVecInt1 = backbone0.compute((ISolver) groupClauseSelectorSolver0, iVecInt0, iVecInt0);
      assertEquals(8, intArray0.length);
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      
      ModelIterator modelIterator0 = new ModelIterator(dimacsStringSolver0);
      assertNotNull(modelIterator0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      
      VecInt vecInt0 = new VecInt(1, 1);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIterator0, intArray0, (IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(65);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(65, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      VecInt vecInt0 = new VecInt(593, 65);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(593, vecInt0.size());
      assertEquals(65, vecInt0.last());
      
      vecInt0.insertFirst(3);
      assertFalse(vecInt0.isEmpty());
      assertEquals(594, vecInt0.size());
      assertEquals(65, vecInt0.last());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 65;
      intArray0[1] = 15;
      intArray0[2] = 3;
      intArray0[3] = 65;
      intArray0[4] = 65;
      intArray0[5] = (-585);
      intArray0[6] = 15;
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 593);
      assertEquals(7, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {65, 15, 3, 65, 65, (-585), 15}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>[]) Array.newInstance(GroupClauseSelectorSolver.class, 0);
      ManyCore<GroupClauseSelectorSolver<Minimal4CardinalityModel>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolverArray0);
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0, vecInt0, solutionFoundListener0);
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(groupClauseSelectorSolver0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(groupClauseSelectorSolver1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(singleSolutionDetector0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver1, iVecInt0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertNotNull(groupClauseSelectorSolver1);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver1, iVecInt0, iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Backbone backbone0 = Backbone.instance();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null, intArray0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(1, int0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      VecInt vecInt0 = new VecInt(15, 1);
      assertNotNull(vecInt0);
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      vecInt0.insertFirst(1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertEquals(16, vecInt0.size());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 1);
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertEquals(8, intArray0.length);
      assertNotNull(groupClauseSelectorSolver1);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      vecInt0.growTo(4, 1380);
      assertEquals(1380, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      assertEquals(8, intArray0.length);
      assertNotNull(singleSolutionDetector0);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(1380, iVecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1380, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      
      IVecInt iVecInt1 = backbone0.compute((ISolver) singleSolutionDetector0, iVecInt0, (IVecInt) vecInt0);
      assertEquals(8, intArray0.length);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(1380, iVecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(1380, iVecInt1.last());
      assertEquals(4, iVecInt1.size());
      assertEquals(1380, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(15, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.insertFirst(0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(16, vecInt0.size());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      assertEquals(8, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      doReturn(false).when(groupClauseSelectorSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertEquals(8, intArray0.length);
      assertNotNull(groupClauseSelectorSolver1);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      assertEquals(8, intArray0.length);
      assertNotNull(singleSolutionDetector0);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IVecInt iVecInt0 = backbone0.compute((ISolver) groupClauseSelectorSolver1, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int int1 = backbone0.getNumberOfSatCalls();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      //  // Unstable assertion: assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      //  // Unstable assertion: assertNotNull(eMARestarts0);
      //  // Unstable assertion: assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, eMARestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      
      EMARestarts eMARestarts1 = (EMARestarts)solver0.getRestartStrategy();
      //  // Unstable assertion: assertNotNull(eMARestarts1);
      //  // Unstable assertion: assertSame(eMARestarts0, eMARestarts1);
      //  // Unstable assertion: assertSame(eMARestarts1, eMARestarts0);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      
      ASolverFactory<GroupClauseSelectorSolver<Minimal4CardinalityModel>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<Minimal4CardinalityModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GroupClauseSelectorSolver<Minimal4CardinalityModel>> basicLauncher0 = new BasicLauncher<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(aSolverFactory0);
      //  // Unstable assertion: assertNotNull(basicLauncher0);
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, eMARestarts1, basicLauncher0);
      //  // Unstable assertion: assertFalse(solver1.equals((Object)solver0));
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0, solver1.nVars());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      
      Solver solver2 = (Solver)solver1.getSolvingEngine();
      //  // Unstable assertion: assertFalse(solver0.equals((Object)solver1));
      //  // Unstable assertion: assertFalse(solver1.equals((Object)solver0));
      //  // Unstable assertion: assertNotNull(solver2);
      //  // Unstable assertion: assertSame(eMARestarts0, eMARestarts1);
      //  // Unstable assertion: assertNotSame(solver0, solver1);
      //  // Unstable assertion: assertSame(eMARestarts1, eMARestarts0);
      //  // Unstable assertion: assertNotSame(solver1, solver0);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0, solver1.nVars());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver2.nVars());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) solver2, intArray0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      Backbone backbone1 = Backbone.bb();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(1);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, checkMUSSolutionListener0);
      assertNotNull(abstractMinimalModel0);
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(abstractMinimalModel0);
      assertNotNull(singleSolutionDetector0);
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0, true);
      assertNotNull(maxSatDecorator0);
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      
      IVecInt iVecInt0 = maxSatDecorator0.createBlockingClauseForCurrentModel();
      assertNull(iVecInt0);
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      
      // Undeclared exception!
      try { 
        backbone1.compute((ISolver) singleSolutionDetector0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      LightFactory lightFactory0 = LightFactory.instance();
      //  // Unstable assertion: assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      
      VecInt vecInt0 = (VecInt)backbone0.compute((ISolver) solver0);
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      //  // Unstable assertion: assertTrue(vecInt1.equals((Object)vecInt0));
      //  // Unstable assertion: assertNotNull(vecInt1);
      //  // Unstable assertion: assertNotSame(vecInt0, vecInt1);
      //  // Unstable assertion: assertNotSame(vecInt1, vecInt0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertEquals(0, vecInt1.size());
      //  // Unstable assertion: assertTrue(vecInt1.isEmpty());
      
      Backbone backbone1 = Backbone.ibb();
      //  // Unstable assertion: assertFalse(backbone1.equals((Object)backbone0));
      //  // Unstable assertion: assertNotNull(backbone1);
      //  // Unstable assertion: assertNotSame(backbone1, backbone0);
      //  // Unstable assertion: assertEquals(0, backbone1.getNumberOfSatCalls());
      
      VecInt vecInt2 = new VecInt(754, 754);
      //  // Unstable assertion: assertFalse(vecInt2.equals((Object)vecInt0));
      //  // Unstable assertion: assertFalse(vecInt2.equals((Object)vecInt1));
      //  // Unstable assertion: assertNotNull(vecInt2);
      //  // Unstable assertion: assertFalse(vecInt2.isEmpty());
      //  // Unstable assertion: assertEquals(754, vecInt2.last());
      //  // Unstable assertion: assertEquals(754, vecInt2.size());
      
      vecInt2.insertFirst(754);
      //  // Unstable assertion: assertFalse(vecInt2.equals((Object)vecInt0));
      //  // Unstable assertion: assertFalse(vecInt2.equals((Object)vecInt1));
      //  // Unstable assertion: assertNotSame(vecInt2, vecInt0);
      //  // Unstable assertion: assertNotSame(vecInt2, vecInt1);
      //  // Unstable assertion: assertFalse(vecInt2.isEmpty());
      //  // Unstable assertion: assertEquals(754, vecInt2.last());
      //  // Unstable assertion: assertEquals(755, vecInt2.size());
      
      int[] intArray0 = new int[0];
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt1, 754);
      //  // Unstable assertion: assertEquals(0, intArray0.length);
      //  // Unstable assertion: assertFalse(backbone0.equals((Object)backbone1));
      //  // Unstable assertion: assertTrue(vecInt0.equals((Object)vecInt1));
      //  // Unstable assertion: assertFalse(vecInt0.equals((Object)vecInt2));
      //  // Unstable assertion: assertFalse(vecInt1.equals((Object)vecInt2));
      //  // Unstable assertion: assertTrue(vecInt1.equals((Object)vecInt0));
      //  // Unstable assertion: assertNotSame(backbone0, backbone1);
      //  // Unstable assertion: assertNotSame(vecInt0, vecInt1);
      //  // Unstable assertion: assertNotSame(vecInt0, vecInt2);
      //  // Unstable assertion: assertNotSame(vecInt1, vecInt0);
      //  // Unstable assertion: assertNotSame(vecInt1, vecInt2);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertEquals(0, vecInt1.size());
      //  // Unstable assertion: assertTrue(vecInt1.isEmpty());
      //  // Unstable assertion: assertArrayEquals(new int[] {}, intArray0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0);
      //  // Unstable assertion: assertNotNull(minimal4CardinalityModel0);
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      //  // Unstable assertion: assertNotNull(groupClauseSelectorSolver0);
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertTrue(groupClauseSelectorSolver0.isSatisfiable());
      
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      //  // Unstable assertion: assertNotNull(groupClauseSelectorSolver1);
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertTrue(groupClauseSelectorSolver0.isSatisfiable());
      //  // Unstable assertion: assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(solver0);
      //  // Unstable assertion: assertNotNull(singleSolutionDetector0);
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      
      VecInt vecInt3 = (VecInt)backbone0.compute((ISolver) singleSolutionDetector0, (IVecInt) vecInt1, (IVecInt) vecInt1);
      //  // Unstable assertion: assertFalse(backbone0.equals((Object)backbone1));
      //  // Unstable assertion: assertTrue(vecInt0.equals((Object)vecInt1));
      //  // Unstable assertion: assertFalse(vecInt0.equals((Object)vecInt2));
      //  // Unstable assertion: assertFalse(vecInt1.equals((Object)vecInt2));
      //  // Unstable assertion: assertTrue(vecInt1.equals((Object)vecInt0));
      //  // Unstable assertion: assertTrue(vecInt3.equals((Object)vecInt0));
      //  // Unstable assertion: assertTrue(vecInt3.equals((Object)vecInt1));
      //  // Unstable assertion: assertFalse(vecInt3.equals((Object)vecInt2));
      //  // Unstable assertion: assertNotNull(vecInt3);
      //  // Unstable assertion: assertNotSame(backbone0, backbone1);
      //  // Unstable assertion: assertNotSame(vecInt0, vecInt1);
      //  // Unstable assertion: assertNotSame(vecInt0, vecInt3);
      //  // Unstable assertion: assertNotSame(vecInt0, vecInt2);
      //  // Unstable assertion: assertNotSame(vecInt1, vecInt0);
      //  // Unstable assertion: assertNotSame(vecInt1, vecInt3);
      //  // Unstable assertion: assertNotSame(vecInt1, vecInt2);
      //  // Unstable assertion: assertNotSame(vecInt3, vecInt0);
      //  // Unstable assertion: assertNotSame(vecInt3, vecInt2);
      //  // Unstable assertion: assertNotSame(vecInt3, vecInt1);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertEquals(0, vecInt1.size());
      //  // Unstable assertion: assertTrue(vecInt1.isEmpty());
      //  // Unstable assertion: assertTrue(vecInt3.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt3.size());
      
      VecInt vecInt4 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt2);
      //  // Unstable assertion: assertTrue(vecInt4.equals((Object)vecInt2));
      //  // Unstable assertion: assertFalse(vecInt4.equals((Object)vecInt0));
      //  // Unstable assertion: assertFalse(vecInt4.equals((Object)vecInt3));
      //  // Unstable assertion: assertFalse(vecInt4.equals((Object)vecInt1));
      //  // Unstable assertion: assertFalse(backbone0.equals((Object)backbone1));
      //  // Unstable assertion: assertFalse(vecInt2.equals((Object)vecInt3));
      //  // Unstable assertion: assertFalse(vecInt2.equals((Object)vecInt0));
      //  // Unstable assertion: assertFalse(vecInt2.equals((Object)vecInt1));
      //  // Unstable assertion: assertNotNull(vecInt4);
      //  // Unstable assertion: assertNotSame(vecInt4, vecInt2);
      //  // Unstable assertion: assertNotSame(vecInt4, vecInt0);
      //  // Unstable assertion: assertNotSame(vecInt4, vecInt3);
      //  // Unstable assertion: assertNotSame(vecInt4, vecInt1);
      //  // Unstable assertion: assertNotSame(backbone0, backbone1);
      //  // Unstable assertion: assertNotSame(vecInt2, vecInt3);
      //  // Unstable assertion: assertNotSame(vecInt2, vecInt0);
      //  // Unstable assertion: assertNotSame(vecInt2, vecInt4);
      //  // Unstable assertion: assertNotSame(vecInt2, vecInt1);
      //  // Unstable assertion: assertEquals(754, vecInt4.last());
      //  // Unstable assertion: assertEquals(755, vecInt4.size());
      //  // Unstable assertion: assertFalse(vecInt4.isEmpty());
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(754, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(754, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertFalse(vecInt2.isEmpty());
      //  // Unstable assertion: assertEquals(754, vecInt2.last());
      //  // Unstable assertion: assertEquals(755, vecInt2.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nVars());
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      
      // Undeclared exception!
      try { 
        statisticsSolver0.discardCurrentModel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      VecInt vecInt0 = new VecInt(15, 1);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      
      vecInt0.insertFirst(1);
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(16, vecInt0.size());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 1);
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredCardinalityConstraint(vecInt0, 14);
      assertNotNull(constr0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(constr0.simplify());
      assertTrue(constr0.locked());
      assertFalse(constr0.learnt());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, constr0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(14, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(constr0).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(1).when(groupClauseSelectorSolver0).nVars();
      doReturn(true).when(groupClauseSelectorSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertNotNull(groupClauseSelectorSolver1);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(constr0.simplify());
      assertTrue(constr0.locked());
      assertFalse(constr0.learnt());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, constr0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(14, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      assertNotNull(singleSolutionDetector0);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(constr0.simplify());
      assertTrue(constr0.locked());
      assertFalse(constr0.learnt());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, constr0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(14, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      IVecInt iVecInt0 = backbone0.compute((ISolver) singleSolutionDetector0, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertNotNull(iVecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(8, iVecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(constr0.simplify());
      assertTrue(constr0.locked());
      assertFalse(constr0.learnt());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, constr0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(14, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(17, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(17, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      assertEquals(9, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(15, 0);
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertEquals(15, vecInt0.size());
      //  // Unstable assertion: assertEquals(0, vecInt0.last());
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      
      vecInt0.insertFirst(0);
      //  // Unstable assertion: assertEquals(16, vecInt0.size());
      //  // Unstable assertion: assertEquals(0, vecInt0.last());
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(groupClauseSelectorSolver0).nVars();
      doReturn((int[]) null).when(groupClauseSelectorSolver0).primeImplicant();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertNotNull(groupClauseSelectorSolver1);
      //  // Unstable assertion: assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertNotNull(singleSolutionDetector0);
      //  // Unstable assertion: assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver1, (IVecInt) vecInt0, (IVecInt) vecInt0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      VecInt vecInt0 = new VecInt(15, 1);
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertEquals(15, vecInt0.size());
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(1, vecInt0.last());
      
      vecInt0.insertFirst(1);
      //  // Unstable assertion: assertEquals(16, vecInt0.size());
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(1, vecInt0.last());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 1);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertNotNull(groupClauseSelectorSolver1);
      //  // Unstable assertion: assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      //  // Unstable assertion: assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertNotNull(singleSolutionDetector0);
      //  // Unstable assertion: assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      //  // Unstable assertion: assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      IVecInt iVecInt0 = vecInt0.clone();
      //  // Unstable assertion: assertTrue(iVecInt0.equals((Object)vecInt0));
      //  // Unstable assertion: assertNotNull(iVecInt0);
      //  // Unstable assertion: assertNotSame(iVecInt0, vecInt0);
      //  // Unstable assertion: assertNotSame(vecInt0, iVecInt0);
      //  // Unstable assertion: assertTrue(iVecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, iVecInt0.size());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt1 = backbone0.compute((ISolver) singleSolutionDetector0, iVecInt0, (IVecInt) vecInt0);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertTrue(iVecInt0.equals((Object)vecInt0));
      //  // Unstable assertion: assertTrue(iVecInt1.equals((Object)iVecInt0));
      //  // Unstable assertion: assertTrue(iVecInt1.equals((Object)vecInt0));
      //  // Unstable assertion: assertTrue(vecInt0.equals((Object)iVecInt0));
      //  // Unstable assertion: assertNotNull(iVecInt1);
      //  // Unstable assertion: assertNotSame(iVecInt0, iVecInt1);
      //  // Unstable assertion: assertNotSame(iVecInt0, vecInt0);
      //  // Unstable assertion: assertNotSame(iVecInt1, iVecInt0);
      //  // Unstable assertion: assertNotSame(iVecInt1, vecInt0);
      //  // Unstable assertion: assertNotSame(vecInt0, iVecInt1);
      //  // Unstable assertion: assertNotSame(vecInt0, iVecInt0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertTrue(iVecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, iVecInt0.size());
      //  // Unstable assertion: assertEquals(0, iVecInt1.size());
      //  // Unstable assertion: assertTrue(iVecInt1.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      //  // Unstable assertion: assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1305);
      intArray0[1] = 14;
      intArray0[3] = 1;
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((int[]) null).when(groupClauseSelectorSolver0).model();
      doReturn((IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((int[]) null).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(0).when(groupClauseSelectorSolver0).nVars();
      doReturn(false).when(groupClauseSelectorSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      ClausalCardinalitiesDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertNotNull(clausalCardinalitiesDecorator0);
      
      VecInt vecInt0 = new VecInt(848);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(clausalCardinalitiesDecorator0, vecInt0);
      assertNotNull(minimal4CardinalityModel0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      assertFalse(groupClauseSelectorSolver1.equals((Object)groupClauseSelectorSolver0));
      assertNotNull(groupClauseSelectorSolver1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      
      Policy policy0 = new Policy();
      assertNotNull(policy0);
      
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNull(encodingStrategyAdapter0);
      
      ClausalCardinalitiesDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>> clausalCardinalitiesDecorator1 = new ClausalCardinalitiesDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver1, (EncodingStrategyAdapter) null);
      assertFalse(groupClauseSelectorSolver1.equals((Object)groupClauseSelectorSolver0));
      assertFalse(clausalCardinalitiesDecorator1.equals((Object)clausalCardinalitiesDecorator0));
      assertNotNull(clausalCardinalitiesDecorator1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      
      IVecInt iVecInt0 = backbone0.compute((ISolver) clausalCardinalitiesDecorator1, intArray0, (IVecInt) vecInt0);
      assertEquals(5, intArray0.length);
      assertFalse(clausalCardinalitiesDecorator0.equals((Object)clausalCardinalitiesDecorator1));
      assertFalse(groupClauseSelectorSolver1.equals((Object)groupClauseSelectorSolver0));
      assertFalse(clausalCardinalitiesDecorator1.equals((Object)clausalCardinalitiesDecorator0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(clausalCardinalitiesDecorator0, clausalCardinalitiesDecorator1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(clausalCardinalitiesDecorator1, clausalCardinalitiesDecorator0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertEquals(5, iVecInt0.size());
      assertArrayEquals(new int[] {(-1305), 14, 0, 1, 0}, intArray0);
      
      Backbone backbone1 = Backbone.bb();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
      
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4CardinalityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(17, 17);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(17, vecInt0.size());
      assertEquals(17, vecInt0.last());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 17);
      assertEquals(9, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertNotNull(solver0);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      VecInt vecInt0 = new VecInt(2094, 110);
      assertNotNull(vecInt0);
      assertEquals(110, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2094, vecInt0.size());
      
      VecInt vecInt1 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(110, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(110, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(110, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2094, vecInt0.size());
      assertEquals(110, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2094, vecInt1.size());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2094;
      intArray0[1] = 2094;
      intArray0[2] = 2094;
      intArray0[3] = 110;
      intArray0[4] = 110;
      intArray0[5] = 2094;
      // Undeclared exception!
      backbone0.compute((ISolver) solver0, intArray0, (IVecInt) vecInt1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      Backbone backbone1 = Backbone.bb();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, (-1), (-1)).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(groupClauseSelectorSolver0);
      assertEquals(8, intArray0.length);
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver0, iVecInt0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(65);
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(65, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      //  // Unstable assertion: assertNotNull(arminRestarts0);
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(65, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      
      VecInt vecInt0 = new VecInt(0);
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) solver0, (IVecInt) vecInt0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      Backbone backbone1 = Backbone.instance();
      //  // Unstable assertion: assertFalse(backbone1.equals((Object)backbone0));
      //  // Unstable assertion: assertNotNull(backbone1);
      //  // Unstable assertion: assertNotSame(backbone1, backbone0);
      //  // Unstable assertion: assertEquals(1, backbone1.getNumberOfSatCalls());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-1722));
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals((-1722), percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1722), 15);
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(15, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-1722.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals((-1722), percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(15, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-1722.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[1] = 15;
      intArray0[2] = 32;
      intArray0[3] = 15;
      intArray0[4] = 32;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        backbone1.compute((ISolver) solver0, intArray0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertNotNull(solver0);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      VecInt vecInt0 = (VecInt)backbone0.compute((ISolver) solver0, iVecInt0, iVecInt0);
      assertNotNull(vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(activeLearning0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      cardinalityDataStructureYanMax0.setUnitPropagationListener((UnitPropagationListener) null);
      Backbone backbone1 = Backbone.bb();
      //  // Unstable assertion: assertFalse(backbone1.equals((Object)backbone0));
      //  // Unstable assertion: assertNotNull(backbone1);
      //  // Unstable assertion: assertNotSame(backbone1, backbone0);
      //  // Unstable assertion: assertEquals(0, backbone1.getNumberOfSatCalls());
      
      SearchParams searchParams0 = new SearchParams(1.0, 0.0, 0.0, 0);
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      //  // Unstable assertion: assertNotNull(fixedPeriodRestarts0);
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      
      searchParams0.setVarDecay(0.0);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      
      activeLearning0.setVarActivityListener(solver0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      
      VecInt vecInt0 = new VecInt(0, 0);
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0, vecInt0);
      //  // Unstable assertion: assertNotNull(minimal4CardinalityModel0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      
      minimal4CardinalityModel0.clearLearntClauses();
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      
      GateTranslator gateTranslator0 = new GateTranslator(minimal4CardinalityModel0);
      //  // Unstable assertion: assertNotNull(gateTranslator0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = gateTranslator0.createBlockingClauseForCurrentModel();
      //  // Unstable assertion: assertTrue(iVecInt0.equals((Object)vecInt0));
      //  // Unstable assertion: assertNotNull(iVecInt0);
      //  // Unstable assertion: assertNotSame(vecInt0, iVecInt0);
      //  // Unstable assertion: assertNotSame(iVecInt0, vecInt0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(iVecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) gateTranslator0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      SearchParams searchParams0 = new SearchParams(0.0, 723);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(723, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(723, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) solver0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "B'}Z:.";
      Minimal4CardinalityModel[] minimal4CardinalityModelArray0 = new Minimal4CardinalityModel[7];
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "B'}Z:.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // B'}Z:.
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      VecInt vecInt0 = new VecInt(15, 1);
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(15, vecInt0.size());
      //  // Unstable assertion: assertEquals(1, vecInt0.last());
      
      vecInt0.insertFirst(1);
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(16, vecInt0.size());
      //  // Unstable assertion: assertEquals(1, vecInt0.last());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 1);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      IConstr iConstr0 = FakeConstr.instance();
      //  // Unstable assertion: assertNotNull(iConstr0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(iConstr0).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(1, 1, (-1460)).when(groupClauseSelectorSolver0).nVars();
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertNotNull(groupClauseSelectorSolver1);
      //  // Unstable assertion: assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      //  // Unstable assertion: assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertNotNull(singleSolutionDetector0);
      //  // Unstable assertion: assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      //  // Unstable assertion: assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      IVecInt iVecInt0 = backbone0.compute((ISolver) singleSolutionDetector0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertTrue(iVecInt0.equals((Object)vecInt0));
      //  // Unstable assertion: assertNotNull(iVecInt0);
      //  // Unstable assertion: assertNotSame(iVecInt0, vecInt0);
      //  // Unstable assertion: assertNotSame(vecInt0, iVecInt0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      //  // Unstable assertion: assertEquals(0, iVecInt0.size());
      //  // Unstable assertion: assertTrue(iVecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver1, iVecInt0);
       //  fail("Expecting exception: NegativeArraySizeException");
       // Unstable assertion
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      VecInt vecInt0 = new VecInt(14, 14);
      assertNotNull(vecInt0);
      assertEquals(14, vecInt0.last());
      assertEquals(14, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 512);
      assertEquals(5, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((-3527)).when(groupClauseSelectorSolver0).nVars();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertNotNull(groupClauseSelectorSolver1);
      assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver1, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -3527
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      
      LightFactory lightFactory0 = LightFactory.instance();
      //  // Unstable assertion: assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      LightFactory.main(stringArray0);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      
      VecInt vecInt0 = (VecInt)backbone0.compute((ISolver) solver0);
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      //  // Unstable assertion: assertTrue(vecInt1.equals((Object)vecInt0));
      //  // Unstable assertion: assertNotNull(vecInt1);
      //  // Unstable assertion: assertNotSame(vecInt0, vecInt1);
      //  // Unstable assertion: assertNotSame(vecInt1, vecInt0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertTrue(vecInt1.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt1.size());
      
      VecInt vecInt2 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt0);
      //  // Unstable assertion: assertTrue(vecInt0.equals((Object)vecInt1));
      //  // Unstable assertion: assertTrue(vecInt2.equals((Object)vecInt1));
      //  // Unstable assertion: assertTrue(vecInt2.equals((Object)vecInt0));
      //  // Unstable assertion: assertNotNull(vecInt2);
      //  // Unstable assertion: assertNotSame(vecInt0, vecInt1);
      //  // Unstable assertion: assertNotSame(vecInt0, vecInt2);
      //  // Unstable assertion: assertNotSame(vecInt2, vecInt0);
      //  // Unstable assertion: assertNotSame(vecInt2, vecInt1);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertTrue(vecInt2.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt2.size());
      
      Backbone backbone1 = Backbone.bb();
      //  // Unstable assertion: assertFalse(backbone1.equals((Object)backbone0));
      //  // Unstable assertion: assertNotNull(backbone1);
      //  // Unstable assertion: assertNotSame(backbone1, backbone0);
      //  // Unstable assertion: assertEquals(0, backbone1.getNumberOfSatCalls());
      
      // Undeclared exception!
      try { 
        backbone1.compute((ISolver) solver0, (IVecInt) vecInt2, (IVecInt) vecInt1);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertNotNull(solver0);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      LightFactory.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      VecInt vecInt0 = (VecInt)backbone0.compute((ISolver) solver0);
      assertNotNull(vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      VecInt vecInt2 = (VecInt)backbone0.compute((ISolver) solver0, (IVecInt) vecInt0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertNotNull(vecInt2);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      
      Backbone backbone1 = Backbone.bb();
      assertFalse(backbone1.equals((Object)backbone0));
      assertNotNull(backbone1);
      assertNotSame(backbone1, backbone0);
      assertEquals(0, backbone1.getNumberOfSatCalls());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-341);
      intArray0[1] = 47;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 848;
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0, vecInt0, solutionFoundListener0);
      assertFalse(backbone0.equals((Object)backbone1));
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.equals((Object)vecInt2));
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      assertFalse(backbone0.equals((Object)backbone1));
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.equals((Object)vecInt2));
      assertNotNull(groupClauseSelectorSolver0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertTrue(groupClauseSelectorSolver0.isSatisfiable());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ClausalCardinalitiesDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertFalse(backbone0.equals((Object)backbone1));
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.equals((Object)vecInt2));
      assertNotNull(clausalCardinalitiesDecorator0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertTrue(groupClauseSelectorSolver0.isSatisfiable());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) clausalCardinalitiesDecorator0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(9, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray1);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(subsetVarOrder0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertArrayEquals(new int[] {2}, intArray1);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(tabuListDecorator0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertArrayEquals(new int[] {2}, intArray1);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, tabuListDecorator0, lubyRestarts0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SolutionCounter solutionCounter0 = new SolutionCounter(solver0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(solutionCounter0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solutionCounter0.lowerBound());
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) solutionCounter0, (IVecInt) vecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(15, 0);
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(15, vecInt0.size());
      //  // Unstable assertion: assertEquals(0, vecInt0.last());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      LightFactory lightFactory0 = new LightFactory();
      //  // Unstable assertion: assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      //  // Unstable assertion: assertNotNull(gateTranslator0);
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      
      VecInt vecInt1 = (VecInt)backbone0.compute((ISolver) solver0);
      //  // Unstable assertion: assertTrue(vecInt1.equals((Object)vecInt0));
      //  // Unstable assertion: assertNotNull(vecInt1);
      //  // Unstable assertion: assertNotSame(vecInt1, vecInt0);
      //  // Unstable assertion: assertEquals(0, backbone0.getNumberOfSatCalls());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, vecInt1.size());
      //  // Unstable assertion: assertTrue(vecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) gateTranslator0, intArray0, (IVecInt) vecInt0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      //  // Unstable assertion: assertNotNull(backbone0);
      //  // Unstable assertion: assertEquals(1, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(15, 0);
      //  // Unstable assertion: assertNotNull(vecInt0);
      //  // Unstable assertion: assertEquals(0, vecInt0.last());
      //  // Unstable assertion: assertEquals(15, vecInt0.size());
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertTrue(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vecInt0.size());
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Product product0 = new Product();
      //  // Unstable assertion: assertNotNull(product0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = " ,s[d";
      stringArray0[1] = "org.sat4j.core";
      stringArray0[2] = "Be@lSCd{ J\"eA_";
      stringArray0[3] = "";
      stringArray0[4] = "yBdNZ$j]#";
      stringArray0[5] = "UNSATISFIABLE";
      Minimal4CardinalityModel[] minimal4CardinalityModelArray0 = new Minimal4CardinalityModel[8];
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(groupClauseSelectorSolver0).nVars();
      doReturn((int[]) null).when(groupClauseSelectorSolver0).primeImplicant();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      //  // Unstable assertion: assertEquals(8, intArray0.length);
      //  // Unstable assertion: assertNotNull(groupClauseSelectorSolver1);
      //  // Unstable assertion: assertFalse(groupClauseSelectorSolver1.isSatisfiable());
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) groupClauseSelectorSolver1);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(15, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.insertFirst(0);
      assertEquals(0, vecInt0.last());
      assertEquals(16, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      assertEquals(8, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      doReturn(false).when(groupClauseSelectorSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      assertEquals(8, intArray0.length);
      assertNotNull(groupClauseSelectorSolver1);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      assertEquals(8, intArray0.length);
      assertNotNull(singleSolutionDetector0);
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt1 = backbone0.compute((ISolver) singleSolutionDetector0, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertNotNull(iVecInt1);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
      assertTrue(groupClauseSelectorSolver1.isSatisfiable());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[8];
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 662, 662, 0, 0).when(groupClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(groupClauseSelectorSolver0).primeImplicant();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(groupClauseSelectorSolver0);
      assertEquals(8, intArray0.length);
      assertNotNull(iVecInt0);
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      IVecInt iVecInt1 = backbone0.compute((ISolver) groupClauseSelectorSolver0, iVecInt0, iVecInt0);
      assertEquals(8, intArray0.length);
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertEquals((-2), iVecInt1.last());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      assertNotNull(backbone0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, iVecInt0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      backbone0.getNumberOfSatCalls();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      VecInt vecInt0 = new VecInt(15, 0);
      vecInt0.insertFirst(0);
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      boolean boolean0 = false;
      int[] intArray1 = new int[1];
      intArray1[0] = 15;
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(groupClauseSelectorSolver1, vecInt0);
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver2 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      groupClauseSelectorSolver1.setDecorated(groupClauseSelectorSolver2);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      IVecInt iVecInt0 = vecInt0.clone();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) singleSolutionDetector0, iVecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      backbone0.getNumberOfSatCalls();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(15, 0);
      vecInt0.insertFirst(0);
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, vecInt0, 0);
      boolean boolean0 = false;
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4CardinalityModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4CardinalityModel>>(groupClauseSelectorSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(groupClauseSelectorSolver1);
      IVecInt iVecInt0 = vecInt0.clone();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) singleSolutionDetector0, iVecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }
}
