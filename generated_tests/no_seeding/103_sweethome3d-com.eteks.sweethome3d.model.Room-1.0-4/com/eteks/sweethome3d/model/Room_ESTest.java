/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:49:26 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.TextStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 2326.2305F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      room0.containsPoint((-4025.47F), 1.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[5][4];
      Room room0 = new Room(floatArray0);
      room0.containsPoint((-2098.2397F), 1562.0284F, (-2572.175F));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(0.5208181F);
      room0.isAreaCenterPointAt(1.0F, 0.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[3];
      floatArray1[1] = 1.0F;
      floatArray0[6] = floatArray1;
      Room room0 = new Room(floatArray0);
      room0.isAreaCenterPointAt(0.18266152F, 0.18266152F, 0.18266152F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(1.0F);
      room0.isAreaCenterPointAt(1.0F, 0.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      room0.isNameCenterPointAt(2093796556, 2093796556, 2093796556);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Room room0 = new Room(floatArray0);
      room0.move(1.0F, 0.18266152F);
      room0.isNameCenterPointAt(1.0F, 0.18266152F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.move(1.0F, 0.0F);
      boolean boolean0 = room0.isNameCenterPointAt(0.0F, (-891.63F), (-891.63F));
      assertEquals(1.0F, room0.getXCenter(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(0.0F, 0.0F, 0.0F);
      assertEquals(0, int0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[3];
      floatArray1[1] = 1.0F;
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(0.0F, (-1763.726F), 0.18266152F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-1), int0);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[3];
      floatArray1[1] = 1.0F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      room0.addPoint(1.0F, (-2572.175F));
      boolean boolean0 = room0.isClockwise();
      assertEquals(4, room0.getPointCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-1.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      room0.addPoint(1.0F, (-2572.175F));
      boolean boolean0 = room0.isClockwise();
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.18266152F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(0.18266152F, 0.18266152F, 0.18266152F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(boolean0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.09133076F, room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(6.08751F);
      room0.setAreaAngle((-1056.5713F));
      assertEquals(5.287028F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.removePoint(1);
      assertEquals(1, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0, 623.494F, 0);
      assertEquals(311.747F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[3][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint((-3105.0F), 3619.4832F, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.removePoint(0);
      // Undeclared exception!
      try { 
        room0.setPoint((-422.0F), 1780.7913F, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle(2048.3086F);
      assertEquals(6.273369F, room0.getNameAngle(), 0.01F);
      
      room0.setNameAngle(0.0F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setName("aV!EP;gP");
      room0.setName("aV!EP;gP");
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.18266152F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 0.18266152F;
      floatArray2[1] = 1.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[1] = (-4736.625F);
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isSingular();
      assertFalse(boolean0);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(false);
      boolean boolean0 = room0.isFloorVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      boolean boolean0 = room0.isCeilingVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float[][] floatArray0 = new float[4][0];
      float[] floatArray1 = new float[8];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.intersectsRectangle(1955.0146F, (-1859.16F), (-1257.7588F), 1545.653F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(boolean0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[3];
      floatArray1[1] = 1.0F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertEquals(0.5F, float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[5][4];
      float[] floatArray1 = new float[3];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-0.5F), float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.move(2907.117F, 2907.117F);
      float float0 = room0.getXCenter();
      assertEquals(2907.117F, room0.getYCenter(), 0.01F);
      assertEquals(2907.117F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.move((-1394.1821F), (-1394.1821F));
      float float0 = room0.getXCenter();
      assertEquals((-1394.1821F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.18266152F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt((-1.0F), 0.18266152F, 1.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals(1, int0);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      room0.setNameYOffset(0.0F);
      float float0 = room0.getNameYOffset();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset(311.9F);
      float float0 = room0.getNameYOffset();
      assertEquals(311.9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(247.0F);
      float float0 = room0.getNameXOffset();
      assertEquals(247.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset((-1363.78F));
      float float0 = room0.getNameXOffset();
      assertEquals((-1363.78F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle((-2862.617F), true, true);
      room0.setNameStyle(textStyle0);
      TextStyle textStyle1 = room0.getNameStyle();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(textStyle1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle(0.0F, false, false);
      room0.setNameStyle(textStyle0);
      TextStyle textStyle1 = room0.getNameStyle();
      assertNotNull(textStyle1);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.setName("/G}}~p|2!Fd[f");
      String string0 = room0.getName();
      assertTrue(room0.isFloorVisible());
      assertNotNull(string0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      CatalogTexture catalogTexture0 = new CatalogTexture("%P", (Content) null, (-1831.9F), (-1831.9F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setFloorTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getFloorTexture();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(homeTexture1);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess((-40.0F));
      float float0 = room0.getFloorShininess();
      assertEquals((-40.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[11][6];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(0);
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(2524);
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(integer1);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-1813));
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(integer1);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      CatalogTexture catalogTexture0 = new CatalogTexture("POINTS", (Content) null, (-176.1F), 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(homeTexture1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      CatalogTexture catalogTexture0 = new CatalogTexture("POINTS", (Content) null, 4148.0F, 132.0F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(homeTexture1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      float[][] floatArray0 = new float[10][7];
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, (Content) null, 776.922F, (-975.0F), true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertNotNull(homeTexture1);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(1.0F);
      float float0 = room0.getCeilingShininess();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(1);
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(integer1);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Integer integer0 = new Integer((-2146974475));
      Room room0 = new Room(floatArray0);
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertNotNull(integer1);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(2326.2305F);
      float float0 = room0.getAreaYOffset();
      assertEquals(2326.2305F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(3779.7756F);
      float float0 = room0.getAreaXOffset();
      assertEquals(3779.7756F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle(3435.0F, true, true);
      room0.setAreaStyle(textStyle0);
      TextStyle textStyle1 = room0.getAreaStyle();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertNotNull(textStyle1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.containsPoint(0.0F, 0.0F, 2524);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(false);
      room0.clone();
      assertFalse(room0.isFloorVisible());
  }
}
