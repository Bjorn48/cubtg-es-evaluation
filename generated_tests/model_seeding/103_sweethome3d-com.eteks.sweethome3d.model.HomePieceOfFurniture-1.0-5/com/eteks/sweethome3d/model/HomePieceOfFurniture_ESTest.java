/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 20:42:43 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.URL;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      float float0 = new Float(0.0F);
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 0.0F, 0.5F);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "\"vNc9vd 8T";
      stringArray0[2] = "peya8B>`<r4N?";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "\"vNc9vd 8T";
      Long long0 = new Long(3378L);
      Float float0 = new Float(0.0);
      Sash[] sashArray0 = new Sash[1];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray0, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPlanIcon();
      LightSource[] lightSourceArray0 = new LightSource[5];
      lightSourceArray0[1] = lightSourceArray0[0];
      lightSourceArray0[2] = lightSourceArray0[1];
      lightSourceArray0[3] = lightSourceArray0[2];
      CatalogLight catalogLight0 = new CatalogLight("peya8B>`<r4N?", "", "", "\"vNc9vd 8T", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, (-2928.7F), (-1.0F), 0.0F, (-1.0F), true, lightSourceArray0, "\"vNc9vd 8T", (float[][]) null, (String) null, true, true, true, (BigDecimal) null, (BigDecimal) null, "m&!\"IZX}MYU");
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setY((-1.0F));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "\"vNc9vd 8T";
      stringArray0[2] = "peya8B>`<r4N?";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "\"vNc9vd 8T";
      Long long0 = new Long(3378L);
      Float float0 = new Float(0.0);
      Sash[] sashArray0 = new Sash[1];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "\"vNc9vd 8T", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray0, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.setNameAngle((-1.0F));
      homeDoorOrWindow0.containsPoint(0.0F, 306.29022F, 0.0F);
      homeDoorOrWindow0.clone();
      TextStyle textStyle0 = new TextStyle((-19.5239F));
      homeDoorOrWindow0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("0", "0", "0", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isPointAt(3.4028235E38F, 1491.922F, 1491.922F);
      homeDoorOrWindow0.isNameCenterPointAt(0.0F, 1.0F, 1.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "v", false, false, false, bigDecimal0, bigDecimal0, "v");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopRightPointAt(13.7F, 13.7F, 2907.0708F);
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.getWidth();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-8.971588F), (-8.971588F), (-8.971588F), (-8.971588F), true, (-8.971588F), (-8.971588F), sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameYOffset(1109.7708F);
      homeDoorOrWindow0.intersectsRectangle((-8.971588F), (-8.971588F), 1109.7708F, 1109.7708F);
      homeDoorOrWindow0.setWidth(1109.7708F);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      bigDecimal0.setScale(2145550320);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setX((-1634.72F));
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.setAngle(0.0F);
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.setElevation(0.0F);
      homeDoorOrWindow1.setNameYOffset((-1.0F));
      homeDoorOrWindow1.setHeight(0.0F);
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow2.setVisible(true);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow2.isTopLeftPointAt(0.0F, 2352.0F, (-1197.66F));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Q<$", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      catalogDoorOrWindow0.getSashes();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.isTopRightPointAt(0.0F, (-4064.0F), (-4064.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setMovable(false);
      homeDoorOrWindow1.isBottomLeftPointAt(0.0F, (-4064.0F), 1.0F);
      homeDoorOrWindow0.getValueAddedTax();
      Random.setNextRandom(9);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", ":!}o=@AFuTYCx", ":!}o=@AFuTYCx", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 10.418354F, (-1.0F), 0.0F, false, 416.417F, 0.0F, sashArray0, (float[][]) null, "", true, false, false, bigDecimal0, bigDecimal0, "io!5C[Aq");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(416.417F);
      bigDecimal0.intValueExact();
      homeDoorOrWindow0.isNameCenterPointAt(416.417F, 1570.0F, 2.0F);
      homeDoorOrWindow0.isPointAt(0.0F, 10.418354F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float(0.3926991F);
      float0.equals((Object) null);
      homeDoorOrWindow0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      homePieceOfFurniture0.setElevation(0.0F);
      homePieceOfFurniture0.isPointAt((-1812.763F), (-1812.763F), (-1.0F));
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow1.setNameYOffset(1.0F);
      homeDoorOrWindow0.setY((-2393.0632F));
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow1.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.access$000((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      float float0 = (-1.0F);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "v", false, false, false, bigDecimal0, bigDecimal0, "v");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setWidth((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.setElevation(0.0F);
      homeDoorOrWindow0.setNameYOffset(0.3926991F);
      homeDoorOrWindow1.setHeight(0.3926991F);
      homeDoorOrWindow1.setY(3216.0F);
      homeDoorOrWindow1.setVisible(true);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow1.setModelMirrored(false);
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, (-1.0F), 0.3926991F);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isTopLeftPointAt(0.3926991F, 0.3926991F, 3678.2932F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("VISIBLE", (Content) null, 27.6344F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 626, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2472.7F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2472.7F;
      floatArray2[3] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-992.3033F);
      floatArray3[1] = (float) 626;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal((long) 626);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "VISIBLE", (Content) null, (Content) null, 0.0F, 0.0F, 2472.7F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setShininess((Float) (-992.3033F));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getLevel();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setName(" ");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, 0.0F, sashArray0, (float[][]) null, "Piece isn't texturable", false, false, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), true, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth((-66.7316F));
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setDescription("PRICE");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.isTopRightPointAt((-41.25F), (-267.8593F), 987.0F);
      homePieceOfFurniture0.getStaircaseCutOutShape();
      homePieceOfFurniture0.setDescription("");
      homePieceOfFurniture0.getName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.intersectsRectangle(0.0F, (-2545.5173F), (-2545.5173F), 4454.969F);
      homeDoorOrWindow0.setWidth(0.0F);
      homeDoorOrWindow1.getGroundElevation();
      homeDoorOrWindow0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("cbNZNAfYBLUFq 6q", ":!}o=@AFuTYCx", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 5.1764355F, (-2131.145F), 10.418354F, false, (-599.0F), (-140.5308F), sashArray0, (float[][]) null, (String) null, true, true, false, bigDecimal0, bigDecimal0, "AR)\"8AL>t4Y");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(1038.75F);
      bigDecimal0.intValueExact();
      homeDoorOrWindow0.isNameCenterPointAt(416.417F, 5.1764355F, 3.4028235E38F);
      homeDoorOrWindow0.isPointAt(1295.1538F, (-3063.0F), (-1024.3385F));
      homeDoorOrWindow0.getTexture();
      homeDoorOrWindow0.getHeight();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", ":!}o=@AFuTYCx", ":!}o=@AFuTYCx", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 1.7385232F, (-1.0F), 0.0F, false, 416.417F, 0.0F, sashArray0, (float[][]) null, "", true, false, false, bigDecimal0, bigDecimal0, "io!5C[Aq");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(416.417F);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow0.setNameAngle(96.19873F);
      homeDoorOrWindow0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.setElevation(0.0F);
      homeDoorOrWindow0.setNameYOffset(0.3926991F);
      homeDoorOrWindow1.setHeight(0.3926991F);
      homeDoorOrWindow1.setVisible(true);
      homeDoorOrWindow1.setModelMirrored(false);
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, (-1.0F), 0.3926991F);
      homeDoorOrWindow0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "peya8B>`<r4N?";
      stringArray0[2] = "peya8B>`<r4N?";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Long long0 = new Long(3378L);
      Float float0 = new Float(0.0);
      Sash[] sashArray0 = new Sash[1];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray0, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 306.29022F, 0.0F);
      homeDoorOrWindow0.clone();
      TextStyle textStyle0 = new TextStyle(0.0F);
      homeDoorOrWindow0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow0.setX((-1307.42F));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.isBottomRightPointAt(0.0F, 1.0F, 1.0F);
      homeDoorOrWindow0.isMovable();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.isTopLeftPointAt(412.0F, 0.0F, 0.0F);
      homeDoorOrWindow0.setMovable(true);
      homeDoorOrWindow0.isNameCenterPointAt(412.0F, 1.0F, 1672.756F);
      homeDoorOrWindow0.isPointAt((-655.0F), 0.0F, (-1.0F));
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(0.0F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameXOffset(3184.9065F);
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameVisible(true);
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      homePieceOfFurniture0.setElevation(0.0F);
      homePieceOfFurniture0.setAngle((-3412.7031F));
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow2.setNameXOffset(5.2831855F);
      homeDoorOrWindow0.setY((-879.4398F));
      homePieceOfFurniture0.getGroundElevation();
      homeDoorOrWindow0.getY();
      homeDoorOrWindow0.getY();
      homeDoorOrWindow2.setDepth(1768.1736F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      float float0 = (-1.0F);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = true;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Q<$", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.0F, 0.0F, 234.26512F, true, (-1049.59F), (-1.0F), sashArray0, (float[][]) null, "", false, true, false, bigDecimal0, bigDecimal0, "PRICE");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-1508.201F), 0.0F, (-1.0F));
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setDepth(234.26512F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopRightPointAt((-1.0F), (-1.0F), (-1.0F));
      homeDoorOrWindow0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(0.3926991F, (-318.23F), 0.0F, (-318.23F), 1.0F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.3926991F, (-318.23F), (-318.23F), 0.3926991F, 571.7F);
      sashArray0[1] = sash1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("w0TXQ1zd%Pe.LN~", "_", "-=[h", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, 0.0F, 0.0F, false, 0.0F, 0.0F, sashArray0, (float[][]) null, "GVn", true, false, true, bigDecimal0, bigDecimal0, "NAME_STYLE");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt((-318.23F), (-203.4626F), 1503.5422F);
      Float float0 = new Float(0.3926991F);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setName("_");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.intersectsRectangle(0.0F, 0.0F, 1109.7708F, 1109.7708F);
      homeDoorOrWindow0.setWidth(1109.7708F);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.getWidth();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "";
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "v", false, false, false, bigDecimal0, bigDecimal0, "v");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      float float0 = (-1.0F);
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      Float float1 = new Float((-49.0F));
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setDepth((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), true, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomLeftPointAt((-66.7316F), (-66.7316F), 371.0F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("0", "0", "0", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, (-318.94992F), 1.0F, true, (-318.94992F), 1.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(1.0F, 1.0F, 1.0F);
      Float float0 = new Float(2.0F);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.setName("0");
      homeDoorOrWindow1.getX();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-318.23F), 0.0F, true, (-318.23F), 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.intValue();
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.intersectsRectangle((-318.23F), (-318.23F), 1109.7708F, 1109.7708F);
      homeDoorOrWindow0.setWidth(1109.7708F);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.isTexturable();
      homeDoorOrWindow0.getPoints();
      homeDoorOrWindow0.setNameVisible(true);
      homeDoorOrWindow0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.isTopLeftPointAt(412.0F, 0.0F, 0.0F);
      homeDoorOrWindow0.setMovable(true);
      homeDoorOrWindow0.isBottomLeftPointAt((-1246.0F), 1735.51F, (-3049.8F));
      homeDoorOrWindow0.getTexture();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.155F), (-1.155F), (-1.155F), (-1.155F), true, (-1.155F), (-1.155F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomRightPointAt((-1.155F), (-1.155F), 3.4028235E38F);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-318.23F), 0.0F, true, (-318.23F), 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.setY(0.0F);
      homeDoorOrWindow0.setVisible(true);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.isNameVisible();
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow0.getDepth();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("GVn", "GVn", "GVn", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "GVn", true, true, true, bigDecimal0, bigDecimal0, "GVn");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(1.0F);
      Integer.valueOf((-2930));
      Integer.valueOf((-2930));
      Integer integer0 = Integer.valueOf(0);
      Integer integer1 = new Integer(14);
      integer0.equals(integer1);
      homeDoorOrWindow0.setColor(integer1);
      homeDoorOrWindow0.getWidth();
      System.setCurrentTimeMillis((-2930));
      homeDoorOrWindow0.isPointAt(0, 2815.4387F, 2815.4387F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setElevation((-1.4804819F));
      homeDoorOrWindow0.isBottomRightPointAt(0.5F, 0.0F, (-1.0F));
      homeDoorOrWindow1.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "_", false, false, false, bigDecimal0, bigDecimal0, "_");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getNameStyle();
      homeDoorOrWindow0.setNameStyle((TextStyle) null);
      homeDoorOrWindow0.setLevel((Level) null);
      homeDoorOrWindow0.isNameCenterPointAt((-1.0F), (-1.0F), 2.0F);
      homeDoorOrWindow0.getModel();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, "PRICE", "com.eteks.sweethome3d.io.HomeURLContent", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-3725.232F), 0.0F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.io.HomeURLContent", true, true, true, bigDecimal0, bigDecimal0, (String) null);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset((-905.0F));
      homeDoorOrWindow0.isNameCenterPointAt(0.0F, 0.0F, (-905.0F));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isPointAt((-1.1554446F), 3.9644678F, 3.9644678F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("VISIBLE", (Content) null, 27.6344F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 626, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2472.7F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2472.7F;
      floatArray2[3] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-992.3033F);
      floatArray3[1] = (float) 626;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal((long) 626);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "VISIBLE", (Content) null, (Content) null, 0.0F, 0.0F, 2472.7F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      homeDoorOrWindow0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), 0.0F, (-1.0F), true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "v", true, true, true, bigDecimal0, bigDecimal0, "v");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-0.5F), (-777.63196F), (-1256.6478F), (-777.63196F), true, (-1.0F), 0.0F, sashArray0, (float[][]) null, "PRICE", true, true, true, bigDecimal0, bigDecimal1, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset((-0.5F));
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 1.0F, (-0.5F));
      homeDoorOrWindow0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.isTopRightPointAt((-72.13849F), (-267.8593F), 987.0F);
      homePieceOfFurniture0.getStaircaseCutOutShape();
      homePieceOfFurniture0.setDescription("");
      homePieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      homePieceOfFurniture1.removePropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.setMovable(true);
      homeDoorOrWindow0.isBackFaceShown();
      homeDoorOrWindow0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.setElevation(0.0F);
      homeDoorOrWindow0.setNameYOffset(0.3926991F);
      homeDoorOrWindow1.setHeight(0.3926991F);
      homeDoorOrWindow1.setY(3.4028235E38F);
      homeDoorOrWindow1.setVisible(true);
      homeDoorOrWindow1.setModelMirrored(false);
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, (-1.0F), 0.3926991F);
      homeDoorOrWindow0.getPrice();
      homeDoorOrWindow0.getPrice();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockURL.getHttpExample();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      CatalogTexture catalogTexture0 = new CatalogTexture("VISIBLE", (Content) null, 27.6344F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 626, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2472.7F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2472.7F;
      floatArray2[3] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-992.3033F);
      floatArray3[1] = (float) 626;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal2 = new BigDecimal((long) 626);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "VISIBLE", (Content) null, (Content) null, 0.0F, 0.0F, 2472.7F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal2, bigDecimal2);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("VISIBLE", (Content) null, 27.6344F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 626, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2472.7F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2472.7F;
      floatArray2[3] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-992.3033F);
      floatArray3[1] = (float) 626;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal((long) 626);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "VISIBLE", (Content) null, (Content) null, 0.0F, 0.0F, 2472.7F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("wp#(1l3EWnI~", "wp#(1l3EWnI~", "wp#(1l3EWnI~", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 1.0F, (-1.0F), true, 1.0F, 1.0F, sashArray0, (float[][]) null, "wp#(1l3EWnI~", false, false, true, bigDecimal0, bigDecimal0, "wp#(1l3EWnI~");
      catalogDoorOrWindow0.getSashes();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.isTopRightPointAt(1.0F, (-38.06721F), 5.5558786F);
      homePieceOfFurniture0.getStaircaseCutOutShape();
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setDepth((-849.12695F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow1.isVisible();
      homeDoorOrWindow0.containsPoint((-1728.9033F), 0.0F, 2.0F);
      homeDoorOrWindow1.clone();
      homeDoorOrWindow1.setElevation(2.0F);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow0.getAngle();
      homeDoorOrWindow1.setElevation(0.0F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float(0.0);
      float0.floatValue();
      float0.floatValue();
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setShininess((Float) 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.40781194F, 0.40781194F, 0.0F, 0.40781194F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.isTopRightPointAt((-41.25F), (-267.8593F), 987.0F);
      homePieceOfFurniture0.setDescription("");
      homePieceOfFurniture0.getName();
      HomePieceOfFurniture.SortableProperty.values();
      homePieceOfFurniture0.isModelMirrored();
      homePieceOfFurniture0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3350.0F, 3350.0F, 0.0F, 3350.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      TextStyle textStyle0 = new TextStyle((-1.0F));
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.LEVEL;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeDoorOrWindow1.getIcon();
      homeDoorOrWindow0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("4V3", "4V3", "4V3", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "4V3", true, true, true, bigDecimal0, bigDecimal0, "4V3");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setName("4V3");
      homeDoorOrWindow0.getLevel();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-967.264F), (-967.264F), (-967.264F), (-967.264F), false, (-967.264F), (-967.264F), sashArray0, (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), false, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", false, false, false, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomLeftPointAt((-66.7316F), (-66.7316F), (-66.7316F));
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.version";
      stringArray0[1] = "java.version";
      stringArray0[2] = "java.version";
      stringArray0[3] = "java.version";
      Long long0 = new Long(982L);
      Float float0 = new Float(51.4796123736);
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogLight catalogLight0 = new CatalogLight("java.version", "java.version", "java.version", (Content) null, (Content) null, (Content) null, 982L, (-2354.3755F), 982L, 982L, false, lightSourceArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0);
      catalogLight0.getModel();
      catalogLight0.getWidth();
      catalogLight0.getDepth();
      catalogLight0.getHeight();
      catalogLight0.getElevation();
      catalogLight0.isMovable();
      catalogLight0.isDoorOrWindow();
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogLight catalogLight1 = new CatalogLight("", "", "(>Oo1y~2[{tA", (Content) null, (Content) null, temporaryURLContent0, 668.921F, 947.79F, 0.0F, 1.0F, false, lightSourceArray0, "java.version", (float[][]) null, "1.5.0_16", false, false, true, bigDecimal0, bigDecimal0, "1.5.0_16");
      catalogLight1.getColor();
      catalogLight1.getModelRotation();
      catalogLight1.getStaircaseCutOutShape();
      catalogLight0.isBackFaceShown();
      catalogLight1.isResizable();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, resourceURLContent0, 982.0F, 0.0F, 0.0F, 2, false, (Integer) null, (float[][]) null, false, 0.0F, false);
      catalogPieceOfFurniture0.isDeformable();
      catalogLight0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Z", "Z", "Z", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, 0.0F, sashArray0, (float[][]) null, "Piece isn't texturable", false, false, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setElevation(0.0F);
      homeDoorOrWindow0.setNameAngle(0.0F);
      homeDoorOrWindow0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[8];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(">", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 891.51794F, 1469.2438F, 0.0F, true, 0.0F, 424.23746F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", true, true, true, bigDecimal0, bigDecimal0, (String) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(891.51794F);
      Integer integer0 = new Integer((-477));
      homeDoorOrWindow0.setColor((Integer) null);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow0.getCatalogId();
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.40781194F, 0.40781194F, 0.0F, 0.40781194F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.isTopRightPointAt((-41.25F), (-267.8593F), 987.0F);
      homePieceOfFurniture0.getStaircaseCutOutShape();
      homePieceOfFurniture0.setDescription("");
      homePieceOfFurniture0.getName();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("0", "0", "0", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, (-318.23F), 1.0F, true, (-318.23F), 1.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(1.0F, 1.0F, 1.0F);
      Float float0 = new Float(2.0F);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.setName("0");
      homeDoorOrWindow1.getDepth();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("PZl])GWGS@h1", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameVisible(true);
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow2);
      HomeDoorOrWindow homeDoorOrWindow4 = homeDoorOrWindow3.clone();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, (-219.47845F), (-1044.05F));
      homeDoorOrWindow2.getNameYOffset();
      homeDoorOrWindow4.setName("PRICE");
      // Undeclared exception!
      try { 
        homeDoorOrWindow3.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.isTopLeftPointAt(3884.6704F, 0.0F, 0.0F);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("Piece isn't resizable");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.getColor();
      Float float0 = new Float(0.0F);
      float0.floatValue();
      float0.floatValue();
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setShininess((Float) 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopRightPointAt((-1.0F), 0.0F, 5.3496823F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.setAngle(0.0F);
      homeDoorOrWindow0.getX();
      homeDoorOrWindow0.isMovable();
      homeDoorOrWindow0.getHeight();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Q<$", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigDecimal0.precision();
      catalogDoorOrWindow0.getSashes();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.setWidth(0.0F);
      homePieceOfFurniture0.isTopRightPointAt((-1.0F), (-4064.0F), (-4064.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setMovable(false);
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), (-4064.0F), 1.0F);
      homeDoorOrWindow0.isNameCenterPointAt(500.0F, (-117.0F), 1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(1.0F);
      Integer.valueOf((-2930));
      Integer.valueOf((-2930));
      Integer integer0 = Integer.valueOf(0);
      Integer integer1 = new Integer(14);
      integer0.equals(integer1);
      homeDoorOrWindow0.setColor(integer1);
      homeDoorOrWindow0.getWidth();
      System.setCurrentTimeMillis((-2930));
      homeDoorOrWindow0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopRightPointAt(13.7F, (-1.0F), 2907.0708F);
      homeDoorOrWindow0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("0", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, (-318.23F), 1.0F, true, (-318.23F), 1.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      BigDecimal.valueOf(0L);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      Integer integer0 = new Integer((-477));
      homeDoorOrWindow0.setColor((Integer) null);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow0.getCatalogId();
      homeDoorOrWindow0.getElevation();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-318.23F), 0.0F, true, (-318.23F), 0.0F, sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.containsPoint((-318.23F), 0.0F, 0.0F);
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      homeDoorOrWindow0.setY(0.0F);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.getIcon();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-318.23F), (-318.23F), 1109.7708F, 1109.7708F, true, 0.0F, (-318.23F), sashArray0, (float[][]) null, " doesn't contain texture ", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(1058.7565F);
      homeDoorOrWindow0.setY((-318.23F));
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow0.setNameAngle(0.0F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("K", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, (BigDecimal) null, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 141.3036F, (-219.47845F));
      Float float0 = new Float(0.0F);
      homeDoorOrWindow0.setName("PRICE");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("xk", "xk", "gF*yn\"6' #", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2086.483F, 0.0F, 3.4028235E38F, 1.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "L4", true, true, true, bigDecimal0, bigDecimal0, "gF*yn\"6' #");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt((-745.573F), 1196.0F, 3.4028235E38F);
      Float float0 = new Float(0.0F);
      homeDoorOrWindow0.clone();
      Level level0 = new Level("hy;*m4QVVw", (-1.0F), (-1.0F), (-2206.4358F));
      Level level1 = level0.clone();
      level1.getElevation();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^D&h5aQPwXx";
      stringArray0[1] = "hy;*m4QVVw";
      stringArray0[2] = "^D&h5aQPwXx";
      Long long0 = new Long((-1037L));
      Float float1 = new Float(0.0);
      Sash[] sashArray1 = new Sash[6];
      Sash sash0 = new Sash(2975.7625F, 2975.7625F, (-228.32086F), 0.0F, 2946.8066F);
      sashArray1[0] = sash0;
      Sash sash1 = new Sash(255.836F, (-1312.0592F), 3.4028235E38F, 1818.7264F, (-1.0F));
      sashArray1[1] = sash1;
      Sash sash2 = new Sash((-1.0F), 2.0F, 3.4028235E38F, 0.0F, 0.0F);
      sashArray1[2] = sash2;
      Sash sash3 = new Sash((-1589.31F), (-1312.0592F), (-1.0F), (-1312.0592F), 0.0F);
      sashArray1[3] = sash3;
      Sash sash4 = new Sash(0.0F, 97.93601F, 3.4028235E38F, 97.93601F, 97.93601F);
      sashArray1[4] = sash4;
      Sash sash5 = new Sash(3.4028235E38F, (-98.41F), 518.676F, 0.0F, (-6770.5625F));
      sashArray1[5] = sash5;
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1818.7264F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1589.31F);
      floatArray1[3] = 2946.8066F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 97.93601F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = 97.93601F;
      floatArray2[1] = 3.4028235E38F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 0.0F;
      floatArray3[1] = (-1312.0592F);
      floatArray3[2] = 1818.7264F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[4];
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 3.4028235E38F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[8];
      floatArray6[0] = 2.0F;
      floatArray6[1] = 3.4028235E38F;
      floatArray6[2] = 3.4028235E38F;
      floatArray6[3] = (-6770.5625F);
      floatArray6[4] = (float) (-1037L);
      floatArray6[5] = (-1589.31F);
      floatArray6[6] = (-6770.5625F);
      floatArray6[7] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = 1818.7264F;
      floatArray7[1] = 0.0F;
      floatArray7[2] = (-1.0F);
      floatArray7[3] = (float) (-1037L);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[4];
      floatArray8[0] = (-98.41F);
      floatArray8[1] = (-1312.0592F);
      floatArray8[2] = 0.0F;
      floatArray8[3] = 0.0F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow1 = null;
      try {
        catalogDoorOrWindow1 = new CatalogDoorOrWindow("^D&h5aQPwXx", "[{", "^D&h5aQPwXx", "[{", stringArray0, long0, float1, (Content) null, (Content) null, (Content) null, (-2206.4358F), 2975.7625F, (-1312.0592F), 2975.7625F, true, (-1037L), 3.4028235E38F, sashArray1, floatArray0, "^D&h5aQPwXx", true, true, true, bigDecimal1, bigDecimal1, "cT>RK%'&8dO.T<Ll=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1024.7704F), (-1183.0358F), 1439.3539F, 1439.3539F, (-945.296F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(3.0735273F, 922.759F, 3310.0F, (-2516.7136F), 922.759F);
      sashArray0[1] = sash1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("PRICE", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1439.3539F, 922.759F, (-318.23F), 8.28F, true, (-12.792481F), (-1.0F), sashArray0, (float[][]) null, "", false, false, true, bigDecimal0, (BigDecimal) null, "PRICE");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getCurrency();
      homeDoorOrWindow0.isPointAt(0.0F, (-2480.768F), (-318.23F));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameVisible(true);
      homeDoorOrWindow0.setColor((Integer) null);
      homeDoorOrWindow0.isPointAt((-1.1554446F), (-1.1554446F), (-1.1554446F));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.intersectsRectangle(0.0F, 0.0F, 1109.7708F, 1109.7708F);
      homeDoorOrWindow0.setWidth(1109.7708F);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.getY();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomRightPointAt((-1.1554446F), (-1.1554446F), (-1.1554446F));
      homeDoorOrWindow0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "t9TfXnzRkT_X");
      HomePieceOfFurniture.Property.values();
      CatalogTexture catalogTexture0 = new CatalogTexture("VISIBLE", (Content) null, 27.6344F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 626, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2472.7F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2472.7F;
      floatArray2[3] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-992.3033F);
      floatArray3[1] = (float) 626;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal((long) 626);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "VISIBLE", (Content) null, (Content) null, 0.0F, 0.0F, 2472.7F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getPrice();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.longValue();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Vn", "Vn", "Vn", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, false, 3.4028235E38F, 3.4028235E38F, sashArray0, (float[][]) null, "Vn", false, false, false, bigDecimal0, bigDecimal0, "Vn");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomLeftPointAt((-634.6F), 3.4028235E38F, (-3024.3848F));
      homeDoorOrWindow0.getModel();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), true, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setDescription(" ");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "do;");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, 10.722756F, 10.722756F, 10.722756F, 10.722756F, true, 10.722756F, 10.722756F, sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomRightPointAt(10.722756F, 10.722756F, 10.722756F);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      Content content1 = homeDoorOrWindow0.getModel();
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "do;", "Fm`)kZI0,xzRt@7\"nN", resourceURLContent0, resourceURLContent0, content1, (-467.87F), (-66.7316F), 3221.2202F, 0.3926991F, false, 401.0F, (-467.87F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal1, bigDecimal0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$17");
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(0.3926991F, 401.0F, 10.722756F);
      homeDoorOrWindow0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setElevation(0.0F);
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("[", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), 0.0F, (-1.0F), true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "v", true, true, true, bigDecimal0, bigDecimal0, "v");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.setLevel((Level) null);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.setName("PRICE");
      homeDoorOrWindow0.isModelMirrored();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("y]Y'J]HiuSVp&Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.y]Y'J]HiuSVp&Z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("VISIBLE", (Content) null, 27.6344F, 27.6344F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 609, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[1] = 27.6344F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2472.7F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 27.6344F;
      floatArray2[1] = 27.6344F;
      floatArray1[5] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[1] = (float) 609;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal((long) 609);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "VISIBLE", (Content) null, (Content) null, 27.6344F, 27.6344F, 2472.7F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.isBottomRightPointAt(1233.237F, 2472.7F, 1233.237F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getRoundingMode();
      bigDecimal0.round(mathContext0);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homePieceOfFurniture0.setName((String) null);
      homeDoorOrWindow0.move((-1.0F), 1.0F);
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), 0.5F, 4.6962657F);
      homePieceOfFurniture0.isDoorOrWindow();
      homeDoorOrWindow0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isPointAt((-1.1554446F), (-1.1554446F), (-1.1554446F));
      homeDoorOrWindow0.getPoints();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "\"vNc9vd 8T";
      stringArray0[2] = "";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "\"vNc9vd 8T";
      Long long0 = new Long(3378L);
      Float float0 = new Float(0.0);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), (-202.64885F), 0.0F, 3378L, 0.0F);
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray0, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPlanIcon();
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("peya8B>`<r4N?", "", "", "\"vNc9vd 8T", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, (-2928.7F), (-82.5F), 0.0F, (-82.5F), true, lightSourceArray0, "\"vNc9vd 8T", (float[][]) null, (String) null, true, true, true, (BigDecimal) null, (BigDecimal) null, "Content isn't a JAR entry");
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameAngle(1401.3755F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", false, false, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setMovable(true);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameAngle(0.0F);
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow1.getShininess();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("}*28D@gxh9<", "", "D", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), 3.4028235E38F, false, 3.4028235E38F, (-2082.1877F), sashArray0, (float[][]) null, "*]U", true, false, true, bigDecimal0, bigDecimal0, "I@2");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(2631.0178F, 3.4028235E38F, 2631.0178F);
      Float float0 = new Float(219.47845F);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GTvS4e5SOZ");
      homeDoorOrWindow1.setName("3700-");
      homeDoorOrWindow1.isDeformable();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("0", "0", "0", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setY(0.0F);
      homeDoorOrWindow0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("GVn", "GVn", "GVn", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "GVn", true, true, true, bigDecimal0, bigDecimal0, "GVn");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setX((-1.0F));
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      homeDoorOrWindow0.setY((-1.0F));
      homeDoorOrWindow0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("GVn", "GVn", "GVn", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "GVn", true, true, true, bigDecimal0, bigDecimal0, "GVn");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      homeDoorOrWindow0.setY((-1.0F));
      homeDoorOrWindow0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.version";
      stringArray0[1] = "java.version";
      stringArray0[2] = "java.version";
      stringArray0[3] = "java.version";
      Long long0 = new Long(982L);
      Float float0 = new Float(51.4796123736);
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogLight catalogLight0 = new CatalogLight("java.version", "java.version", "java.version", (Content) null, (Content) null, (Content) null, 982L, (-2354.3755F), 982L, 982L, false, lightSourceArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0);
      catalogLight0.getModel();
      catalogLight0.getWidth();
      catalogLight0.getDepth();
      catalogLight0.getHeight();
      catalogLight0.getElevation();
      catalogLight0.isMovable();
      catalogLight0.isDoorOrWindow();
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogLight catalogLight1 = new CatalogLight("", "", "(>Oo1y~2[{tA", (Content) null, (Content) null, temporaryURLContent0, 668.921F, 947.79F, 0.0F, 1.0F, false, lightSourceArray0, "java.version", (float[][]) null, "1.5.0_16", false, false, true, bigDecimal0, bigDecimal0, "1.5.0_16");
      catalogLight1.getColor();
      catalogLight1.getModelRotation();
      catalogLight1.getStaircaseCutOutShape();
      catalogLight0.isBackFaceShown();
      catalogLight1.isResizable();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, resourceURLContent0, 982.0F, 0.0F, 0.0F, 2, false, (Integer) null, (float[][]) null, false, 0.0F, false);
      catalogPieceOfFurniture0.isDeformable();
      catalogLight0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(1.0F);
      Integer.valueOf((-2930));
      Integer.valueOf((-2930));
      Integer.valueOf(0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.isTopLeftPointAt((-2930), (-2930), 15.116F);
      homeDoorOrWindow1.getNameYOffset();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      homeDoorOrWindow2.setName("TEXTURE");
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow3.setTexture((HomeTexture) null);
      homeDoorOrWindow1.getCurrency();
      homeDoorOrWindow0.isPointAt((-1634.72F), (-2930), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      homeDoorOrWindow0.setDepth((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.setY((-1832.628F));
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow1.setDescription("NAME_ANGLE");
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.getShininess();
      homeDoorOrWindow0.setNameStyle((TextStyle) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", " ", " ", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", false, false, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setAngle((-2495.5798F));
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameAngle(0.0F);
      homeDoorOrWindow0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setX(0.0F);
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      homePieceOfFurniture0.setElevation(0.0F);
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow1.setDescription("ANGLE");
      homeDoorOrWindow0.setY((-2393.0632F));
      homePieceOfFurniture0.getElevation();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[3];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.longValue();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("V", "V", "V", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, false, 3.4028235E38F, 3.4028235E38F, sashArray0, (float[][]) null, "V", false, false, false, bigDecimal0, bigDecimal0, "V");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomLeftPointAt(10L, 3.4028235E38F, (-3024.385F));
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, false);
      homeDoorOrWindow0.isBottomLeftPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      homeDoorOrWindow0.getLevel();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.removeFirstOccurrence("sd0Q");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.version";
      stringArray0[1] = "java.version";
      stringArray0[2] = "java.version";
      stringArray0[3] = "java.version";
      Long long0 = new Long(982L);
      Float float0 = new Float(51.4796123736);
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogLight catalogLight0 = new CatalogLight("java.version", "java.version", "java.version", (Content) null, (Content) null, (Content) null, 982L, (-2354.3755F), 982L, 982L, false, lightSourceArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0);
      catalogLight0.getModel();
      catalogLight0.getWidth();
      catalogLight0.getDepth();
      catalogLight0.getHeight();
      catalogLight0.getElevation();
      catalogLight0.isMovable();
      catalogLight0.isDoorOrWindow();
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogLight catalogLight1 = new CatalogLight("", "", "(>Oo1y~2[{tA", (Content) null, (Content) null, temporaryURLContent0, 668.921F, 947.79F, 0.0F, 1.0F, false, lightSourceArray0, "java.version", (float[][]) null, "1.5.0_16", false, false, true, bigDecimal0, bigDecimal0, "1.5.0_16");
      catalogLight1.getColor();
      catalogLight1.getModelRotation();
      catalogLight1.getStaircaseCutOutShape();
      catalogLight0.isBackFaceShown();
      catalogLight1.isResizable();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, resourceURLContent0, 982.0F, 0.0F, 0.0F, 2, false, (Integer) null, (float[][]) null, false, 0.0F, false);
      catalogPieceOfFurniture0.isDeformable();
      catalogLight0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "sd0Q");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-0.8646647F), 0.0F, true, (-0.8646647F), (-1.0F), sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(1.0F);
      Integer.valueOf((-2930));
      Integer.valueOf((-2930));
      Integer integer0 = Integer.valueOf(0);
      Integer integer1 = new Integer(14);
      integer0.equals(integer1);
      homeDoorOrWindow0.setColor(integer1);
      homeDoorOrWindow0.getWidth();
      System.setCurrentTimeMillis((-2930));
      homeDoorOrWindow0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.5F, 0.5F, 1050.98F, 1.0F, 0.0F);
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.tools.URLContent", "D", "K[T$X^hUn1l", resourceURLContent0, resourceURLContent1, resourceURLContent0, (-95.7454F), 0.5F, 0.3926991F, 0.5F, true, 0.5F, 1.0F, sashArray0, (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, "K[T$X^hUn1l");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt((-2418.0F), (-1736.6211F), 0.0F);
      Float.valueOf((-198.7F));
      Float.valueOf((-198.7F));
      Float float0 = Float.valueOf((-198.7F));
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.getShininess();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("applicationSubFolder.Windows", "applicationSubFolder.Windows", "applicationSubFolder.Windows", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, 15.5479965F, sashArray0, (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, "");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.isTopRightPointAt((-41.25F), (-41.25F), 987.0F);
      homePieceOfFurniture0.getStaircaseCutOutShape();
      homePieceOfFurniture0.isResizable();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.longValue();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Vn", "Vn", "Vn", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "Vn", false, false, false, bigDecimal0, bigDecimal0, "Vn");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-318.23F), 0.0F, true, (-318.23F), 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-4800.0F), (-4800.0F), 0.0F);
      Float float0 = new Float((-219.47845F));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeDoorOrWindow0.setName("");
      homeDoorOrWindow0.isNameCenterPointAt(0.0F, (-219.47845F), 0.0F);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow0.getWidth();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      homePieceOfFurniture0.setElevation(0.0F);
      homeDoorOrWindow0.getNameStyle();
      MathContext mathContext0 = MathContext.UNLIMITED;
      bigDecimal0.round(mathContext0);
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow1.setNameYOffset(1.0F);
      homeDoorOrWindow0.setY((-2393.0632F));
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow1.getCatalogId();
      homeDoorOrWindow1.getY();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, 0.0F, sashArray0, (float[][]) null, "Piece isn't texturable", false, false, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setShininess((Float) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.isTopLeftPointAt(412.0F, 0.0F, 0.0F);
      homeDoorOrWindow0.setMovable(false);
      homeDoorOrWindow0.isBottomLeftPointAt((-1246.0F), 1735.51F, (-3049.8F));
      homeDoorOrWindow0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.version";
      stringArray0[1] = "java.version";
      stringArray0[2] = "java.version";
      stringArray0[3] = "java.version";
      Long long0 = new Long(982L);
      Float float0 = new Float(51.4796123736);
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogLight catalogLight0 = new CatalogLight("java.version", "java.version", "java.version", (Content) null, (Content) null, (Content) null, 982L, (-2354.3755F), 982L, 982L, false, lightSourceArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0);
      catalogLight0.getModel();
      catalogLight0.getWidth();
      catalogLight0.getDepth();
      catalogLight0.getHeight();
      catalogLight0.getElevation();
      catalogLight0.isMovable();
      catalogLight0.isDoorOrWindow();
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogLight catalogLight1 = new CatalogLight("", "", "(>Oo1y~2[{tA", (Content) null, (Content) null, temporaryURLContent0, 668.921F, 947.79F, 0.0F, 1.0F, false, lightSourceArray0, "java.version", (float[][]) null, "1.5.0_16", false, false, true, bigDecimal0, bigDecimal0, "1.5.0_16");
      catalogLight1.getColor();
      catalogLight1.getModelRotation();
      catalogLight1.getStaircaseCutOutShape();
      catalogLight0.isBackFaceShown();
      catalogLight1.isResizable();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, resourceURLContent0, 982.0F, 0.0F, 0.0F, 2, false, (Integer) null, (float[][]) null, false, 0.0F, false);
      catalogPieceOfFurniture0.isDeformable();
      catalogLight0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getIcon();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", " ", " ", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), true, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setLevel((Level) null);
      homeDoorOrWindow0.setDescription(" ");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setAngle(0.0F);
      homeDoorOrWindow0.setX(0.0F);
      homeDoorOrWindow0.setDescription("PRICE");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[3];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.longValue();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("V", "V", "V", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, false, 3.4028235E38F, 3.4028235E38F, sashArray0, (float[][]) null, "V", false, false, false, bigDecimal0, bigDecimal0, "V");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomLeftPointAt(10L, 3.4028235E38F, (-3024.385F));
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, false);
      bigDecimal0.longValue();
      homeDoorOrWindow0.isTopRightPointAt(3.4028235E38F, (-3024.385F), (-3024.385F));
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      homeDoorOrWindow0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "peya8B>`<r4N?";
      stringArray0[2] = "peya8B>`<r4N?";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Float float0 = new Float(0.0);
      Sash[] sashArray0 = new Sash[1];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray0, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 306.29022F, 0.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      TextStyle textStyle0 = new TextStyle(0.0F);
      homeDoorOrWindow0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow0.setX((-1307.42F));
      homePieceOfFurniture0.getValueAddedTaxPercentage();
      homePieceOfFurniture0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "", "PRICE", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), 0.0F, 0.0F, true, 0.0F, 5.6506267F, sashArray0, (float[][]) null, "", true, (BigDecimal) null, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow2.isVisible();
      homeDoorOrWindow1.containsPoint(2207.5537F, (-506.79025F), 0.0F);
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow3.clone();
      TextStyle textStyle0 = new TextStyle((-506.79025F));
      homeDoorOrWindow1.getAngle();
      homeDoorOrWindow1.setElevation(0.0F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[3];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.longValue();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("V", "V", "V", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, false, 3.4028235E38F, 3.4028235E38F, sashArray0, (float[][]) null, "V", false, false, false, bigDecimal0, bigDecimal0, "V");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomLeftPointAt(10L, 3.4028235E38F, (-3024.385F));
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, false);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setShininess((Float) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockURL.getHttpExample();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "\"vNc9vd 8T";
      stringArray0[2] = "";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "\"vNc9vd 8T";
      Long long0 = new Long(3378L);
      Float float0 = new Float(0.0);
      Sash[] sashArray1 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), (-202.64885F), 0.0F, 3378L, 0.0F);
      sashArray1[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray1, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPlanIcon();
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("peya8B>`<r4N?", "", "", "\"vNc9vd 8T", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, (-2928.7F), (-82.5F), 0.0F, (-82.5F), true, lightSourceArray0, "\"vNc9vd 8T", (float[][]) null, (String) null, true, true, true, (BigDecimal) null, (BigDecimal) null, "Content isn't a JAR entry");
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getElevation();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", " ", " ", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), true, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setMovable(true);
      homeDoorOrWindow0.setLevel((Level) null);
      homeDoorOrWindow0.setDescription(" ");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("`[", "`[", "`[", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 1.0F, 1.0F);
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      homeDoorOrWindow0.setDepth((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.intersectsRectangle(1122.187F, (-1822.0F), 2.0F, (-1822.0F));
      homeDoorOrWindow1.setY((-1832.628F));
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow1.setModelMirrored(false);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow0.setNameAngle((-1832.628F));
      homeDoorOrWindow1.isBottomLeftPointAt(1.0F, 2429.9216F, 2.0F);
      homeDoorOrWindow1.getDescription();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigDecimal0.round(mathContext0);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow0.move((-1.0F), 1.0F);
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), 0.5F, 4.6962657F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setX(0.0F);
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      homeDoorOrWindow1.setDescription("");
      homePieceOfFurniture0.setElevation(0.0F);
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow1.setNameYOffset(1.0F);
      homeDoorOrWindow0.setY((-2393.0632F));
      homePieceOfFurniture0.setAngle(0.0F);
      homeDoorOrWindow1.setDepth(194.29391F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      homePieceOfFurniture0.setElevation(0.0F);
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow1.setNameYOffset(1.0F);
      homePieceOfFurniture0.isBottomRightPointAt(0.0F, (-1.0F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash(589.6115F, 0.3926991F, 0.0F, 0.5F, 0.0F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 0.3926991F, 72.12F, (-1.0F), 0.3926991F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(17.389467F, 0.0F, 72.12F, 674.52484F, 0.0F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(0.0F, 674.52484F, 2.0F, 2.0F, 674.52484F);
      sashArray0[3] = sash3;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("@Sd_{:QnoB3)ut;=", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent1, 2.0F, 589.6115F, 589.6115F, 3410.0945F, false, 17.389467F, 17.389467F, sashArray0, (float[][]) null, "&", false, false, true, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.tools.URLContent");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomRightPointAt((-172.733F), 2.0F, 3410.0945F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 141.3036F, (-219.47845F));
      homeDoorOrWindow0.getNameYOffset();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow2.setName("PRICE");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBackFaceShown();
      homeDoorOrWindow0.getColor();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-0.069088146F), (-0.069088146F), 0.0F, (-0.069088146F), true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "v", true, true, true, bigDecimal0, bigDecimal0, "v");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setElevation(0.0F);
      homeDoorOrWindow0.isNameCenterPointAt(0.0F, (-3389.939F), 217.99F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "}*28D@gxh9<", "}*28D@gxh9<", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "v", true, true, true, bigDecimal0, bigDecimal0, "v");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.setLevel((Level) null);
      homeDoorOrWindow0.getValueAddedTax();
      Random.setNextRandom(8192);
      homeDoorOrWindow0.isResizable();
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.movePointRight(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.5F, sashArray0, (float[][]) null, "Piece isn't texturable", true, true, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setHeight(0.0F);
      homeDoorOrWindow0.setVisible(false);
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow2.setModelMirrored(true);
      homeDoorOrWindow1.isTopLeftPointAt(0.0F, 0.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-2.00746F), 0.0F, true, (-2.00746F), (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset((-2.00746F));
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      Sash[] sashArray1 = new Sash[0];
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.3926991F;
      floatArray1[1] = 0.3926991F;
      floatArray1[2] = (-41.25F);
      floatArray1[3] = 0.3926991F;
      floatArray1[4] = 0.3926991F;
      floatArray1[5] = (-41.25F);
      floatArray1[6] = 2008.3666F;
      floatArray1[7] = (-41.25F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = (-41.25F);
      floatArray2[1] = 0.3926991F;
      floatArray2[2] = 1.0F;
      floatArray2[3] = 2008.3666F;
      floatArray2[4] = (-41.25F);
      floatArray2[5] = 0.3926991F;
      floatArray2[6] = 0.3926991F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 0.3926991F;
      floatArray3[1] = 0.3926991F;
      floatArray3[2] = (-41.25F);
      floatArray3[3] = 2008.3666F;
      floatArray3[4] = 2008.3666F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = 0.3926991F;
      floatArray4[1] = 0.3926991F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = 0.3926991F;
      floatArray5[1] = (-41.25F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = (-41.25F);
      floatArray6[1] = 0.3926991F;
      floatArray6[2] = (-41.25F);
      floatArray6[3] = (-41.25F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      floatArray7[0] = 1.0F;
      floatArray7[1] = (-41.25F);
      floatArray0[6] = floatArray7;
      BigDecimal bigDecimal1 = new BigDecimal((-41.25F));
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "", "", content0, content1, content1, (-41.25F), (-41.25F), 0.3926991F, (-41.25F), true, 0.3926991F, (-41.25F), sashArray1, floatArray0, "", true, true, true, bigDecimal1, bigDecimal1);
      furnitureCategory0.add(catalogDoorOrWindow1);
      furnitureCategory0.getIndexOfPieceOfFurniture(catalogDoorOrWindow1);
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      homeDoorOrWindow0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, (Content) null, 27.6344F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 626, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2472.7F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2472.7F;
      floatArray2[3] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-992.3033F);
      floatArray3[1] = (float) 626;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal((long) 626);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, 0.0F, 0.0F, 2472.7F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1.0F), 0.3926991F, (-1.0F), (-2465.2F), 0.5F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.5F, 2.0F, (-33.928F), (-1.0F), 0.3926991F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-41.25F), 0.0F, (-1632.1248F), 0.0F, 2.0F);
      sashArray0[2] = sash2;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "B", "B", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1632.1248F), (-1632.1248F), (-2465.2F), 0.0F, true, 0.0F, (-2465.2F), sashArray0, (float[][]) null, "u)", false, true, false, bigDecimal0, bigDecimal0, "PRICE");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset((-1.0F));
      homeDoorOrWindow0.getY();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("VISIBLE", (Content) null, 27.6344F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 626, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2472.7F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2472.7F;
      floatArray2[3] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-992.3033F);
      floatArray3[1] = (float) 626;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal((long) 626);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "VISIBLE", (Content) null, (Content) null, 0.0F, 0.0F, 2472.7F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBottomRightPointAt(1233.237F, 2472.7F, 0.5F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 141.3036F, (-219.47845F));
      homeDoorOrWindow1.getSashes();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      homeDoorOrWindow2.setNameXOffset(1317.4935F);
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.isPointAt(0.0F, 1317.4935F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-0.5149204F), 0.0F, true, (-0.5149204F), (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameXOffset((-1.0F));
      homeDoorOrWindow1.setElevation(1.0F);
      homeDoorOrWindow0.setAngle((-3412.7031F));
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset((-1.0F));
      homeDoorOrWindow1.setY(3350.0F);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow1.getY();
      homeDoorOrWindow0.getY();
      homeDoorOrWindow1.getAngle();
      homeDoorOrWindow0.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      CatalogTexture catalogTexture0 = new CatalogTexture("VISIBLE", (Content) null, 27.6344F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 626, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-992.3033F);
      floatArray3[1] = (float) 626;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal((long) 626);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "VISIBLE", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "\"vNc9vd 8T";
      stringArray0[2] = "";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "\"vNc9vd 8T";
      Long long0 = new Long(3378L);
      Float float0 = new Float(0.0);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), (-202.64885F), 0.0F, 3378L, 0.0F);
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray0, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPlanIcon();
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("peya8B>`<r4N?", "", "", "\"vNc9vd 8T", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, (-2928.7F), (-82.5F), 0.0F, (-82.5F), true, lightSourceArray0, "\"vNc9vd 8T", (float[][]) null, (String) null, true, true, true, (BigDecimal) null, (BigDecimal) null, "Content isn't a JAR entry");
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setY((-1.0F));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.isPointAt(0.0F, (-2790.134F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), false, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", false, false, false, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomLeftPointAt((-66.7316F), (-66.7316F), 371.0F);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Z>", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Z>", true, true, false, bigDecimal0, bigDecimal0, "Z>");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.setNameXOffset((-1.0F));
      homeDoorOrWindow0.getShininess();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDescription("PRICE");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      homeDoorOrWindow2.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow0.getAngle();
      homeDoorOrWindow2.setElevation(0.0F);
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow3.isBottomRightPointAt(2.0F, 0.0F, 1.0F);
      homeDoorOrWindow3.setName("Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow4 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow4.move(1.0F, 0.0F);
      homeDoorOrWindow2.isBottomRightPointAt(0.0F, 4.6962657F, 0.5F);
      homeDoorOrWindow2.getDepth();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getPrecision();
      bigDecimal0.round(mathContext0);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      mathContext0.getRoundingMode();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow0.move((-1.0F), 1.0F);
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), 0.5F, 4.6962657F);
      homePieceOfFurniture0.isTopLeftPointAt(7, 0.0F, 1294.397F);
      homeDoorOrWindow1.getAngle();
      homeDoorOrWindow0.setMovable(true);
      homePieceOfFurniture0.getModel();
      homePieceOfFurniture0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow3.setNameXOffset((-1.0F));
      homeDoorOrWindow3.setModelMirrored(true);
      homeDoorOrWindow1.intersectsRectangle(3.4028235E38F, 5.352856F, (-3537.1233F), (-1399.7F));
      homeDoorOrWindow3.setWidth(1.0F);
      homeDoorOrWindow1.getGroundElevation();
      homeDoorOrWindow1.getY();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      homeDoorOrWindow0.setDepth((-1.0F));
      homeDoorOrWindow0.isTopLeftPointAt(1.0F, 0.0F, 141.3036F);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.setName("");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow1.setElevation(1762.2139F);
      homeDoorOrWindow1.setNameYOffset((-1.0F));
      homeDoorOrWindow1.setY(1328.2661F);
      homeDoorOrWindow1.setVisible(true);
      homeDoorOrWindow1.setModelMirrored(false);
      homeDoorOrWindow1.setHeight((-4180.31F));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow2.setNameXOffset((-879.4398F));
      homeDoorOrWindow2.setElevation(0.0F);
      homeDoorOrWindow2.setAngle((-3412.7031F));
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow3.setNameXOffset(5.2831855F);
      HomeDoorOrWindow homeDoorOrWindow4 = new HomeDoorOrWindow(homeDoorOrWindow2);
      homeDoorOrWindow4.isTopLeftPointAt((-1.0F), 0.0F, (-1.0F));
      homeDoorOrWindow2.setModelMirrored(false);
      homeDoorOrWindow1.getName();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "com.eteks.sweethome3d.model.Sash", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 576.892F, 576.892F, true, 0.0F, 4963.087F, sashArray0, (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal1, "com.eteks.sweethome3d.model.Sash");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset((-879.4398F));
      homeDoorOrWindow0.isTopLeftPointAt(723.9F, 0.0F, (-879.4398F));
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setHeight((-0.9961066F));
      homeDoorOrWindow0.isTopRightPointAt(13.7F, (-1.0F), 2907.0708F);
      homeDoorOrWindow0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), true, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setElevation(1896.265F);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setDescription("PRICE");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setAngle(0.0F);
      homeDoorOrWindow0.getX();
      homeDoorOrWindow0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "\"vNc9vd 8T";
      stringArray0[2] = "";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "\"vNc9vd 8T";
      Long long0 = new Long(3378L);
      Float float0 = new Float(0.0);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), (-202.64885F), 0.0F, 3378L, 0.0F);
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray0, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPlanIcon();
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("peya8B>`<r4N?", "", "", "\"vNc9vd 8T", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, (-2928.7F), (-82.5F), 0.0F, (-82.5F), true, lightSourceArray0, "\"vNc9vd 8T", (float[][]) null, (String) null, true, true, true, (BigDecimal) null, (BigDecimal) null, "Content isn't a JAR entry");
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getName();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("GVn", "GVn", "GVn", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "GVn", true, true, true, bigDecimal0, bigDecimal0, "GVn");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setY((-1.0F));
      homeDoorOrWindow0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.intersectsRectangle(0.0F, 1109.7708F, 2054.5F, 0.5F);
      homeDoorOrWindow1.setWidth((-1782.0F));
      homeDoorOrWindow1.isTopLeftPointAt(0.5F, 3.0987458F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ov", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.getAngle();
      MathContext mathContext0 = MathContext.DECIMAL128;
      bigDecimal0.plus(mathContext0);
      homeDoorOrWindow1.setElevation((-373.5077F));
      homeDoorOrWindow0.setNameYOffset((-373.5077F));
      homeDoorOrWindow0.setY(0.0F);
      homeDoorOrWindow0.getIcon();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("do;", propertyChangeListener0);
      homeDoorOrWindow0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeDoorOrWindow0.isTopRightPointAt(13.7F, (-1.0F), 2907.0708F);
      homeDoorOrWindow0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-318.23F), 0.0F, true, (-318.23F), 0.0F, sashArray0, (float[][]) null, "F", true, true, true, bigDecimal0, bigDecimal0, "F");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.isNameVisible();
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.clone();
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow1.setName("F");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", " ", " ", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), true, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.intersectsRectangle((-66.7316F), (-14.22F), (-14.22F), 371.0F);
      homeDoorOrWindow0.isBottomLeftPointAt((-66.7316F), (-66.7316F), 371.0F);
      homeDoorOrWindow0.getLevel();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "4V3";
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("4V3", "4V3", "4V3", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "4V3", false, false, false, bigDecimal0, bigDecimal0, "4V3");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setColor((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-318.23F), 0.0F, true, (-318.23F), 0.0F, sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameYOffset(1196.0F);
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      homeDoorOrWindow0.setY(0.0F);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-318.23F), (-318.23F), 1109.7708F, 1109.7708F, true, 0.0F, (-318.23F), sashArray0, (float[][]) null, " doesn't contain texture ", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(1058.7565F);
      homeDoorOrWindow0.setY((-318.23F));
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.getCurrency();
      homeDoorOrWindow0.isPointAt((-318.23F), 1109.7708F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      homePieceOfFurniture0.setElevation(0.0F);
      homePieceOfFurniture0.isPointAt((-1812.763F), (-1812.763F), (-1.0F));
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow1.isTopLeftPointAt((-879.4398F), 1.1506404F, 1.1506404F);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow1.setName("");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      homePieceOfFurniture0.setElevation(0.0F);
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow1.setNameYOffset(1.0F);
      homeDoorOrWindow0.setY((-2393.0632F));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigDecimal0.round(mathContext0);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow0.move((-1.0F), 1.0F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), (-1.0F), (-5232.0F), 0.0F, 3165.6F);
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("D", "f0k*CG{|orE'@R&F8^^", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, (-2393.0632F), true, (-2393.0632F), 1277.351F, sashArray0, (float[][]) null, "YwafTL~Y6,')0&([Oy", false, true, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$17");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset((-5232.0F));
      homeDoorOrWindow0.isNameCenterPointAt(3378.0F, 1277.351F, 0.0F);
      TextStyle textStyle0 = new TextStyle(0.0F);
      homeDoorOrWindow0.setNameStyle(textStyle0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.isNameCenterPointAt((-1.0F), 1806.3954F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRC", "PRC", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), true, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isNameCenterPointAt(3.4028235E38F, (-66.7316F), 3.4028235E38F);
      homeDoorOrWindow0.getLevel();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      float float0 = (-1.0F);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("GVn", "GVn", "GVn", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "GVn", false, false, false, bigDecimal0, bigDecimal0, "GVn");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      boolean boolean0 = true;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      float float0 = 1.0F;
      boolean boolean1 = true;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("?q>I%-+eS", "Piece isn't texturable", "es:2)n\"OV{(/~", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-1.0F), 1.0F, false, 1.0F, 409.9579F, sashArray0, (float[][]) null, "es:2)n\"OV{(/~", false, true, false, bigDecimal0, bigDecimal0, "?q>I%-+eS");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      float float1 = 2556.9783F;
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      bigDecimal0.setScale(14, roundingMode0);
      homeDoorOrWindow1.setElevation(2556.9783F);
      float float2 = 0.0F;
      homeDoorOrWindow1.setNameYOffset(0.0F);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setHeight((-29.383196F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      homeDoorOrWindow0.setDepth((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.setY((-1832.628F));
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow1.setModelMirrored(false);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow1.getDepth();
      homeDoorOrWindow1.getDepth();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 440.9F, false, (-1.0F), 0.0F, sashArray1, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal1, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(4.6962657F);
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-318.64502F), 0.0F, true, (-318.64502F), 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setWidth(1109.7708F);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.isTexturable();
      homeDoorOrWindow0.isModelMirrored();
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "v", false, false, false, bigDecimal0, bigDecimal0, "v");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isPointAt(4329.897F, 4329.897F, 1196.0F);
      homeDoorOrWindow0.isNameCenterPointAt(1056.5363F, 0.0F, 1805.1771F);
      homeDoorOrWindow0.isTopRightPointAt(1196.0F, 1805.1771F, 5.2831855F);
      homeDoorOrWindow0.isMovable();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Q<$", "PRICE", "2&3SSsqy", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), (-1.0F), false, 0.3926991F, (-10.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      catalogDoorOrWindow0.getSashes();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setMovable(true);
      homeDoorOrWindow0.isBottomLeftPointAt(0.3926991F, (-4064.0F), 333.0F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.longValue();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("GVn", "GVn", "GVn", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "GVn", true, true, true, bigDecimal0, bigDecimal0, "GVn");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.containsPoint((-1.0F), (-3024.3848F), (-3024.3848F));
      homeDoorOrWindow1.isBottomLeftPointAt((-634.6F), (-1.0F), (-3024.3848F));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigDecimal0.divide(bigDecimal1, mathContext0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("0", "0", "0", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext1 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setDepth((-1.0F));
      homeDoorOrWindow0.setNameAngle(0.0F);
      homeDoorOrWindow0.setVisible(true);
      Integer integer0 = new Integer(265);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      Float float0 = new Float(0.0);
      homeDoorOrWindow1.setColor(integer0);
      homeDoorOrWindow1.getColor();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockURL.getHttpExample();
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("D", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 891.51794F, 1469.2438F, 0.0F, true, 0.0F, 441.99F, sashArray0, (float[][]) null, "9", true, true, true, bigDecimal0, bigDecimal0, (String) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(891.51794F);
      Integer.valueOf((-2930));
      Integer.valueOf((-2930));
      Integer integer0 = Integer.valueOf(0);
      Integer integer1 = new Integer((-477));
      integer0.equals("D");
      homeDoorOrWindow0.setColor((Integer) null);
      Float float0 = new Float(1866.1522F);
      homeDoorOrWindow0.setName((String) null);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      homeDoorOrWindow0.isTopLeftPointAt(3884.6704F, (-1.0F), (-1.0F));
      homeDoorOrWindow0.isVisible();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeDoorOrWindow1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setX(0.0F);
      homeDoorOrWindow2.setNameXOffset((-879.4398F));
      homeDoorOrWindow2.setElevation(0.0F);
      homeDoorOrWindow0.getNameStyle();
      homeDoorOrWindow2.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow1.setNameYOffset(1.0F);
      homeDoorOrWindow0.setY((-2393.0632F));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Sash[] sashArray0 = new Sash[6];
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[8];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(">", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 891.51794F, 1468.6042F, 0.0F, true, 0.0F, 424.23746F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", true, true, true, bigDecimal0, bigDecimal0, (String) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(891.51794F);
      Integer integer0 = new Integer((-477));
      homeDoorOrWindow0.setColor((Integer) null);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow0.isNameCenterPointAt((-477), 424.23746F, 891.51794F);
      homeDoorOrWindow0.getName();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      CatalogTexture catalogTexture0 = new CatalogTexture("VISIBLE", (Content) null, 27.6344F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 626, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2472.7F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2472.7F;
      floatArray2[3] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-992.3033F);
      floatArray3[1] = (float) 626;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal((long) 626);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "VISIBLE", (Content) null, (Content) null, 0.0F, 0.0F, 2472.7F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      HomePieceOfFurniture.getFurnitureComparator((HomePieceOfFurniture.SortableProperty) null);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("VISIBLE", (Content) null, 27.6344F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(2433.0);
      LightSource lightSource0 = new LightSource(1656.4341F, 0.0F, 1233.237F, 626, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1656.4341F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1233.237F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2472.7F;
      floatArray1[5] = 1233.237F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2472.7F;
      floatArray2[3] = (-2578.1921F);
      floatArray2[4] = 1233.237F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-992.3033F);
      floatArray3[1] = (float) 626;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1233.237F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal((long) 626);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "VISIBLE", (Content) null, (Content) null, 0.0F, 0.0F, 2472.7F, 0.0F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getHeight();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "v", false, false, false, bigDecimal0, bigDecimal0, "v");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setLevel((Level) null);
      homeDoorOrWindow0.isNameCenterPointAt((-1.0F), (-1.0F), 2.0F);
      homeDoorOrWindow0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), 0.0F, (-1.0F), true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "v", true, true, true, bigDecimal0, bigDecimal0, "v");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.setLevel((Level) null);
      homeDoorOrWindow0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-318.23F), 0.0F, true, (-318.23F), 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.setY((-318.23F));
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      homeDoorOrWindow0.setAngle((-318.23F));
      homeDoorOrWindow0.isPointAt(1.0F, 0.0F, 1931.847F);
      homeDoorOrWindow0.setAngle(0.0F);
      homeDoorOrWindow0.getX();
      homeDoorOrWindow0.isPointAt(1.0F, 1.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("GVn", "GVn", "GVn", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "GVn", true, true, true, bigDecimal0, bigDecimal0, "GVn");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      Integer integer0 = new Integer(2147483321);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.version";
      stringArray0[1] = "java.version";
      stringArray0[2] = "java.version";
      stringArray0[3] = "java.version";
      Long long0 = new Long(982L);
      Float float0 = new Float(51.4796123736);
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogLight catalogLight0 = new CatalogLight("java.version", "java.version", "java.version", (Content) null, (Content) null, (Content) null, 982L, (-2354.3755F), 982L, 982L, false, lightSourceArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0);
      catalogLight0.getModel();
      catalogLight0.getWidth();
      catalogLight0.getDepth();
      catalogLight0.getHeight();
      catalogLight0.getElevation();
      catalogLight0.isMovable();
      catalogLight0.isDoorOrWindow();
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogLight catalogLight1 = new CatalogLight("", "", "(>Oo1y~2[{tA", (Content) null, (Content) null, temporaryURLContent0, 668.921F, 947.79F, 0.0F, 1.0F, false, lightSourceArray0, "java.version", (float[][]) null, "1.5.0_16", false, false, true, bigDecimal0, bigDecimal0, "1.5.0_16");
      catalogLight1.getColor();
      catalogLight1.getModelRotation();
      catalogLight1.getStaircaseCutOutShape();
      catalogLight0.isBackFaceShown();
      catalogLight1.isResizable();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, resourceURLContent0, 982.0F, 0.0F, 0.0F, 2, false, (Integer) null, (float[][]) null, false, 0.0F, false);
      catalogPieceOfFurniture0.isDeformable();
      catalogLight0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setElevation(0.0F);
      homeDoorOrWindow0.isBottomRightPointAt(0.5F, 0.0F, (-1.0F));
      homeDoorOrWindow0.containsPoint(0.0F, 3430.563F, (-879.4398F));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth((-3826.0789F));
      homeDoorOrWindow0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setX(0.0F);
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      homePieceOfFurniture0.setElevation(0.0F);
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow1.setNameYOffset(1.0F);
      homeDoorOrWindow0.setY((-2393.0632F));
      homePieceOfFurniture0.setAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getPrecision();
      bigDecimal0.round(mathContext0);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow0.move((-1.0F), 1.0F);
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), 0.5F, 4.6962657F);
      homePieceOfFurniture0.isTopLeftPointAt(7, 0.0F, 1294.397F);
      homeDoorOrWindow1.getAngle();
      homeDoorOrWindow0.setMovable(true);
      homePieceOfFurniture0.isBottomLeftPointAt((-1410.4F), 7, 1735.51F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "peya8B>`<r4N?";
      stringArray0[2] = "peya8B>`<r4N?";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Long long0 = new Long(3378L);
      Float float0 = new Float(0.0);
      Sash[] sashArray0 = new Sash[1];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray0, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 306.29022F, 0.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      TextStyle textStyle0 = new TextStyle(0.0F);
      homeDoorOrWindow0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homePieceOfFurniture0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isPointAt((-1.1554446F), (-1.1554446F), (-1.1554446F));
      homeDoorOrWindow0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("D", ":!}o=@AFuTYCx", ":!}o=@AFuTYCx", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 2.4366245F, (-1.0F), 0.0F, false, 416.417F, 0.0F, sashArray0, (float[][]) null, "", true, false, false, bigDecimal0, bigDecimal0, "io!5C[Aq");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(416.417F);
      homeDoorOrWindow0.isNameCenterPointAt(416.417F, 1806.3954F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setY((-2566.275F));
      homeDoorOrWindow1.setVisible(false);
      homeDoorOrWindow0.isPointAt(1196.0F, (-2566.275F), 217.99F);
      homeDoorOrWindow0.isNameCenterPointAt(0.25F, 1013.28F, 1104.0F);
      homeDoorOrWindow0.isTopRightPointAt(3741.1F, (-1242.0F), (-2566.275F));
      homeDoorOrWindow1.isVisible();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getRoundingMode();
      bigDecimal0.round(mathContext0);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homePieceOfFurniture0.setName((String) null);
      homeDoorOrWindow0.move((-1.0F), 1.0F);
      homePieceOfFurniture0.setY(0.0F);
      homeDoorOrWindow0.isResizable();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(5.2831855F);
      homeDoorOrWindow0.isNameCenterPointAt((-879.4398F), (-0.5F), (-879.4398F));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getTexture();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.setElevation(0.0F);
      homeDoorOrWindow0.setNameYOffset(0.3926991F);
      homeDoorOrWindow1.setY(3.4028235E38F);
      homeDoorOrWindow1.setVisible(true);
      homeDoorOrWindow1.setModelMirrored(false);
      homeDoorOrWindow1.isBottomLeftPointAt(2393.0632F, (-1.0F), (-1.0F));
      homeDoorOrWindow1.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow2.setNameXOffset((-1.0F));
      homeDoorOrWindow2.isBottomRightPointAt((-1.0F), (-1.0F), 0.0F);
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow4 = new HomeDoorOrWindow(homeDoorOrWindow1);
      HomeDoorOrWindow homeDoorOrWindow5 = homeDoorOrWindow4.clone();
      HomeDoorOrWindow homeDoorOrWindow6 = new HomeDoorOrWindow(homeDoorOrWindow5);
      homeDoorOrWindow6.setMovable(true);
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), 0.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      boolean boolean0 = false;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      float float0 = 0.0F;
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Z", "Z", "Z", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, 0.0F, sashArray0, (float[][]) null, "Piece isn't texturable", false, false, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setHeight(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      homeDoorOrWindow0.setDepth((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      Integer integer0 = new Integer((-664));
      Integer integer1 = Integer.getInteger("A'HZ", (-1589));
      Integer integer2 = new Integer((-2433));
      integer1.equals(integer2);
      Object object0 = new Object();
      integer2.equals(object0);
      Integer integer3 = new Integer(276);
      Integer.max(2215, 1809449290);
      integer3.equals((Object) null);
      homeDoorOrWindow1.setColor(integer3);
      homeDoorOrWindow0.getWidth();
      System.setCurrentTimeMillis(276);
      homeDoorOrWindow1.getElevation();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isPointAt((-1.1554446F), (-1.1554446F), (-1.1554446F));
      homeDoorOrWindow0.isNameCenterPointAt((-1.1554446F), (-1.1554446F), (-1.1554446F));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "\"vNc9vd 8T";
      stringArray0[2] = "peya8B>`<r4N?";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "\"vNc9vd 8T";
      Long long0 = new Long(3378L);
      Float float0 = new Float(0.0);
      Sash[] sashArray0 = new Sash[1];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "\"vNc9vd 8T", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray0, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 306.29022F, 0.0F);
      homeDoorOrWindow0.clone();
      TextStyle textStyle0 = new TextStyle((-19.5239F));
      homeDoorOrWindow0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("gFdF", "gFdF", "gFdF", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "gFdF", true, true, true, bigDecimal0, bigDecimal0, "gFdF");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getShininess();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setWidth(0.0F);
      homeDoorOrWindow0.isTopRightPointAt(13.7F, (-1.0F), 2907.0708F);
      homeDoorOrWindow0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, 0.0F, sashArray0, (float[][]) null, "Piece isn't texturable", false, false, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      TextStyle textStyle0 = new TextStyle(0.0F, false, false);
      homeDoorOrWindow0.setNameStyle(textStyle0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameAngle(0.0F);
      homeDoorOrWindow0.getIcon();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.98444206F, 0.98444206F, (-318.23F), 0.98444206F, true, (-318.23F), 0.98444206F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-4800.0F), (-4800.0F), 0.98444206F);
      Float float0 = new Float((-219.47845F));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), 908.73F, 1931.847F);
      Float float1 = new Float((-219.47845F));
      homeDoorOrWindow1.setName("D");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      float float0 = 0.0F;
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      Integer.valueOf((-2930));
      Integer.valueOf((-2930));
      Integer integer0 = Integer.valueOf((-2930));
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setY(0.0F);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow0.setNameAngle(3974.0F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setY((-2566.275F));
      homeDoorOrWindow1.setVisible(false);
      homeDoorOrWindow0.isPointAt(1196.0F, (-2566.275F), 217.99F);
      homeDoorOrWindow0.isNameCenterPointAt(0.25F, 1013.28F, 1104.0F);
      homeDoorOrWindow1.getDescription();
      homeDoorOrWindow1.getAngle();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-40.86051F), (-40.86051F), (-40.86051F), (-40.86051F), true, (-40.86051F), (-40.86051F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-1810.3948F), (-1810.3948F), (-1810.3948F));
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setDescription("PRICE");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockURL.getHttpExample();
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("D", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 895.0663F, 1469.2438F, 0.0F, true, 0.0F, 441.99F, sashArray0, (float[][]) null, "9", true, true, true, bigDecimal0, bigDecimal0, (String) null);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.5F);
      Integer.valueOf((-2930));
      Integer.valueOf((-2930));
      Integer integer0 = Integer.valueOf(0);
      Integer integer1 = new Integer((-477));
      integer0.equals((Object) null);
      homeDoorOrWindow0.setColor((Integer) null);
      homeDoorOrWindow0.getWidth();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, (float[][]) null, "D", true, true, true, bigDecimal0, bigDecimal0, "D");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.0F);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.clone();
      homeDoorOrWindow1.setNameXOffset(5.352856F);
      homeDoorOrWindow1.setElevation((-879.4398F));
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.getAngle();
      homeDoorOrWindow0.setElevation(0.0F);
      homeDoorOrWindow0.setNameYOffset(0.0F);
      homeDoorOrWindow0.setY(5.352856F);
      homeDoorOrWindow0.setAngle((-879.4398F));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", false, false, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setWidth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" ", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-66.7316F), (-66.7316F), (-66.7316F), (-66.7316F), true, (-66.7316F), (-66.7316F), sashArray0, (float[][]) null, " ", true, true, true, bigDecimal0, bigDecimal0, " ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setDescription("PRICE");
      homeDoorOrWindow0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow1.setElevation(0.0F);
      homeDoorOrWindow0.isBottomRightPointAt(0.5F, 0.59797376F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[3];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.longValue();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("V", "V", "V", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, false, 3.4028235E38F, 3.4028235E38F, sashArray0, (float[][]) null, "V", false, false, false, bigDecimal0, bigDecimal0, "V");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomLeftPointAt(10L, 3.4028235E38F, (-3024.385F));
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, false);
      bigDecimal0.longValue();
      homeDoorOrWindow0.isTopRightPointAt(3.4028235E38F, (-3024.385F), (-3024.385F));
      homeDoorOrWindow0.getLevel();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.containsPoint(0.0F, 0.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      URLContent uRLContent0 = new URLContent(uRL0);
      Sash[] sashArray0 = new Sash[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash sash0 = new Sash(0.0F, 3332.5188F, (-574.8347F), 0.0F, (-574.8347F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.155F), 0.0F, (-1.155F), (-206.1F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(3.9644678F, 0.0F, (-2243.4F), 1515.72F, 0.5F);
      sashArray0[2] = sash2;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("jb~o1'", "V6dt", (String) null, resourceURLContent0, resourceURLContent0, uRLContent0, (-1.155F), 1515.72F, 1515.72F, 0.0F, true, 0.0F, (-1.155F), sashArray0, (float[][]) null, "#sXdCEP", true, false, true, bigDecimal0, bigDecimal0, (String) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("<$", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "Piece isn't texturable", true, true, true, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      MathContext mathContext0 = MathContext.DECIMAL32;
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.setElevation(0.0F);
      homeDoorOrWindow0.setNameYOffset(0.3926991F);
      homeDoorOrWindow1.setY(3.4028235E38F);
      homeDoorOrWindow1.setVisible(true);
      homeDoorOrWindow1.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.1554446F), (-1.1554446F), (-1.1554446F), (-1.1554446F), true, (-1.1554446F), (-1.1554446F), sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigDecimal0.round(mathContext0);
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getAngle();
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, (-1.0F), (-1.0F), false, 0.5F, (-3151.0F), sashArray0, (float[][]) null, "-Z}o=e(", false, false, false, bigDecimal0, bigDecimal0, "");
      homeDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      homeDoorOrWindow0.setNameXOffset((-174.8616F));
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, (-696.0F), 1.0F);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty.values();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "\"vNc9vd 8T";
      stringArray0[2] = "";
      stringArray0[3] = "peya8B>`<r4N?";
      stringArray0[4] = "";
      stringArray0[5] = "\"vNc9vd 8T";
      Long long0 = new Long(3378L);
      Float float0 = new Float(0.0);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), (-202.64885F), 0.0F, 3378L, 0.0F);
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("peya8B>`<r4N?", "", "m&!\"IZX}MYU", (Content) null, (Content) null, 3378L, 3378L, 1.0F, (-1.0F), true, 0.0F, 3378L, sashArray0, (float[][]) null, "peya8B>`<r4N?", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPlanIcon();
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("peya8B>`<r4N?", "", "", "\"vNc9vd 8T", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, (-2928.7F), (-82.5F), 0.0F, (-82.5F), true, lightSourceArray0, "\"vNc9vd 8T", (float[][]) null, (String) null, true, true, true, (BigDecimal) null, (BigDecimal) null, "Content isn't a JAR entry");
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameAngle((-202.64885F));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("cN1S|v3x-I", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "cN1S|v3x-I", true, true, true, bigDecimal0, bigDecimal0, "cN1S|v3x-I");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.move(1109.7708F, 1109.7708F);
      homeDoorOrWindow0.intersectsRectangle((-1.0F), (-1.0F), 1109.7708F, 1109.7708F);
      homeDoorOrWindow0.getGroundElevation();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setDescription("PRICE");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Sash[] sashArray0 = new Sash[8];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(">", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 891.51794F, 1469.2438F, 0.0F, true, 0.0F, 424.23746F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", true, true, true, bigDecimal0, bigDecimal0, (String) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(891.51794F);
      Integer integer0 = new Integer((-477));
      homeDoorOrWindow0.setColor((Integer) null);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow0.setName((String) null);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow0.isVisible();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setNameXOffset((-879.4398F));
      homePieceOfFurniture0.setElevation(0.0F);
      homeDoorOrWindow0.getNameStyle();
      homePieceOfFurniture0.getAngle();
      homeDoorOrWindow0.setElevation(1.0F);
      homeDoorOrWindow1.setNameYOffset(1.0F);
      homeDoorOrWindow0.setY((-2393.0632F));
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow1.isNameVisible();
      homeDoorOrWindow1.getCatalogId();
      assertEquals(1.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      homeDoorOrWindow0.setDepth((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      bigDecimal0.equals(catalogDoorOrWindow0);
      homeDoorOrWindow1.setY((-1832.628F));
      homeDoorOrWindow1.setModelMirrored(false);
      homeDoorOrWindow0.isNameVisible();
      homeDoorOrWindow0.setNameAngle(1.0F);
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.isBottomLeftPointAt(1.0F, 0.0F, 1059.137F);
      homeDoorOrWindow0.getTexture();
      homeDoorOrWindow0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.round(mathContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNotNull(sashArray1);
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(sashArray1, sashArray0);
      assertEquals(0, sashArray0.length);
      assertEquals(0, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("PRICE", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNotNull(homeDoorOrWindow1);
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      float float0 = homeDoorOrWindow0.getNameYOffset();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, sashArray0.length);
      
      String string0 = homeDoorOrWindow0.getStaircaseCutOutShape();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(string0);
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isVisible();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertTrue(boolean0);
      assertEquals(0, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals("PRICE", homeDoorOrWindow2.getName());
      assertEquals(0.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow2);
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      float float1 = homeDoorOrWindow2.getAngle();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertEquals(float1, float0, 0.01F);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals("PRICE", homeDoorOrWindow2.getName());
      assertEquals(0.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0, sashArray0.length);
      
      homeDoorOrWindow0.setElevation(1.0F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      
      homeDoorOrWindow0.move((-1.0F), 1.0F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      
      boolean boolean1 = homeDoorOrWindow2.isBottomRightPointAt((-1.0F), 0.5F, 4.6962657F);
      assertFalse(boolean1 == boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals("PRICE", homeDoorOrWindow2.getName());
      assertEquals(0.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertFalse(boolean1);
      assertEquals(0, sashArray0.length);
      
      float float2 = homeDoorOrWindow1.getX();
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("PRICE", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertSame(sashArray0, sashArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Z", "Z", "Z", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, 0.0F, 0.0F, sashArray0, (float[][]) null, "Piece isn't texturable", false, false, false, bigDecimal0, bigDecimal0, "Piece isn't texturable");
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("Z", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Piece isn't texturable", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Z", catalogDoorOrWindow0.getName());
      assertEquals("Z", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("Piece isn't texturable", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      MathContext mathContext0 = MathContext.UNLIMITED;
      assertNotNull(mathContext0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("Z", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Piece isn't texturable", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Z", catalogDoorOrWindow0.getName());
      assertEquals("Z", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("Piece isn't texturable", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("Z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Z", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("Piece isn't texturable", homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      BigDecimal bigDecimal1 = bigDecimal0.plus();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      homeDoorOrWindow0.setNameXOffset((-0.96683F));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("Z", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Piece isn't texturable", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Z", catalogDoorOrWindow0.getName());
      assertEquals("Z", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("Piece isn't texturable", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("Z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Z", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-0.96683F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("Piece isn't texturable", homeDoorOrWindow0.getCurrency());
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals(0, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("Z", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Piece isn't texturable", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Z", catalogDoorOrWindow0.getName());
      assertEquals("Z", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("Piece isn't texturable", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("Z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Z", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-0.96683F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("Piece isn't texturable", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("Piece isn't texturable", homeDoorOrWindow1.getCurrency());
      assertEquals("Z", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-0.96683F), homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Z", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("Z", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertNotNull(homeDoorOrWindow1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isNameCenterPointAt(0.818244F, 0.0F, 0.818244F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("Z", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Piece isn't texturable", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Z", catalogDoorOrWindow0.getName());
      assertEquals("Z", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals("Piece isn't texturable", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("Z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Z", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-0.96683F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("Piece isn't texturable", homeDoorOrWindow0.getCurrency());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(boolean0);
      assertEquals(0, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "PRICE", "PRICE", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, (-1.0F), sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, sashArray1.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("PRICE", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      String string0 = homeDoorOrWindow0.getStaircaseCutOutShape();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(string0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(1, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isVisible();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertTrue(boolean0);
      assertEquals(1, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getDescription());
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      homeDoorOrWindow1.setNameVisible(true);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      homeDoorOrWindow2.setNameXOffset((-879.4398F));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getDescription());
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-879.4398F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      homeDoorOrWindow2.setElevation(0.0F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getDescription());
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-879.4398F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      homeDoorOrWindow2.setAngle((-3412.7031F));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getDescription());
      assertEquals(5.3496823F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-879.4398F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow3.getY(), 0.01F);
      assertNull(homeDoorOrWindow3.getColor());
      assertEquals(0.0F, homeDoorOrWindow3.getX(), 0.01F);
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertTrue(homeDoorOrWindow3.isVisible());
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow3.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow3.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertTrue(homeDoorOrWindow3.isMovable());
      assertTrue(homeDoorOrWindow3.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow3.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow3.getShininess());
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertEquals("PRICE", homeDoorOrWindow3.getName());
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getCurrency());
      assertEquals("PRICE", homeDoorOrWindow3.getDescription());
      assertNotNull(homeDoorOrWindow3);
      assertEquals(1, sashArray0.length);
      
      homeDoorOrWindow3.setNameXOffset(5.2831855F);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow3.getY(), 0.01F);
      assertNull(homeDoorOrWindow3.getColor());
      assertEquals(0.0F, homeDoorOrWindow3.getX(), 0.01F);
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertTrue(homeDoorOrWindow3.isVisible());
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertEquals(5.2831855F, homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow3.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow3.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertTrue(homeDoorOrWindow3.isMovable());
      assertTrue(homeDoorOrWindow3.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow3.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow3.getShininess());
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertEquals("PRICE", homeDoorOrWindow3.getName());
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getCurrency());
      assertEquals("PRICE", homeDoorOrWindow3.getDescription());
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      boolean boolean1 = homeDoorOrWindow2.isTopLeftPointAt(0.0F, (-879.4398F), 3680.743F);
      assertFalse(boolean1 == boolean0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow3));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getDescription());
      assertEquals(5.3496823F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-879.4398F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertFalse(boolean1);
      assertEquals(1, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow4 = new HomeDoorOrWindow(homeDoorOrWindow2);
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow3));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow3));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(homeDoorOrWindow4.isVisible());
      assertFalse(homeDoorOrWindow4.isBoundToWall());
      assertTrue(homeDoorOrWindow4.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow4.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow4.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow4.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow4.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow4.getWidth(), 0.01F);
      assertEquals(5.3496823F, homeDoorOrWindow4.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow4.isBackFaceShown());
      assertNull(homeDoorOrWindow4.getColor());
      assertEquals("", homeDoorOrWindow4.getCatalogId());
      assertFalse(homeDoorOrWindow4.isModelMirrored());
      assertEquals("PRICE", homeDoorOrWindow4.getName());
      assertEquals(0.0F, homeDoorOrWindow4.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow4.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow4.getElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow4.getDescription());
      assertTrue(homeDoorOrWindow4.isResizable());
      assertTrue(homeDoorOrWindow4.isDoorOrWindow());
      assertTrue(homeDoorOrWindow4.isMovable());
      assertEquals(0.0F, homeDoorOrWindow4.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow4.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getDepth(), 0.01F);
      assertEquals((-879.4398F), homeDoorOrWindow4.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow4.getShininess());
      assertNull(homeDoorOrWindow4.getStaircaseCutOutShape());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getDescription());
      assertEquals(5.3496823F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-879.4398F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow4);
      assertEquals(1, sashArray0.length);
      
      homeDoorOrWindow2.setModelMirrored(false);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow3));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow2.getDescription());
      assertEquals(5.3496823F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-879.4398F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertEquals(1, sashArray0.length);
      
      String string1 = homeDoorOrWindow1.getName();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotNull(string1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals("PRICE", string1);
      assertEquals(1, sashArray0.length);
      
      String string2 = homeDoorOrWindow1.getName();
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("PRICE", catalogDoorOrWindow0.getDescription());
      assertEquals("PRICE", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow0.getName());
      assertEquals("PRICE", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("PRICE", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotNull(string2);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals("PRICE", string2);
      assertEquals(1, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("do;", "do;", "do;", resourceURLContent0, resourceURLContent0, resourceURLContent0, 10.722756F, 10.722756F, 10.722756F, 10.722756F, true, 10.722756F, 10.722756F, sashArray0, (float[][]) null, "do;", true, true, true, bigDecimal0, bigDecimal0, "do;");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      boolean boolean0 = homeDoorOrWindow0.isBottomRightPointAt(10.722756F, 10.722756F, 10.722756F);
      assertTrue(boolean0);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      Sash[] sashArray1 = new Sash[0];
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.3926991F;
      floatArray1[1] = 0.3926991F;
      floatArray1[2] = (-41.25F);
      floatArray1[3] = 0.3926991F;
      floatArray1[4] = 0.3926991F;
      floatArray1[5] = (-41.25F);
      floatArray1[6] = 2008.3666F;
      floatArray1[7] = (-41.25F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = (-41.25F);
      floatArray2[1] = 0.3926991F;
      floatArray2[2] = 1.0F;
      floatArray2[3] = 2008.3666F;
      floatArray2[4] = (-41.25F);
      floatArray2[5] = 0.3926991F;
      floatArray2[6] = 0.3926991F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 0.3926991F;
      floatArray3[1] = 0.3926991F;
      floatArray3[2] = (-41.25F);
      floatArray3[3] = 2008.3666F;
      floatArray3[4] = 2008.3666F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = 0.3926991F;
      floatArray4[1] = 0.3926991F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = 0.3926991F;
      floatArray5[1] = (-41.25F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = (-41.25F);
      floatArray6[1] = 0.3926991F;
      floatArray6[2] = (-41.25F);
      floatArray6[3] = (-41.25F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      floatArray7[0] = 1.0F;
      floatArray7[1] = (-41.25F);
      floatArray0[6] = floatArray7;
      BigDecimal bigDecimal1 = new BigDecimal((-41.25F));
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "", "", content0, content1, content1, (-41.25F), (-41.25F), 0.3926991F, (-41.25F), true, 0.3926991F, (-41.25F), sashArray1, floatArray0, "", true, true, true, bigDecimal1, bigDecimal1);
      furnitureCategory0.add(catalogDoorOrWindow1);
      furnitureCategory0.getIndexOfPieceOfFurniture(catalogDoorOrWindow1);
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.setLevel((Level) null);
      homeDoorOrWindow0.getShininess();
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, true);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "PP8vL<bnbB5EA`z", resourceURLContent0, resourceURLContent0, resourceURLContent1, 209.0F, 0.0F, 0.0F, (-62.097F), false, 0.5F, (-1.0F), sashArray0, (float[][]) null, "PRICE", true, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow0.getSashes();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      float[][] floatArray0 = homePieceOfFurniture0.getPoints();
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = homePieceOfFurniture0.isTopRightPointAt((-772.27F), 209.0F, 209.0F);
      assertFalse(boolean0);
      
      homePieceOfFurniture0.getStaircaseCutOutShape();
      assertEquals(209.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(104.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("GVn", "GVn", "GVn", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "GVn", true, true, true, bigDecimal0, bigDecimal0, "GVn");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("GVn", propertyChangeListener0);
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.setLevel((Level) null);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertSame(bigDecimal1, bigDecimal0);
  }
}
