/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:29:36 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.SolverFactory;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractClauseSelectorSolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.AllMUSes;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AllMUSes_ESTest extends AllMUSes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=W-=#BPv;b+>n5~D`J8");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(gateTranslator0).getLogPrefix();
      doReturn(false).when(gateTranslator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false, false, true).when(gateTranslator0).isVerbose();
      doReturn(1).when(gateTranslator0).nVars();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, solverFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(solverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) checkMUSSolutionListener0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(minOneDecorator0);
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minimal4InclusionModel0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMUSes(solutionFoundListener0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(450.8513507966);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(Integer.MIN_VALUE);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, fixedPeriodRestarts0, (ILogAble) null);
      ISolver iSolver0 = solver0.getSolvingEngine();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4CardinalityModel0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      VecInt vecInt0 = new VecInt(2223, 2223);
      IVecInt iVecInt0 = vecInt0.clone();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes((AbstractClauseSelectorSolver<? extends ISolver>) null, aSolverFactory0);
      DimacsOutputSolver dimacsOutputSolver0 = allMUSes0.getSolverInstance();
      assertNull(dimacsOutputSolver0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(false, solverFactory0);
      allMUSes0.computeAllMUSes((IVecInt) vecInt0);
      List<IVecInt> list0 = allMUSes0.getMssList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, solverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMUSes(solutionFoundListener0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMSSOrdered((IVecInt) null, solutionFoundListener0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMSS(solutionFoundListener0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsOutputSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      ASolverFactory<OptToSatAdapter> aSolverFactory1 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      List<IVecInt> list0 = allMUSes0.computeAllMSS((IVecInt) null, (SolutionFoundListener) checkMUSSolutionListener0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(false, solverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMSS((IVecInt) vecInt0, solutionFoundListener0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsOutputSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      VecInt vecInt0 = new VecInt(2223, 2223);
      List<IVecInt> list0 = allMUSes0.computeAllMSS((IVecInt) vecInt0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(46);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, aSolverFactory0);
      ASolverFactory<Minimal4InclusionModel> aSolverFactory1 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(gateTranslator0).getLogPrefix();
      doReturn(false).when(gateTranslator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false, true).when(gateTranslator0).isVerbose();
      doReturn((-171), (-171)).when(gateTranslator0).nVars();
      LexicoDecorator<GateTranslator> lexicoDecorator0 = new LexicoDecorator<GateTranslator>(gateTranslator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      GateTranslator gateTranslator1 = new GateTranslator(optToSatAdapter0);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(gateTranslator1, gateTranslator1).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(gateTranslator0).getLogPrefix();
      doReturn(false, true).when(gateTranslator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(true, false, true).when(gateTranslator0).isVerbose();
      doReturn((int[]) null).when(gateTranslator0).model();
      doReturn((int[]) null).when(gateTranslator0).modelWithInternalVariables();
      doReturn(97, 97, 97, 0, 0).when(gateTranslator0).nVars();
      LexicoDecorator<GateTranslator> lexicoDecorator0 = new LexicoDecorator<GateTranslator>(gateTranslator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      GateTranslator gateTranslator1 = new GateTranslator(optToSatAdapter0);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(gateTranslator1, gateTranslator1).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, lightFactory0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-3845);
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      allMUSes0.computeAllMUSes((IVecInt) vecInt0, solutionFoundListener0);
      // Undeclared exception!
      allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, lightFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(iVecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      ASolverFactory<GateTranslator> aSolverFactory1 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(iVecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn("Timeout during the first stage", (String) null).when(gateTranslator0).getLogPrefix();
      doReturn(false, false, false).when(gateTranslator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false, true, true, false, false).when(gateTranslator0).isVerbose();
      doReturn(15, 15, 15, (-837), (-746)).when(gateTranslator0).nVars();
      LexicoDecorator<GateTranslator> lexicoDecorator0 = new LexicoDecorator<GateTranslator>(gateTranslator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      GateTranslator gateTranslator1 = new GateTranslator(optToSatAdapter0);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(gateTranslator1, gateTranslator1, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(iVecInt0, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      VecInt vecInt0 = new VecInt(intArray0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(2123);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0, vecInt0);
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<AbstractMinimalModel>(minimal4CardinalityModel0, false);
      AllMUSes allMUSes0 = new AllMUSes(fullClauseSelectorSolver0, solverFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(solutionFoundListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      int[] intArray0 = new int[2];
      intArray0[1] = (-1009);
      VecInt vecInt0 = new VecInt(intArray0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(0, (-1333));
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, eMARestarts0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(abstractMinimalModel0, vecInt0);
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4InclusionModel0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, solverFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1009
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      VecInt vecInt0 = new VecInt(9);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(iVecInt0, (SolutionFoundListener) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = 1881;
      VecInt vecInt0 = new VecInt(intArray0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0, vecInt0);
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<AbstractMinimalModel>(abstractMinimalModel0, false);
      AllMUSes allMUSes0 = new AllMUSes(fullClauseSelectorSolver0, solverFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(solverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1880, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[3] = (-2);
      intArray0[4] = 2;
      VecInt vecInt0 = new VecInt(intArray0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(false, solverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0, solutionFoundListener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(2101, 2101);
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, lightFactory0);
      allMUSes0.computeAllMUSes((IVecInt) vecInt0);
      // Undeclared exception!
      allMUSes0.computeAllMUSes((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(statisticsSolver0, checkMUSSolutionListener0);
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(aSolverFactory0, stringArray0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, 512, (SolutionFoundListener) null);
      FullClauseSelectorSolver<ModelIteratorToSATAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, true);
      AllMUSes allMUSes0 = new AllMUSes(fullClauseSelectorSolver0, solverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink((-649));
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ModelIterator[] modelIteratorArray0 = new ModelIterator[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(modelIteratorArray0);
      GateTranslator gateTranslator0 = new GateTranslator(manyCore0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0, true);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      int[] intArray0 = new int[1];
      intArray0[0] = 65535;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      allMUSes0.computeAllMSSOrdered(vecInt0, (SolutionFoundListener) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GateTranslator gateTranslator0 = new GateTranslator(statisticsSolver0);
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GateTranslator>(gateTranslator0);
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, (ASolverFactory<? extends ISolver>) null);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered(vecInt0, checkMUSSolutionListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      VecInt vecInt0 = new VecInt();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      vecInt0.pop();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered(vecInt0, checkMUSSolutionListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      int[] intArray0 = new int[7];
      intArray0[2] = (-1);
      intArray0[4] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered(vecInt0, checkMUSSolutionListener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2341);
      VecInt vecInt0 = new VecInt(intArray0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(true, solverFactory0);
      allMUSes0.computeAllMUSes((IVecInt) vecInt0);
      allMUSes0.computeAllMSS();
      // Undeclared exception!
      allMUSes0.computeAllMSS((SolutionFoundListener) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<StatisticsSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<StatisticsSolver>(statisticsSolver0, binary0);
      SolutionCounter solutionCounter0 = new SolutionCounter(clausalCardinalitiesDecorator0);
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS(solutionFoundListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      int[] intArray0 = new int[3];
      intArray0[2] = (-4925);
      VecInt vecInt0 = new VecInt(intArray0);
      allMUSes0.computeAllMSSOrdered(vecInt0, solutionFoundListener0);
      // Undeclared exception!
      allMUSes0.computeAllMSS((IVecInt) vecInt0, solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(statisticsSolver0);
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>(minOneDecorator0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory1 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS(iVecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0, solutionFoundListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink((-3171));
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      VecInt vecInt0 = new VecInt(5443, 5443);
      // Undeclared exception!
      allMUSes0.computeAllMSS((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) readOnlyVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ASolverFactory<FullClauseSelectorSolver<ModelIterator>> aSolverFactory0 = (ASolverFactory<FullClauseSelectorSolver<ModelIterator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<FullClauseSelectorSolver<ModelIterator>> manyCore0 = new ManyCore<FullClauseSelectorSolver<ModelIterator>>(aSolverFactory0, true, stringArray0);
      ModelIterator modelIterator0 = new ModelIterator(manyCore0);
      NegationDecorator<ModelIterator> negationDecorator0 = new NegationDecorator<ModelIterator>(modelIterator0);
      ASolverFactory<StatisticsSolver> aSolverFactory1 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory1);
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(1152.4056673153, (-3467));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS(iVecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-3862);
      VecInt vecInt0 = new VecInt(intArray0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      allMUSes0.computeAllMSSOrdered(vecInt0, checkMUSSolutionListener0);
      // Undeclared exception!
      allMUSes0.computeAllMSS();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      Product product0 = new Product();
      ClausalCardinalitiesDecorator<StatisticsSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<StatisticsSolver>(statisticsSolver0, product0);
      ModelIterator modelIterator0 = new ModelIterator(clausalCardinalitiesDecorator0, 369L);
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIterator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes(false, (ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes((ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      SolverFactory solverFactory0 = SolverFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(false, solverFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(solverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SolverFactory solverFactory0 = SolverFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(false, solverFactory0);
      allMUSes0.computeAllMUSes((SolutionFoundListener) null);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes((IVecInt) null, (SolutionFoundListener) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(singleSolutionDetector0).getLogPrefix();
      doReturn(true).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(singleSolutionDetector0).isVerbose();
      doReturn((Object) null, (Object) null).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(323).when(singleSolutionDetector0).nVars();
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(singleSolutionDetector0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered((IVecInt) null, checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt();
      groupClauseSelectorSolver0.getGroupVar(vecInt0, (-916));
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, lightFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt(3335, (byte) (-56));
      List<IVecInt> list0 = allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, solutionFoundListener0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS();
      List<IVecInt> list1 = allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) null);
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS();
      assertEquals(1, list0.size());
      
      List<IVecInt> list1 = allMUSes0.computeAllMUSes();
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = allMUSes0.getSolverInstance();
      assertNotNull(groupClauseSelectorSolver0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      allMUSes0.reset();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      List<IVecInt> list0 = allMUSes0.getMssList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
