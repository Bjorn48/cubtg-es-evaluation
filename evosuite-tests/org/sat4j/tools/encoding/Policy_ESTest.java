/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 15:55:52 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.core.Solver;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IOptimizationProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.Binomial;
import org.sat4j.tools.encoding.Commander;
import org.sat4j.tools.encoding.EncodingStrategy;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Ladder;
import org.sat4j.tools.encoding.Policy;
import org.sat4j.tools.encoding.Product;
import org.sat4j.tools.encoding.Sequential;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Policy_ESTest extends Policy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setExactlyKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtMostOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setAtMostKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(2130);
      IConstr iConstr0 = policy0.addExactly(dimacsStringSolver0, vecInt0, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1025);
      VecInt vecInt0 = new VecInt(7, 7);
      IConstr iConstr0 = policy0.addAtLeast(dimacsStringSolver0, vecInt0, 4322);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(7, 7);
      LightFactory lightFactory0 = new LightFactory();
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      policy0.addAtLeast(solver0, vecInt0, 0);
      assertEquals(0, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setExactlyOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1025);
      VecInt vecInt0 = new VecInt(7, 7);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      vecInt0.copyTo((IVecInt) vecInt0);
      policy0.setExactlyKEncoding(encodingStrategy0);
      // Undeclared exception!
      policy0.addExactly(dimacsStringSolver0, vecInt0, 1364);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsStringSolver0, (IVecInt) null, 9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 9
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Policy policy0 = new Policy();
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        policy0.addExactly((ISolver) null, iVecInt0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setExactlyKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(58);
      // Undeclared exception!
      try { 
        policy0.addExactly((ISolver) null, vecInt0, 58);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addExactly(iSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1915);
      intArray0[1] = (-2330);
      intArray0[2] = (-1915);
      intArray0[3] = (-1915);
      VecInt vecInt0 = new VecInt(intArray0);
      try { 
        policy0.addAtMost(iSolver0, vecInt0, (-2330));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(2453);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, checkMUSSolutionListener0);
      // Undeclared exception!
      policy0.addAtMost(modelIteratorToSATAdapter0, vecInt0, 522);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(2243, 2243);
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, 2243);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setAtMostKEncoding(encodingStrategy0);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt(608, 608);
      // Undeclared exception!
      try { 
        policy0.addAtMost(statisticsSolver0, vecInt0, (-3248));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(7, 7);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      try { 
        policy0.addAtLeast(iSolver0, vecInt0, 1025);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(7, 7);
      vecInt0.shrinkTo((-173));
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, vecInt0, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[11];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(iSolver0, vecInt0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(7, 7);
      vecInt0.shrink((-41));
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      // Undeclared exception!
      try { 
        policy0.addAtLeast(iSolver0, vecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = policy0.addAtMost(dimacsStringSolver0, vecInt0, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(sequential0);
      assertEquals(EncodingStrategy.SEQUENTIAL, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Product product0 = new Product();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(product0);
      Policy policy0 = new Policy();
      policy0.setAtLeastKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNotSame(encodingStrategyAdapter0, product0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(policy0);
      assertEquals(EncodingStrategy.NATIVE, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Commander commander0 = new Commander();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(commander0);
      assertEquals(EncodingStrategy.COMMANDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Binary binary0 = new Binary();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(binary0);
      assertEquals(EncodingStrategy.BINARY, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, iVecInt0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, iVecInt0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setExactlyKEncoding(encodingStrategy0);
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(7, 7);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      LightFactory lightFactory0 = new LightFactory();
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      policy0.setExactlyKEncoding(encodingStrategy0);
      policy0.addExactly(solver0, vecInt0, 0);
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(7, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne(optToSatAdapter0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(7, 7);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      try { 
        policy0.addExactly(iSolver0, vecInt0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(7, 7);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      policy0.setAtMostKEncoding(encodingStrategy0);
      policy0.addAtMost(iSolver0, vecInt0, 1025);
      assertEquals(0, iSolver0.nVars());
      assertEquals(0, iSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Policy policy0 = new Policy();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      policy0.setAtMostKEncoding(encodingStrategy0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(20);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, solutionFoundListener0);
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = new LexicoDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      policy0.addAtMost(lexicoDecorator0, vecInt0, 1);
      assertEquals(3, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(24, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1025);
      VecInt vecInt0 = new VecInt(7, 7);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtMostOneEncoding(encodingStrategy0);
      policy0.addAtMostOne(dimacsStringSolver0, vecInt0);
      assertEquals(6, dimacsStringSolver0.nVars());
      assertEquals(6, dimacsStringSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(1687, 6);
      // Undeclared exception!
      policy0.addAtLeast(iSolver0, vecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Policy policy0 = new Policy();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        policy0.addAtMost(optToSatAdapter0, vecInt0, (-325));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(635);
      VecInt vecInt0 = new VecInt();
      vecInt0.push(635);
      IConstr iConstr0 = policy0.addAtMost(dimacsStringSolver0, vecInt0, (-103));
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(ladder0);
      assertEquals(EncodingStrategy.LADDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(binomial0);
      assertEquals(EncodingStrategy.BINOMIAL, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setAtMostKEncoding(encodingStrategy0);
      String string0 = policy0.toString();
      assertEquals("Policy = [At most K: Binary, at most 1: Native, exactly K: Native, exactly 1: Native]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, iVecInt0, (-284));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Policy policy0 = new Policy();
      policy0.setExactlyOneEncoding((EncodingStrategyAdapter) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Policy policy0 = new Policy();
      Commander commander0 = new Commander();
      policy0.setAtLeastOneEncoding((EncodingStrategyAdapter) commander0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      assertSame(encodingStrategyAdapter0, commander0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Policy policy0 = new Policy();
      Ladder ladder0 = new Ladder();
      policy0.setExactlyKEncoding((EncodingStrategyAdapter) ladder0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Policy policy0 = new Policy();
      Commander commander0 = new Commander();
      policy0.setAtLeastKEncoding((EncodingStrategyAdapter) commander0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Policy policy0 = new Policy();
      policy0.setAtMostKEncoding((EncodingStrategyAdapter) null);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Policy policy0 = new Policy();
      Sequential sequential0 = new Sequential();
      policy0.setAtMostOneEncoding((EncodingStrategyAdapter) sequential0);
      String string0 = policy0.toString();
      assertEquals("Policy = [At most K: Native, at most 1: Sequential, exactly K: Native, exactly 1: Native]", string0);
  }
}
