/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:33:52 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtLeast_ESTest extends AtLeast_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[8];
      intArray0[2] = (-1575);
      VecInt vecInt1 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 41);
      int int0 = atLeast0.getAssertionLevel(vecInt1, 16);
      assertEquals((-1), int0);
      assertEquals(41, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.insertFirst(1);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      atLeast0.calcReasonOnTheFly(0, iVecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0, 0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      atLeast0.calcReasonOnTheFly((-59), vecInt0, vecInt0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 765);
      String string0 = atLeast0.toString();
      assertEquals("Card (0) : >= 765", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-2382));
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-2812));
      atLeast0.calcReason((-2812), vecInt0);
      assertEquals((-2812), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, vecInt0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(18, 18);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 18);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("P/Ui");
      String string0 = atLeast0.toString((VarMapper) dotSearchTracing0);
      assertEquals(" + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]   + 9[?]  >= 18", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(23, 23);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 23);
      String string0 = atLeast0.toString();
      assertEquals("Card (23) :  + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]   + -11[?@0]  >= 23", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-2838));
      atLeast0.size();
      assertEquals((-2838), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, (-2812));
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-2812), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-2385));
      assertEquals((-2385), atLeast0.requiredNumberOfSatisfiedLiterals());
      
      NoRestarts noRestarts0 = new NoRestarts();
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, noRestarts0);
      int int0 = AtLeast.niceParameters(solver0, (ILits) null, vecInt0, 0);
      assertEquals(0, int0);
      assertEquals(0, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(65);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, (-1949));
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, tabuListDecorator0, arminRestarts0);
      int int0 = AtLeast.niceParameters(solver0, iLits0, vecInt0, (-827));
      assertEquals(1, vecInt0.size());
      assertEquals((-827), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(30, (-2561));
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 3);
      // Undeclared exception!
      try { 
        atLeast0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2562
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-2812));
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        atLeast0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-2812));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0, 0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, (-721));
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        atLeast0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-1623));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1623
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        atLeast0.propagate((UnitPropagationListener) null, 94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        atLeast0.propagate((UnitPropagationListener) null, 1636);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1636
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(23, 1388);
      // Undeclared exception!
      try { 
        AtLeast.niceParameters((UnitPropagationListener) null, (ILits) null, vecInt0, (-347));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 21);
      // Undeclared exception!
      try { 
        atLeast0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(1, 3004);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 3004);
      // Undeclared exception!
      try { 
        atLeast0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3005
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-2812));
      // Undeclared exception!
      try { 
        atLeast0.getAssertionLevel((IVecInt) null, (-2812));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 16);
      // Undeclared exception!
      try { 
        atLeast0.calcReason(16, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.growTo(58, (-1637));
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 512);
      // Undeclared exception!
      try { 
        atLeast0.calcReason(1, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1637
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, lits0, vecInt0, 18);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.growTo(336, 926);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        atLeast0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lits lits0 = new Lits();
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, (IVecInt) null, (-1210));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(48);
      vecInt0.pop();
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(iLits0, vecInt0, 48);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink((-1391));
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast((ILits) null, vecInt0, (-2812));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 345);
      atLeast0.register();
      assertEquals(345, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.growTo(23, 23);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 16);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("");
      // Undeclared exception!
      try { 
        atLeast0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(":P(;6lZ5ex{9G-,");
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 765);
      String string0 = atLeast0.toString((VarMapper) dotSearchTracing0);
      assertEquals(">= 765", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-2382));
      int int0 = atLeast0.getAssertionLevel(iVecInt0, (-211));
      assertEquals((-2382), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.growTo(23, 23);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      boolean boolean0 = atLeast0.isSatisfied();
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, (-499));
      atLeast0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
      assertEquals((-499), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 16);
      // Undeclared exception!
      try { 
        atLeast0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(3, 3);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        atLeast0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 23);
      atLeast0.assertConstraint((UnitPropagationListener) null);
      assertEquals(23, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.growTo(23, 23);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      atLeast0.calcReason(23, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      Constr constr0 = AtLeast.atLeastNew((UnitPropagationListener) null, lits0, vecInt0, (-1));
      constr0.calcReason((-1), vecInt0);
      assertEquals((-1), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(30, 3);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 3);
      // Undeclared exception!
      try { 
        atLeast0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 23);
      atLeast0.remove((UnitPropagationListener) null);
      assertEquals(23, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      try { 
        cardinalityDataStructure0.createCardinalityConstraint(vecInt0, 4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.growTo(23, 23);
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, vecInt0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      try { 
        AtLeast.niceParameters((UnitPropagationListener) null, (ILits) null, vecInt0, 2782);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast((ILits) null, vecInt0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cards with degree 1 are clauses!!!!
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 17);
      atLeast0.setActivity(304.96744214);
      assertEquals(17, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 23);
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-6770));
      // Undeclared exception!
      try { 
        atLeast0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 41);
      boolean boolean0 = atLeast0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(41, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Constr constr0 = AtLeast.atLeastNew((UnitPropagationListener) null, (ILits) null, vecInt0, (-2812));
      double double0 = ((AtLeast) constr0).getActivity();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2812), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 23);
      Constr constr0 = atLeast0.toConstraint();
      assertEquals(23, constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 336);
      // Undeclared exception!
      try { 
        atLeast0.rescaleBy(336);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 65);
      atLeast0.forwardActivity(0.0);
      assertEquals(65, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      boolean boolean0 = atLeast0.locked();
      assertTrue(boolean0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 23);
      atLeast0.undo(9);
      assertEquals(23, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 13);
      // Undeclared exception!
      try { 
        atLeast0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-2385));
      boolean boolean0 = atLeast0.simplify();
      assertFalse(boolean0);
      assertEquals((-2385), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 446);
      // Undeclared exception!
      try { 
        atLeast0.get(446);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 446
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      atLeast0.incActivity(0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-855));
      boolean boolean0 = atLeast0.learnt();
      assertEquals((-855), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      boolean boolean0 = atLeast0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      atLeast0.size();
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }
}
