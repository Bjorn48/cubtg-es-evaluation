/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 13:57:24 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.ComplexImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.KernelType;
import jigl.image.types.PhaseImage;
import jigl.image.types.PowerImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      binaryImage0.min();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1369, 1369);
      BinaryImage binaryImage0 = new BinaryImage();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      BinaryImage binaryImage1 = new BinaryImage(1369, 0, byteArray0);
      binaryImage1.union(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      BinaryImage binaryImage1 = new BinaryImage((byte)19, 15);
      binaryImage0.toString();
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      PhaseImage phaseImage0 = new PhaseImage(complexImage0);
      BinaryImage binaryImage0 = new BinaryImage(phaseImage0);
      binaryImage0.getData();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      BinaryImage binaryImage1 = new BinaryImage(imageKernel0);
      // Undeclared exception!
      try { 
        binaryImage0.intersection(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      byte[][] byteArray0 = new byte[2][3];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)19;
      byteArray1[1] = (byte)19;
      byteArray1[2] = (byte)19;
      byteArray1[2] = (byte)19;
      byteArray1[4] = (byte)19;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)19;
      byteArray2[1] = (byte)19;
      byteArray2[2] = (byte)19;
      byteArray2[3] = (byte)19;
      byteArray0[1] = byteArray2;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1369, 1369);
      BinaryImage binaryImage0 = new BinaryImage(1369, 1369);
      BinaryImage binaryImage1 = new BinaryImage(1369, 3122);
      int int0 = (-3716);
      // Undeclared exception!
      binaryImage0.shift(int0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte)39);
      Byte byte1 = new Byte((byte) (-105));
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte) (-105), (int) (byte)39, byte1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      Byte byte0 = binaryImage0.max();
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      binaryImage0.min();
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage();
      ROI rOI0 = new ROI();
      BinaryImage binaryImage2 = new BinaryImage(4481, 4481);
      binaryImage0.difference(binaryImage1);
      binaryImage2.copy();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = null;
      binaryImage0.getJavaImage();
      binaryImage0.getJavaImage();
      binaryImage0.getJavaImage();
      // Undeclared exception!
      try { 
        binaryImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = (-1360);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-1360), (-1360));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1369, 1369);
      BinaryImage binaryImage0 = new BinaryImage(1369, 1369);
      BinaryImage binaryImage1 = new BinaryImage(0, 0);
      BinaryImage binaryImage2 = new BinaryImage(0, 1369);
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.compliment();
      Byte byte0 = new Byte((byte)0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      binaryImage0.min();
      binaryImage0.copy();
      BinaryImage binaryImage1 = new BinaryImage();
      ROI rOI0 = new ROI();
      binaryImage1.count();
      binaryImage1.copy();
      BinaryImage binaryImage2 = binaryImage0.compliment();
      binaryImage2.getData();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1189, 1189);
      // Undeclared exception!
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1369, 1369);
      BinaryImage binaryImage0 = new BinaryImage(1369, 1369);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      // Undeclared exception!
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      ROI rOI0 = new ROI();
      BinaryImage binaryImage1 = new BinaryImage((byte)19, (byte)19);
      binaryImage1.shift((-3716), (-1));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = (byte)19;
      Byte byte1 = new Byte((byte)19);
      Byte byte2 = new Byte((byte)19);
      ROI rOI0 = new ROI();
      BinaryImage binaryImage0 = new BinaryImage(4453, 4453);
      int int0 = 16;
      int int1 = 4445;
      int int2 = 4453;
      binaryImage0.toString();
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1090, 1090);
      Byte byte0 = new Byte((byte)36);
      BinaryImage binaryImage1 = new BinaryImage();
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      int int0 = 473;
      BinaryImage binaryImage1 = new BinaryImage(473, 473);
      int int1 = (-1209);
      binaryImage1.shift(int0, int1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PowerImage powerImage0 = new PowerImage(9, 0);
      BinaryImage binaryImage0 = new BinaryImage(powerImage0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = binaryImage1.compliment();
      Byte byte0 = new Byte((byte) (-97));
      binaryImage2.copy();
      BinaryImage binaryImage3 = binaryImage0.shift((byte) (-97), 2277);
      BinaryImage binaryImage4 = binaryImage3.shift(1785, (byte) (-97));
      binaryImage2.copy();
      binaryImage4.compliment();
      binaryImage2.getData();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1369, 1369);
      BinaryImage binaryImage0 = new BinaryImage(1369, 1369);
      BinaryImage binaryImage1 = new BinaryImage(0, 0);
      BinaryImage binaryImage2 = new BinaryImage(0, 1369);
      binaryImage2.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ComplexImage complexImage0 = new ComplexImage(1059, 1059);
      RealGrayImage realGrayImage0 = complexImage0.real;
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(realGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      ROI rOI0 = new ROI();
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)19;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = null;
      binaryImage0.getJavaImage();
      binaryImage0.getJavaImage();
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage0.union(binaryImage1);
      binaryImage0.shift(7, 7);
      // Undeclared exception!
      try { 
        binaryImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(2540, 2540, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[][] byteArray0 = new byte[4][2];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)77;
      byteArray3[1] = (byte)29;
      byteArray3[2] = (byte) (-50);
      byteArray3[3] = (byte)43;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)20;
      byteArray3[6] = (byte) (-1);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)43;
      byteArray0[3] = byteArray4;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-975), 0, byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(imageProducer0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        binaryImage0.set((-2167), (-619), (Byte) null, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1090, 1090);
      Byte byte0 = new Byte((byte)4);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      // Undeclared exception!
      binaryImage0.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1369, 1369);
      BinaryImage binaryImage0 = new BinaryImage(1369, 1369);
      BinaryImage binaryImage1 = new BinaryImage(1090, 1090);
      BinaryImage binaryImage2 = new BinaryImage(1090, 1369);
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage((byte)4, (byte)4);
      interpolatedGrayImage0.clear();
      BinaryImage binaryImage0 = new BinaryImage(interpolatedGrayImage0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      Byte byte0 = binaryImage0.min();
      binaryImage0.copy();
      BinaryImage binaryImage1 = binaryImage0.union((BinaryImage) null);
      // Undeclared exception!
      try { 
        binaryImage1.set(965, 965, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(1242, 1242);
      // Undeclared exception!
      try { 
        binaryImage1.get(1242, 2989);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getData();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1189, 1189);
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.getJavaImage();
      ROI rOI0 = new ROI();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.getJavaImage();
      binaryImage0.count();
      binaryImage0.shift(161, 16);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1090, 1090);
      Byte byte0 = new Byte((byte)19);
      Byte byte1 = new Byte((byte)4);
      ROI rOI0 = new ROI();
      binaryImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[][] byteArray0 = new byte[5][1];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-127);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte) (-64);
      byteArray1[4] = (byte)126;
      byteArray1[5] = (byte) (-108);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-1);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-64);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-127);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte) (-127);
      byteArray5[1] = (byte) (-64);
      byteArray5[2] = (byte) (-127);
      byteArray0[4] = byteArray5;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage((byte)4, (byte)4);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      BinaryImage binaryImage2 = null;
      try {
        binaryImage2 = new BinaryImage(22, 22, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.min();
      int int0 = 0;
      binaryImage0.copy();
      Byte byte0 = new Byte((byte) (-85));
      int int1 = 0;
      ROI rOI0 = new ROI(0, (-211), (byte) (-85), 0);
      // Undeclared exception!
      try { 
        binaryImage0.set(0, (-211), byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage(1800, 1800);
      // Undeclared exception!
      try { 
        binaryImage1.intersection(binaryImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      Byte byte0 = binaryImage0.min();
      binaryImage0.copy();
      binaryImage0.union((BinaryImage) null);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.set(643, 468, byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      PowerImage powerImage0 = new PowerImage(9, 0);
      BinaryImage binaryImage0 = new BinaryImage(powerImage0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = binaryImage1.compliment();
      Byte byte0 = new Byte((byte) (-97));
      // Undeclared exception!
      try { 
        binaryImage2.set(9, 9, byte0, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.count();
      BinaryImage binaryImage1 = binaryImage0.shift(9, (-4));
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2, 2824);
      binaryImage0.toString();
      byte[][] byteArray0 = new byte[1][2];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-95);
      byteArray1[1] = (byte)76;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      BinaryImage binaryImage0 = new BinaryImage(realGrayImage0);
      ROI rOI0 = new ROI();
      binaryImage0.getJavaImage();
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      binaryImage0.min();
      Byte byte0 = new Byte((byte)111);
      Byte byte1 = new Byte((byte)3);
      ROI rOI0 = new ROI();
      BinaryImage binaryImage1 = new BinaryImage(2140, (byte)3);
      binaryImage1.shift(4467, 4467);
      binaryImage1.compliment();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      ROI rOI0 = new ROI();
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.copy();
      binaryImage0.set(15, 0, byte0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = binaryImage0.shift(3, 3200);
      binaryImage1.shift(3, 16);
      BinaryImage binaryImage2 = new BinaryImage();
      ROI rOI0 = new ROI();
      BinaryImage binaryImage3 = new BinaryImage(3200, 3);
      binaryImage1.difference(binaryImage3);
      binaryImage3.compliment();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1250, 1250);
      // Undeclared exception!
      binaryImage0.shift(1162, 12);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PowerImage powerImage0 = new PowerImage(9, 0);
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = binaryImage1.compliment();
      BinaryImage binaryImage3 = binaryImage2.shift(0, Integer.MIN_VALUE);
      int int0 = 16;
      BinaryImage binaryImage4 = binaryImage0.shift(9, 16);
      binaryImage3.copy();
      binaryImage4.compliment();
      Byte byte0 = new Byte((byte) (-49));
      // Undeclared exception!
      try { 
        binaryImage0.set(1055, 1083, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.getJavaImage();
      binaryImage0.count();
      binaryImage0.X();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1369, 1369);
      BinaryImage binaryImage0 = new BinaryImage(1369, 1369);
      BinaryImage binaryImage1 = new BinaryImage(1090, 1090);
      binaryImage1.toString();
      BinaryImage binaryImage2 = new BinaryImage(1090, 1369);
      binaryImage0.Y();
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.toString();
      binaryImage0.union((BinaryImage) null);
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      ROI rOI0 = new ROI();
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.shift((-3716), 16);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1553, 1553);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1553, binaryImage0.X());
      assertEquals(1553, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.X();
      assertEquals(1553, int0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1553, binaryImage0.X());
      assertEquals(1553, binaryImage0.Y());
      
      int int1 = binaryImage0.X();
      assertTrue(int1 == int0);
      assertEquals(1553, int1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1553, binaryImage0.X());
      assertEquals(1553, binaryImage0.Y());
      
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        binaryImage0.set(1553, 3185, byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      assertEquals(19, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.difference((BinaryImage) null);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(19, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(19, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(19, binaryImage1.X());
      assertNotNull(binaryImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI((-3497), 3, 9, (byte)19);
      assertEquals(19, rOI0.ly());
      assertEquals(3507, rOI0.X());
      assertEquals((-3497), rOI0.ux());
      assertEquals(17, rOI0.Y());
      assertEquals(3, rOI0.uy());
      assertEquals(9, rOI0.lx());
      
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 1, (byte[]) null);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.Y();
      assertEquals(1, int0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertNotNull(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[][] intArray0 = new int[0][3];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      
      BinaryImage binaryImage0 = new BinaryImage(grayImage0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(1, 1);
      assertEquals(0, intArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotNull(binaryImage1);
      
      Byte byte0 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        binaryImage1.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      assertEquals(19, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(19, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      Image image0 = binaryImage0.copy(rOI0);
      assertNotSame(binaryImage0, image0);
      assertEquals(19, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(19, binaryImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, image0.Y());
      assertEquals(1, image0.X());
      assertNotNull(image0);
      
      BinaryImage binaryImage1 = binaryImage0.intersection(binaryImage0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(19, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(19, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(19, binaryImage1.X());
      assertEquals(19, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(0, 0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      assertEquals(19, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(19, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.difference(binaryImage0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(19, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(19, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(19, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(19, binaryImage1.X());
      assertNotNull(binaryImage1);
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.get(1047, 1105);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.union((BinaryImage) null);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.Y();
      assertEquals(0, int0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      Byte byte0 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte0);
      assertNotNull(byte0);
      
      ROI rOI0 = new ROI(255, 255, (-880), 16);
      assertEquals(16, rOI0.uy());
      assertEquals((-880), rOI0.ux());
      assertEquals(1136, rOI0.X());
      assertEquals(255, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(240, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        binaryImage0.set(255, 0, byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(2904, 800);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2904, binaryImage1.X());
      assertEquals(800, binaryImage1.Y());
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = new BinaryImage(800, 1550);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(800, binaryImage2.X());
      assertEquals(1550, binaryImage2.Y());
      assertNotNull(binaryImage2);
      
      Byte byte0 = new Byte((byte) (-29));
      assertEquals((byte) (-29), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        binaryImage1.set((-2353), 214, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2353
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      assertEquals((byte)19, (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage0.Y());
      assertEquals(19, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage0.Y());
      assertEquals(19, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(imageProducer0);
      
      // Undeclared exception!
      try { 
        binaryImage0.set(255, (-1950), byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1950
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 1369;
      GrayImage grayImage0 = new GrayImage(1369, 1369);
      assertEquals(1369, grayImage0.Y());
      assertEquals(1369, grayImage0.X());
      assertNotNull(grayImage0);
      
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(grayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[][] byteArray0 = new byte[3][9];
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte)54;
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(20.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(8.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(3, imageKernel0.X());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals((-4.0F), imageKernel0.min(), 0.01F);
      assertNotNull(imageKernel0);
      
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(20.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(8.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(3, imageKernel0.X());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals((-4.0F), imageKernel0.min(), 0.01F);
      assertEquals(3, binaryImage0.X());
      assertEquals(3, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(211, 211);
      assertEquals(211, binaryImage0.Y());
      assertEquals(211, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertNotNull(binaryImage1);
      
      // Undeclared exception!
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.union((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1369, 1369);
      assertEquals(1369, grayImage0.Y());
      assertEquals(1369, grayImage0.X());
      assertNotNull(grayImage0);
      
      BinaryImage binaryImage0 = new BinaryImage(1369, 1369);
      assertEquals(1369, binaryImage0.X());
      assertEquals(1369, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(1369, binaryImage0.X());
      assertEquals(1369, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1369, binaryImage1.X());
      assertEquals(1369, binaryImage1.Y());
      assertNotNull(binaryImage1);
      
      // Undeclared exception!
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(1, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.X());
      assertEquals(1, binaryImage1.count());
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, binaryImage2.X());
      assertNotNull(binaryImage2);
      
      BinaryImage binaryImage3 = binaryImage2.shift(1, 1220);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.X());
      assertEquals(1, binaryImage3.Y());
      assertNotNull(binaryImage3);
      
      BinaryImage binaryImage4 = binaryImage2.difference(binaryImage0);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage4);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(1, binaryImage4.Y());
      assertEquals(1, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertNotNull(binaryImage4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      Byte byte0 = new Byte((byte)39);
      assertEquals((byte)39, (byte)byte0);
      assertNotNull(byte0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(imageProducer0);
      
      // Undeclared exception!
      try { 
        binaryImage0.set(255, (int) (byte)39, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(1242, 1242);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(1242, binaryImage1.X());
      assertEquals(1242, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1242, binaryImage1.X());
      assertEquals(1242, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertNotNull(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      Image image0 = binaryImage0.copy();
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      assertNotNull(image0);
      
      Byte byte0 = binaryImage0.min();
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)0, (byte)byte0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(byte0);
      
      Image image1 = binaryImage0.copy();
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(image1.equals((Object)image0));
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(image1, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, image1.X());
      assertEquals(0, image1.Y());
      assertNotNull(image1);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image1));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertNotNull(binaryImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = binaryImage1.X();
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image1));
      assertEquals(0, int0);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, image1);
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertNotNull(imageProducer0);
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.shift(0, 0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(19, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(19, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(19, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(19, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertNotNull(binaryImage2);
      
      BinaryImage binaryImage3 = binaryImage2.difference(binaryImage0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(19, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(19, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(19, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(19, binaryImage3.X());
      assertEquals(19, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertNotNull(binaryImage3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(1242, 1242);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(1242, binaryImage1.Y());
      assertEquals(1242, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.shift(0, (-600));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.Y());
      assertNotNull(binaryImage2);
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = (-937);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-937), (-937));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage((byte)19, (byte)19);
      assertEquals(19, complexImage0.Y());
      assertEquals(19, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertEquals(19, complexImage0.Y());
      assertEquals(19, complexImage0.X());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(realGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 1;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-31);
      byte byte0 = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byte byte1 = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)0;
      BinaryImage binaryImage0 = new BinaryImage(1, 1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertNotNull(binaryImage0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-31), (byte) (-96), (byte)23, (byte)0}, byteArray0);
      
      Byte byte2 = new Byte((byte) (-96));
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-96), (byte)byte2);
      assertNotNull(byte2);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(15, 15, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(19, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(19, binaryImage0.X());
      assertNotNull(imageProducer0);
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(19, binaryImage0.X());
      
      BinaryImage binaryImage1 = binaryImage0.shift(0, 0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(19, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(19, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(19, binaryImage1.Y());
      assertNotNull(binaryImage1);
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)33;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte) (-1);
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      assertArrayEquals(new byte[] {(byte)0, (byte)33, (byte)0, (byte) (-112), (byte)45, (byte)84, (byte)80, (byte)31, (byte) (-1)}, byteArray0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(9, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      assertArrayEquals(new byte[] {(byte)0, (byte)33, (byte)0, (byte) (-112), (byte)45, (byte)84, (byte)80, (byte)31, (byte) (-1)}, byteArray0);
      
      ROI rOI0 = new ROI((byte)31, (byte)80, (byte)84, (-4124));
      assertEquals((-4124), rOI0.uy());
      assertEquals(31, rOI0.ux());
      assertEquals(4205, rOI0.Y());
      assertEquals(80, rOI0.ly());
      assertEquals(54, rOI0.X());
      assertEquals(84, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI((byte) (-112), 0, 0, 4718);
      assertEquals(4719, rOI0.Y());
      assertEquals((-112), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(4718, rOI0.ly());
      assertEquals(113, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      Image image0 = binaryImage0.copy();
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      assertNotNull(image0);
      
      Byte byte0 = binaryImage0.min();
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)0, (byte)byte0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(byte0);
      
      Image image1 = binaryImage0.copy();
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(image1.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, image1);
      assertNotSame(image1, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image1.X());
      assertEquals(0, image1.Y());
      assertNotNull(image1);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertNotNull(binaryImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image1));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage1, image1);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, image1);
      assertNotSame(binaryImage2, binaryImage1);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertNotNull(binaryImage2);
      
      BinaryImage binaryImage3 = binaryImage1.compliment();
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)image1));
      assertNotSame(binaryImage1, image1);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image1);
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertNotNull(binaryImage3);
      
      int int0 = binaryImage0.count();
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)image1));
      assertEquals(0, int0);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, image1);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage4 = binaryImage1.difference(binaryImage3);
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)image1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)image1));
      assertNotSame(binaryImage1, image1);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image1);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, image0);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, image1);
      assertSame(binaryImage4, binaryImage3);
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage4.count());
      assertEquals(0, binaryImage4.X());
      assertEquals(0, binaryImage4.Y());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertNotNull(binaryImage4);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      Image image0 = binaryImage0.copy();
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      assertNotNull(image0);
      
      Byte byte0 = binaryImage0.min();
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)0, (byte)byte0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(byte0);
      
      Image image1 = binaryImage0.copy();
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(image1.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, image1);
      assertNotSame(image1, image0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image1.Y());
      assertEquals(0, image1.X());
      assertNotNull(image1);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image1));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      BinaryImage binaryImage2 = new BinaryImage(4481, 4481);
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)image1));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertEquals(4481, binaryImage2.X());
      assertEquals(4481, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertNotNull(binaryImage2);
      
      BinaryImage binaryImage3 = binaryImage0.difference(binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage3.equals((Object)image1));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, image1);
      assertNotSame(binaryImage3, image1);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, image0);
      assertNotSame(binaryImage3, binaryImage2);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.X());
      assertNotNull(binaryImage3);
      
      // Undeclared exception!
      binaryImage2.compliment();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1090, 1090);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1090, binaryImage0.Y());
      assertEquals(1090, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        binaryImage0.intersection((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertNotNull(binaryImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(imageProducer0);
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.shift(0, 0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(19, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(19, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      
      byte[][] byteArray0 = new byte[2][1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)19;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)83;
      byteArray0[1] = byteArray2;
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals(2, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(2, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1, binaryImage2.X());
      assertEquals(2, binaryImage2.Y());
      assertNotNull(binaryImage2);
      
      // Undeclared exception!
      try { 
        binaryImage1.union(binaryImage2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.toString();
      BinaryImage binaryImage1 = binaryImage0.shift((byte)19, (byte)19);
      assertEquals(19, binaryImage0.Y());
      assertEquals(19, binaryImage0.X());
      assertEquals(0, binaryImage1.count());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte)74);
      // Undeclared exception!
      try { 
        binaryImage0.set((-317), (int) (byte)74, (Byte) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 1648;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-84);
      byteArray0[0] = (byte) (-84);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(1648, 1648, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      binaryImage0.toString();
      BinaryImage binaryImage1 = binaryImage0.union(binaryImage0);
      assertEquals(19, binaryImage1.X());
      assertEquals(19, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      ROI rOI0 = new ROI();
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      Byte byte1 = new Byte((byte)19);
      Byte byte2 = new Byte((byte)19);
      // Undeclared exception!
      try { 
        binaryImage0.set((-317), (int) (byte)19, byte2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][6];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        binaryImage0.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      ROI rOI0 = new ROI((byte)19, 245, (byte)19, 245);
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 245
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      byte[][] byteArray0 = new byte[0][5];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage();
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage2.X());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)19, (byte)19);
      Byte byte0 = new Byte((byte)60);
      // Undeclared exception!
      try { 
        binaryImage0.set(255, 3725, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3725
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }
}
