/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:40:15 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.reader.AAGReader;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AAGReader_ESTest extends AAGReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      AAGReader aAGReader0 = new AAGReader(statisticsSolver0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)49, (byte)49);
      // Undeclared exception!
      aAGReader0.parseInstance((InputStream) byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      AAGReader aAGReader0 = new AAGReader(statisticsSolver0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      // Undeclared exception!
      try { 
        aAGReader0.parseInstance((InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      AAGReader aAGReader0 = new AAGReader(statisticsSolver0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2285), 343);
      // Undeclared exception!
      try { 
        aAGReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      AAGReader aAGReader0 = new AAGReader(iSolver0);
      try { 
        aAGReader0.parseInstance((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      AAGReader aAGReader0 = new AAGReader(statisticsSolver0);
      int[] intArray0 = new int[2];
      aAGReader0.decode(intArray0, (PrintWriter) null);
      assertFalse(aAGReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      AAGReader aAGReader0 = new AAGReader(iSolver0);
      int[] intArray0 = new int[2];
      String string0 = aAGReader0.decode(intArray0);
      assertEquals("", string0);
  }
}
