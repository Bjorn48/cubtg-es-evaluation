/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:22:17 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.Vec;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.AgeLCDS;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.MemoryBasedConflictTimer;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.specs.Constr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AgeLCDS_ESTest extends AgeLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solver<CardinalityDataStructureYanMax> solver0 = (Solver<CardinalityDataStructureYanMax>) mock(Solver.class, new ViolatedAssumptionAnswer());
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = (Solver<MixedDataStructureDanielWLConciseBinary>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer(solver1, (-194));
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, memoryBasedConflictTimer0);
      ConflictTimer conflictTimer0 = ageLCDS0.getTimer();
      assertSame(conflictTimer0, memoryBasedConflictTimer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, fixedPeriodRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>();
      // Undeclared exception!
      try { 
        ageLCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.AgeLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, (ConflictTimer) null);
      Vec<Constr> vec0 = new Vec<Constr>();
      ageLCDS0.reduce(vec0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = ageLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solver<CardinalityDataStructureYanMax> solver0 = (Solver<CardinalityDataStructureYanMax>) mock(Solver.class, new ViolatedAssumptionAnswer());
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = (Solver<MixedDataStructureDanielWLConciseBinary>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer(solver1, (-184));
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, memoryBasedConflictTimer0);
      Constr constr0 = Constr.TAUTOLOGY;
      ageLCDS0.onPropagation(constr0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, fixedPeriodRestarts0);
      ageLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, (ConflictTimer) null);
      UnitClause unitClause0 = new UnitClause(0);
      ageLCDS0.onClauseLearning(unitClause0);
      assertTrue(unitClause0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, (ConflictTimer) null);
      String string0 = ageLCDS0.toString();
      assertEquals("Age based learned constraints deletion strategy with timer null", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, (ConflictTimer) null);
      Constr constr0 = Constr.TAUTOLOGY;
      ageLCDS0.onConflictAnalysis(constr0);
  }
}
