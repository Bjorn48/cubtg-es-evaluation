/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:53:07 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.Binomial;
import org.sat4j.tools.encoding.Ladder;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClausalCardinalitiesDecorator_ESTest extends ClausalCardinalitiesDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GateTranslator>(gateTranslator0);
      String string0 = clausalCardinalitiesDecorator0.toString("ToLJJ7ZeE|k");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ManyCore<Minimal4InclusionModel> manyCore0 = (ManyCore<Minimal4InclusionModel>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(manyCore0).toString(anyString());
      Product product0 = new Product();
      ClausalCardinalitiesDecorator<ManyCore<Minimal4InclusionModel>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ManyCore<Minimal4InclusionModel>>(manyCore0, product0);
      String string0 = clausalCardinalitiesDecorator0.toString();
      assertEquals("null\nCardinality to SAT encoding: \nEncoding: org.sat4j.tools.encoding.Product\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iLits0).nVars();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams(0);
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, binomial0);
      clausalCardinalitiesDecorator0.addExactly(iVecInt0, (-1668));
      assertEquals(0, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      ClausalCardinalitiesDecorator<ModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIterator>(modelIterator0);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addAtMost((IVecInt) null, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      ClausalCardinalitiesDecorator<AbstractMinimalModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<AbstractMinimalModel>(minimal4InclusionModel0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      UnitClauses unitClauses0 = (UnitClauses)clausalCardinalitiesDecorator0.addAtMost(iVecInt0, 0);
      assertFalse(unitClauses0.simplify());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, binomial0);
      VecInt vecInt0 = new VecInt(0);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addAtLeast(vecInt0, 2645);
      assertNotNull(iConstr0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<ModelIteratorToSATAdapter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<ModelIteratorToSATAdapter>>((FullClauseSelectorSolver<ModelIteratorToSATAdapter>) null, ladder0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly((IVecInt) null, (-881));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-253));
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GateTranslator>(gateTranslator0);
      try { 
        clausalCardinalitiesDecorator0.addAtMost(iVecInt0, (-253));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt(178, 178);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      clausalCardinalitiesDecorator0.addAtMost(vecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(printWriter0);
      Binary binary0 = new Binary();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0, binary0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(iVecInt0, (-3373));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt(178, 178);
      vecInt0.shrink((-1673));
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(vecInt0, (-1972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(37);
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast(vecInt0, 1390);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Product product0 = new Product();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, product0);
      VecInt vecInt0 = new VecInt(0);
      vecInt0.shrink((-2830));
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast(vecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FullClauseSelectorSolver<ModelIteratorToSATAdapter> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<ModelIteratorToSATAdapter>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(fullClauseSelectorSolver0).addExactly(any(org.sat4j.specs.IVecInt.class) , anyInt());
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<ModelIteratorToSATAdapter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<ModelIteratorToSATAdapter>>(fullClauseSelectorSolver0);
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iLits0).nVars();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams(0);
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addExactly(iVecInt0, 1);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Product product0 = new Product();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, product0);
      VecInt vecInt0 = new VecInt(0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly(vecInt0, (-3373));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 3373
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MinOneDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<MinOneDecorator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<MinOneDecorator>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost((IVecInt) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0, solutionFoundListener0);
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(iVecInt0, 906);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Product product0 = new Product();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, product0);
      VecInt vecInt0 = new VecInt(1);
      clausalCardinalitiesDecorator0.addAtLeast(vecInt0, 1);
      assertEquals(1, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>((Minimal4InclusionModel) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      ClausalCardinalitiesDecorator<StatisticsSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<StatisticsSolver>((StatisticsSolver) null, ladder0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>((MaxSatDecorator) null, ladder0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast((IVecInt) null, (-3434));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }
}
