/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:04:10 GMT 2019
 */

package org.ow2.proactive.scripting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.Serializable;
import java.net.URI;
import java.net.URL;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.script.Bindings;
import javax.script.SimpleBindings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.ow2.proactive.scripting.ForkEnvironmentScript;
import org.ow2.proactive.scripting.Script;
import org.ow2.proactive.scripting.ScriptResult;
import org.ow2.proactive.scripting.ScriptTest;
import org.ow2.proactive.scripting.SelectionScript;
import org.ow2.proactive.scripting.SimpleScript;
import org.ow2.proactive.scripting.TaskScript;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Script_ESTest extends Script_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IL6{~i*k<)", "IL6{~i*k<)");
      File file0 = MockFile.createTempFile("org.ow2.proactive.scripting.Script$ScriptContentAndEngineName", "] not in expected format.", (File) mockFile0);
      SelectionScript selectionScript0 = new SelectionScript(file0, (Serializable[]) null);
      String string0 = selectionScript0.display();
      assertEquals(" { \nScript 'org.ow2.proactive.scripting.Script$ScriptContentAndEngineName0] not in expected format.'\n\tscriptEngineLookupName = ''\n\tscript = \n\n\tid = \n/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/IL6{~i*k<)/IL6{~i*k<)/org.ow2.proactive.scripting.Script$ScriptContentAndEngineName0] not in expected format.\n\tparameters = null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[4];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "https", serializableArray0);
      String string0 = simpleScript0.getEngineName();
      assertEquals("https", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URL uRL0 = MockURL.getFtpExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "z[9v|5/}FRO", false);
      // Undeclared exception!
      try { 
        scriptTest_ScriptForTests0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("nashorn", "nashorn");
      assertEquals("nashorn", scriptTest_ScriptForTests0.getScript());
      
      Serializable[] serializableArray0 = new Serializable[1];
      scriptTest_ScriptForTests0.script = "g~";
      SimpleScript simpleScript0 = new SimpleScript("nashorn", "args", serializableArray0);
      boolean boolean0 = scriptTest_ScriptForTests0.equals(simpleScript0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      taskScript0.script = "#'r6LI;";
      taskScript0.execute();
      assertEquals("#'r6LI;", taskScript0.getScript());
      assertEquals("file://some/fake/but/wellformed/url", taskScript0.getId());
      assertEquals("/fake/but/wellformed/url", taskScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      taskScript0.script = "#'r6LI;";
      String string0 = taskScript0.fetchScriptWithExceptionHandling();
      assertNotNull(string0);
      assertEquals("#'r6LI;", taskScript0.getScript());
      assertEquals("file://some/fake/but/wellformed/url", taskScript0.getId());
      assertEquals("#'r6LI;", string0);
      assertEquals("/fake/but/wellformed/url", taskScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(", name=", "GL,&1hbGTMM~V");
      TaskScript taskScript0 = new TaskScript(scriptTest_ScriptForTests0);
      String string0 = taskScript0.fetchScriptWithExceptionHandling();
      assertEquals(", name=", taskScript0.getId());
      assertEquals("GL,&1hbGTMM~V", taskScript0.getEngineName());
      assertEquals(", name=", string0);
      assertNotNull(string0);
      assertEquals("TestScript", taskScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URL uRL0 = MockURL.getFtpExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "z[9v|5/}FRO", false);
      scriptTest_ScriptForTests0.setScript("-j$5Y?_r");
      TaskScript taskScript0 = new TaskScript(scriptTest_ScriptForTests0);
      String string0 = taskScript0.fetchScript();
      assertEquals("-j$5Y?_r", string0);
      assertEquals("z[9v|5/}FRO", taskScript0.getEngineName());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", taskScript0.getId());
      assertEquals("/fooExample", taskScript0.getScriptName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("iw8Hkrm", "iw8Hkrm");
      simpleScript0.fetchUrlIfNeeded();
      assertEquals("iw8Hkrm", simpleScript0.getEngineName());
      assertEquals("iw8Hkrm", simpleScript0.getScript());
      assertEquals("iw8Hkrm", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("\tscriptEnginexookupNKme = '", "\tscriptEnginexookupNKme = '");
      boolean boolean0 = scriptTest_ScriptForTests0.equals(scriptTest_ScriptForTests0);
      assertTrue(boolean0);
      assertEquals("\tscriptEnginexookupNKme = '", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("\tscriptEnginexookupNKme = '", scriptTest_ScriptForTests0.getScript());
      assertEquals("\tscriptEnginexookupNKme = '", scriptTest_ScriptForTests0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URI uRI0 = MockURI.aFileURI;
      File file0 = new File(uRI0);
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = null;
      try {
        scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(file0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to read script : /tmp/foo.bar
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      String string0 = forkEnvironmentScript0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("y]drzs'@o:6x", "y]drzs'@o:6x");
      String string0 = Script.readFile(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      URL uRL1 = simpleScript0.getScriptUrl();
      assertNull(uRL1.getRef());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Script<SelectionScript> script0 = (Script<SelectionScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      SimpleScript simpleScript0 = new SimpleScript(taskScript0);
      String string0 = simpleScript0.getScriptName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests((String) null, "8$7<#4Kw`k");
      String string0 = scriptTest_ScriptForTests0.getScriptName();
      assertEquals("8$7<#4Kw`k", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("TestScript", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      String string0 = simpleScript0.getScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("result", "args");
      String string0 = simpleScript0.getScript();
      assertEquals("args", simpleScript0.getEngineName());
      assertEquals("result", string0);
      assertEquals("result", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("MD5", "args");
      Serializable[] serializableArray0 = new Serializable[5];
      SimpleScript simpleScript0 = new SimpleScript(file0, serializableArray0);
      String string0 = simpleScript0.getScript();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("selected", "nashorn");
      simpleScript0.getReader();
      assertEquals("selected", simpleScript0.getScript());
      assertEquals("selected", simpleScript0.getId());
      assertEquals("nashorn", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(", name=", ", name=");
      scriptTest_ScriptForTests0.getParameters();
      assertEquals(", name=", scriptTest_ScriptForTests0.getEngineName());
      assertEquals(", name=", scriptTest_ScriptForTests0.getScript());
      assertEquals(", name=", scriptTest_ScriptForTests0.getId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[7];
      SimpleScript simpleScript0 = new SimpleScript("/aw/=C_bX'd", "/aw/=C_bX'd", serializableArray0);
      Serializable[] serializableArray1 = simpleScript0.getParameters();
      assertEquals("/aw/=C_bX'd", simpleScript0.getScript());
      assertEquals("/aw/=C_bX'd", simpleScript0.getId());
      assertEquals("/aw/=C_bX'd", simpleScript0.getEngineName());
      assertNotNull(serializableArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("https", "https");
      String string0 = simpleScript0.getId();
      assertEquals("https", simpleScript0.getEngineName());
      assertEquals("https", simpleScript0.getScript());
      assertEquals("https", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("", "o39'N-");
      TaskScript taskScript0 = new TaskScript(scriptTest_ScriptForTests0);
      String string0 = taskScript0.fetchScript();
      assertEquals("o39'N-", taskScript0.getEngineName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", taskScript0.getId());
      assertEquals("TestScript", taskScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("nO", "nO");
      simpleScript0.createScriptEngine();
      assertEquals("nO", simpleScript0.getEngineName());
      assertEquals("nO", simpleScript0.getId());
      assertEquals("nO", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.readFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("yCdrzs'@o:6x", "yCdrzs'@o:6x");
      try { 
        Script.readFile(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      Serializable[] serializableArray0 = new Serializable[1];
      forkEnvironmentScript0.parameters = serializableArray0;
      // Undeclared exception!
      try { 
        forkEnvironmentScript0.prepareBindings((Bindings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      // Undeclared exception!
      try { 
        taskScript0.overrideDefaultScriptName("args");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[10];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      // Undeclared exception!
      try { 
        simpleScript0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "\"0a&iuC", serializableArray0);
      // Undeclared exception!
      try { 
        simpleScript0.fetchUrlIfNeeded();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (Serializable[]) null);
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      // Undeclared exception!
      taskScript0.fetchScriptWithExceptionHandling();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.digest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      TaskScript taskScript0 = new TaskScript(forkEnvironmentScript0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      ScriptResult<Serializable> scriptResult0 = taskScript0.execute((Map<String, Object>) hashMap1, (PrintStream) null, (PrintStream) null);
      assertNull(scriptResult0.getOutput());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript(",", ",");
      simpleScript0.overrideDefaultScriptName("ecmascript");
      assertEquals("ecmascript", simpleScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("FfH)Bv", "FfH)Bv");
      SimpleScript simpleScript0 = new SimpleScript(selectionScript0);
      simpleScript0.overrideDefaultScriptName("FfH)Bv");
      assertEquals("SelectionScript", simpleScript0.getScriptName());
      assertEquals("FfH)Bv", simpleScript0.getEngineName());
      assertEquals("FfH)Bv", simpleScript0.getScript());
      assertEquals("FfH)Bv", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests((String) null, "x]");
      SelectionScript selectionScript0 = new SelectionScript();
      boolean boolean0 = scriptTest_ScriptForTests0.equals(selectionScript0);
      assertTrue(boolean0);
      assertEquals("x]", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("\tscriptEnginexookupNKme = '", "\tscriptEnginexookupNKme = '");
      ScriptTest.ScriptForTests scriptTest_ScriptForTests1 = scriptTest0.new ScriptForTests((String) null, "");
      boolean boolean0 = scriptTest_ScriptForTests1.equals(scriptTest_ScriptForTests0);
      assertEquals("\tscriptEnginexookupNKme = '", scriptTest_ScriptForTests0.getScript());
      assertEquals("", scriptTest_ScriptForTests1.getEngineName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("org.ow2.proactive.scripting.Script", "org.ow2.proactive.scripting.Script");
      boolean boolean0 = scriptTest_ScriptForTests0.equals("MD5");
      assertFalse(boolean0);
      assertEquals("org.ow2.proactive.scripting.Script", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("org.ow2.proactive.scripting.Script", scriptTest_ScriptForTests0.getScript());
      assertEquals("org.ow2.proactive.scripting.Script", scriptTest_ScriptForTests0.getId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("args", "MD5");
      boolean boolean0 = scriptTest_ScriptForTests0.equals((Object) null);
      assertEquals("args", scriptTest_ScriptForTests0.getId());
      assertEquals("MD5", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("args", scriptTest_ScriptForTests0.getScript());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      taskScript0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[1];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      taskScript0.hashCode();
      assertEquals("/fake/but/wellformed/url", taskScript0.getScriptName());
      assertEquals("file://some/fake/but/wellformed/url", taskScript0.getId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/y]drzs'@o:6x0y]drzs'@o:6x");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      File file0 = MockFile.createTempFile("y]drzs'@o:6x", "y]drzs'@o:6x");
      try { 
        Script.readFile(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/\tscriptEngineLookupName = '0");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\tscriptEngineLookupName = '");
      File file0 = MockFile.createTempFile("\tscriptEngineLookupName = '", "");
      String string0 = Script.readFile(file0);
      assertEquals("\tscriptEngineLookupName = '\n", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      simpleScript0.prepareBindings(simpleBindings0);
      assertNull(simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Script<SelectionScript> script0 = (Script<SelectionScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      taskScript0.prepareBindings((Bindings) null);
      assertNull(taskScript0.getId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ScriptTest scriptTest0 = new ScriptTest();
          ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("nashorn", "nashorn");
          TaskScript taskScript0 = new TaskScript(scriptTest_ScriptForTests0);
          // Undeclared exception!
          try { 
            taskScript0.execute();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"nashorn.createContext\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:492)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:463)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:129)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:125)
             // java.security.AccessController.doPrivileged(Native Method)
             // jdk.nashorn.api.scripting.NashornScriptEngine.<init>(NashornScriptEngine.java:125)
             // jdk.nashorn.api.scripting.NashornScriptEngineFactory.getScriptEngine(NashornScriptEngineFactory.java:148)
             // org.ow2.proactive.scripting.Script.findScriptEngineCandidates(Script.java:545)
             // org.ow2.proactive.scripting.Script.createScriptEngine(Script.java:521)
             // org.ow2.proactive.scripting.Script.execute(Script.java:375)
             // org.ow2.proactive.scripting.Script.execute(Script.java:352)
             // sun.reflect.GeneratedMethodAccessor194.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URI uRI0 = MockURI.URI("https", "q|WC#)Zj,iqo2dI", "https");
      URL uRL0 = MockURI.toURL(uRI0);
      SelectionScript selectionScript0 = new SelectionScript(uRL0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      taskScript0.execute();
      assertEquals("/fooExample", taskScript0.getScriptName());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", taskScript0.getId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[2];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      // Undeclared exception!
      try { 
        taskScript0.fetchScriptWithExceptionHandling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      String string0 = taskScript0.fetchScriptWithExceptionHandling();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      String string0 = taskScript0.fetchScript();
      assertEquals("file://some/fake/but/wellformed/url", taskScript0.getId());
      assertNull(string0);
      assertEquals("/fake/but/wellformed/url", taskScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Script<SelectionScript> script0 = (Script<SelectionScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      String string0 = taskScript0.fetchScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = Script.digest("result");
      assertEquals("\uFFFD\uFFFD\uFFFD\u0017\uFFFD\uFFFD\u0017\ruLd|0\uFFFD!j", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("\tscriptEngineLookupName = '", "\tscriptEngineLookupName = '");
      SelectionScript selectionScript0 = new SelectionScript("MD5", "MD5", false);
      boolean boolean0 = scriptTest_ScriptForTests0.equals(selectionScript0);
      assertFalse(boolean0);
      assertEquals("MD5", selectionScript0.getScript());
      assertEquals("\tscriptEngineLookupName = '", scriptTest_ScriptForTests0.getId());
      assertEquals("MD5", selectionScript0.getId());
      assertEquals("\tscriptEngineLookupName = '", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("\tscriptEngineLookupName = '", scriptTest_ScriptForTests0.getScript());
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertEquals("MD5", selectionScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, (String) null);
      URL uRL0 = simpleScript0.getScriptUrl();
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      File file0 = MockFile.createTempFile("y]drzs'@o:6x", "y]drzs'@o:6x");
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(file0);
      assertEquals("/tmp/y]drzs'@o:6x0y]drzs'@o:6x", scriptTest_ScriptForTests0.getId());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[1];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      MockFile mockFile0 = new MockFile(file0, "qhJ[5*9%Lm!mIv");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ScriptResult<Object> scriptResult0 = simpleScript0.execute((Map<String, Object>) hashtable0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertTrue(scriptResult0.errorOccured());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("org.ow2.proactive.scripting.Script", (String) null);
      String string0 = simpleScript0.toString();
      assertEquals("org.ow2.proactive.scripting.Script", simpleScript0.getId());
      assertEquals("org.ow2.proactive.scripting.Script", simpleScript0.getScript());
      assertEquals("SimpleScript", string0);
      assertNotNull(string0);
  }
}
