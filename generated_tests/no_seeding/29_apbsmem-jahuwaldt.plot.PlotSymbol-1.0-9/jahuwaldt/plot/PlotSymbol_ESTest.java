/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 22:46:37 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.BoxULSymbol;
import jahuwaldt.plot.DiamondSymbol;
import jahuwaldt.plot.RTriangle3Symbol;
import jahuwaldt.plot.TabDSymbol;
import jahuwaldt.plot.ThinRect1Symbol;
import jahuwaldt.plot.ThinRect2Symbol;
import jahuwaldt.plot.Triangle2Symbol;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.SystemColor;
import java.util.Vector;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotSymbol_ESTest extends PlotSymbol_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TabDSymbol tabDSymbol0 = new TabDSymbol();
      assertEquals(8, tabDSymbol0.getSize());
      
      tabDSymbol0.setSize(0);
      int int0 = tabDSymbol0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      int int0 = thinRect2Symbol0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      Color color0 = Color.ORANGE;
      thinRect2Symbol0.setFillColor(color0);
      thinRect2Symbol0.getFillColor();
      assertEquals(8, thinRect2Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BoxULSymbol boxULSymbol0 = new BoxULSymbol();
      SystemColor systemColor0 = SystemColor.desktop;
      boxULSymbol0.setFillColor(systemColor0);
      boxULSymbol0.getFillColor();
      assertEquals(8, boxULSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      Color color0 = diamondSymbol0.getBorderColor();
      RTriangle3Symbol rTriangle3Symbol0 = new RTriangle3Symbol();
      rTriangle3Symbol0.setFillColor(color0);
      rTriangle3Symbol0.getFillColor();
      assertEquals(8, rTriangle3Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      thinRect2Symbol0.setBorderColor((Color) null);
      thinRect2Symbol0.getBorderColor();
      assertEquals(8, thinRect2Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TabDSymbol tabDSymbol0 = new TabDSymbol();
      Color color0 = new Color(680, true);
      tabDSymbol0.setBorderColor(color0);
      tabDSymbol0.getBorderColor();
      assertEquals(8, tabDSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      Vector<RTriangle3Symbol> vector0 = new Vector<RTriangle3Symbol>();
      JTable jTable0 = new JTable(vector0, vector0);
      Color color0 = jTable0.getGridColor();
      triangle2Symbol0.setBorderColor(color0);
      triangle2Symbol0.getBorderColor();
      assertEquals(8, triangle2Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThinRect1Symbol thinRect1Symbol0 = new ThinRect1Symbol();
      // Undeclared exception!
      try { 
        thinRect1Symbol0.draw((Graphics) null, (-428), (-428));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PolygonSymbol", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      thinRect2Symbol0.getFillColor();
      assertEquals(8, thinRect2Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      Color color0 = new Color(0, true);
      thinRect2Symbol0.setBorderColor(color0);
      thinRect2Symbol0.getBorderColor();
      assertEquals(8, thinRect2Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      ThinRect2Symbol thinRect2Symbol1 = (ThinRect2Symbol)thinRect2Symbol0.clone();
      assertNotSame(thinRect2Symbol1, thinRect2Symbol0);
      assertEquals(8, thinRect2Symbol1.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      thinRect2Symbol0.setSize((-989));
      int int0 = thinRect2Symbol0.getSize();
      assertEquals((-989), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      Color color0 = new Color(0, true);
      thinRect2Symbol0.setFillColor(color0);
      thinRect2Symbol0.getFillColor();
      assertEquals(8, thinRect2Symbol0.getSize());
  }
}
