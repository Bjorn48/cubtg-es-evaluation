/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 16:33:02 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PositionSwitch_ESTest extends PositionSwitch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(2201, true, true, (-3447), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(0, 0, simpleSector0);
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(combatant0)._health();
      doReturn((String) null).when(combatant0).getName();
      PositionSwitch positionSwitch0 = new PositionSwitch(0, combatant0, combatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(1, positionSwitch0.player2, positionSwitch0.player2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1547), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1547), "J,i|(drljJJeWv~{X_G", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 31, "de.outstare.fortbattleplayer.statistics.PositionSwitch", characterClass0, simpleWeapon0, "&sr_,$");
      PositionSwitch positionSwitch2 = new PositionSwitch(1, simpleCombatant0, positionSwitch0.player1);
      // Undeclared exception!
      try { 
        positionSwitch2.compareTo(positionSwitch1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.WORKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0, 1).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(1, combatant0, combatant0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-2192), area0, false);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (int) positionSwitch0.health2, "t", characterClass0, (Weapon) null, "t");
      PositionSwitch positionSwitch1 = new PositionSwitch(0, simpleCombatant0, positionSwitch0.player1);
      positionSwitch1.hashCode();
      assertEquals(1, positionSwitch0.round);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-729), (-729)).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch((-729), combatant0, combatant0);
      positionSwitch0.hashCode();
      assertEquals((-729), positionSwitch0.round);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(10, 10).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(10, combatant0, combatant0);
      // Undeclared exception!
      try { 
        positionSwitch0.compareTo((PositionSwitch) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PositionSwitch positionSwitch0 = null;
      try {
        positionSwitch0 = new PositionSwitch(1763, (Combatant) null, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(0, combatant0, combatant0);
      assertEquals(0, positionSwitch0.round);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-714), (-714), 0, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch((-714), combatant0, combatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((-1), positionSwitch0.player2, positionSwitch0.player2);
      boolean boolean0 = positionSwitch0.equals(positionSwitch1);
      assertFalse(boolean0);
      assertEquals((-1), positionSwitch1.round);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(1784, 1784, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch((-1164), combatant0, combatant0);
      Combatant combatant1 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(combatant1)._health();
      PositionSwitch positionSwitch1 = new PositionSwitch(1409, combatant1, positionSwitch0.player2);
      boolean boolean0 = positionSwitch1.equals(positionSwitch0);
      assertFalse(boolean0);
      assertEquals(1409, positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-10), (-10), (-10), 522).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch((-10), combatant0, combatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(522, positionSwitch0.player1, positionSwitch0.player1);
      int int0 = positionSwitch1.compareTo(positionSwitch0);
      assertFalse(positionSwitch0.equals((Object)positionSwitch1));
      assertEquals(1, int0);
      assertEquals(522, positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(0, combatant0, combatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(1, positionSwitch0.player2, positionSwitch0.player2);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertEquals(0, positionSwitch0.round);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0, 1, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(1, combatant0, combatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(1, positionSwitch0.player2, positionSwitch0.player2);
      boolean boolean0 = positionSwitch0.equals(positionSwitch1);
      assertEquals(1, positionSwitch1.round);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(1, combatant0, combatant0);
      boolean boolean0 = positionSwitch0.equals("]e+ogy2z");
      assertEquals(1, positionSwitch0.round);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(1, combatant0, combatant0);
      boolean boolean0 = positionSwitch0.equals((Object) null);
      assertEquals(1, positionSwitch0.round);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(1, combatant0, combatant0);
      int int0 = positionSwitch0.compareTo(positionSwitch0);
      assertEquals(0, int0);
      assertEquals(1, positionSwitch0.round);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-6), (-6), (-6)).when(combatant0)._health();
      doReturn("").when(combatant0).getName();
      PositionSwitch positionSwitch0 = new PositionSwitch((-6), combatant0, combatant0);
      Combatant combatant1 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-6)).when(combatant1)._health();
      doReturn("").when(combatant1).getName();
      PositionSwitch positionSwitch1 = new PositionSwitch((int) positionSwitch0.health2, combatant1, positionSwitch0.player1);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertEquals((-6), positionSwitch1.round);
      assertFalse(positionSwitch0.equals((Object)positionSwitch1));
      assertEquals(0, int0);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
  }
}
