/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:51:28 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.util.Map;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.reader.AAGReader;
import org.sat4j.reader.AIGReader;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IGroupSolver;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstanceReader_ESTest extends InstanceReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IGroupSolver iGroupSolver0 = mock(IGroupSolver.class, new ViolatedAssumptionAnswer());
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(iGroupSolver0);
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null, groupedCNFReader0);
      int[] intArray0 = new int[3];
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Minimal4InclusionModel> basicLauncher0 = new BasicLauncher<Minimal4InclusionModel>(aSolverFactory0);
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      instanceReader0.decode(intArray0, printWriter0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0, aIGReader0);
      boolean boolean0 = instanceReader0.hasAMapping();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IGroupSolver iGroupSolver0 = mock(IGroupSolver.class, new ViolatedAssumptionAnswer());
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(iGroupSolver0);
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null, groupedCNFReader0);
      Map<Integer, String> map0 = instanceReader0.getMapping();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0, groupedCNFReader0);
      int[] intArray0 = new int[1];
      String string0 = instanceReader0.decode(intArray0);
      assertEquals("0 0", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("qu8K[a(U_TLv&z");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".[6&5F5+D");
      try { 
        instanceReader0.parseInstance("qu8K[a(U_TLv&z");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorDIMACS error: wrong max number of variables
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GateTranslator gateTranslator0 = new GateTranslator(dimacsOutputSolver0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" 2.gz");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      InstanceReader instanceReader0 = new InstanceReader(gateTranslator0, (Reader) null);
      try { 
        instanceReader0.parseInstance(" 2.gz");
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("t4sf9");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      SolutionCounter solutionCounter0 = new SolutionCounter((ISolver) null);
      InstanceReader instanceReader0 = new InstanceReader(solutionCounter0);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance("aftq>=:t4sf9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0);
      // Undeclared exception!
      try { 
        instanceReader0.handleFileName((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0);
      // Undeclared exception!
      try { 
        instanceReader0.decode((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SolutionCounter solutionCounter0 = new SolutionCounter((ISolver) null);
      InstanceReader instanceReader0 = new InstanceReader(solutionCounter0);
      Reader reader0 = instanceReader0.handleFileName("org.sat4j.minisat.orders.SubsetVarOrder.aag", "org.sat4j.minisat.orders.SubsetVarOrder.aag");
      Reader reader1 = instanceReader0.handleFileName("org.sat4j.minisat.orders.SubsetVarOrder.aag", "Ksc27({NKBG?kExG");
      assertSame(reader1, reader0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      try { 
        instanceReader0.parseInstance(".ig.aig");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0);
      try { 
        instanceReader0.parseInstance("v^e2z-.bz2");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0);
      try { 
        instanceReader0.parseInstance("http://aftq>=:t4sf9");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      InstanceReader instanceReader0 = new InstanceReader(dimacsOutputSolver0);
      instanceReader0.handleFileName("WbqfpL.aig", "");
      try { 
        instanceReader0.parseInstance(".aig");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      InstanceReader instanceReader0 = new InstanceReader(dimacsOutputSolver0);
      Reader reader0 = instanceReader0.handleFileName("EZCNF", "EZCNF");
      assertFalse(reader0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0);
      instanceReader0.handleFileName("0QuZ(_,RJ0&", "0QuZ(_,RJ0&");
      try { 
        instanceReader0.parseInstance("0QuZ(_,RJ0&");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance((InputStream) pipedInputStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use a domain specific Reader (LecteurDimacs, AIGReader, etc.) for stream input 
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(statisticsSolver0);
      InstanceReader instanceReader0 = new InstanceReader(solutionCounter0);
      // Undeclared exception!
      try { 
        instanceReader0.hasAMapping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      InstanceReader instanceReader0 = new InstanceReader(dimacsOutputSolver0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        instanceReader0.decode(intArray0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null, aAGReader0);
      int[] intArray0 = new int[1];
      String string0 = instanceReader0.decode(intArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0);
      // Undeclared exception!
      try { 
        instanceReader0.getMapping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0);
      InstanceReader instanceReader0 = new InstanceReader(abstractMinimalModel0);
      InstanceReader instanceReader1 = new InstanceReader(iSolver0, instanceReader0);
      try { 
        instanceReader1.parseInstance("=={Z*f6ah--- Begin Solver configuration ---\n=={Z*f6ahorg.sat4j.minisat.constraints.MixedDataStructureDanielWL@0000000006\n=={Z*f6ahorg.sat4j.minisat.learning.MiniSATLearning@0000000003\n=={Z*f6ahorg.sat4j.minisat.core.SearchParams@0000000040\n=={Z*f6ahorg.sat4j.minisat.orders.VarOrderHeap@0000000008\n=={Z*f6ahorg.sat4j.minisat.core.Solver$3@0000000023\n=={Z*f6ahorg.sat4j.minisat.restarts.ArminRestarts@0000000009\n=={Z*f6ahorg.sat4j.minisat.core.Glucose2LCDS@0000000034\n=={Z*f6ahtimeout=2147483s\n=={Z*f6ahDB Simplification allowed=false\n=={Z*f6ahListener: org.sat4j.minisat.core.VoidTracing@12\n=={Z*f6ah--- End Solver configuration ---");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
