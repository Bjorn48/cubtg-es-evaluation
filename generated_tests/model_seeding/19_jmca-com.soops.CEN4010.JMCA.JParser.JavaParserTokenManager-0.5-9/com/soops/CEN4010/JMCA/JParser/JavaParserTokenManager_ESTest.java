/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 17:12:06 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserConstants;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MgG[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 0, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 749, 53);
      javaCharStream0.GetSuffix(749);
      javaCharStream0.GetSuffix(53);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaCharStream0.backup(105);
      javaCharStream0.bufpos = 749;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.lengthOfMatch = 53;
      javaParserTokenManager0.jjFillToken();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(106);
      javaParserTokenManager0.input_stream = javaCharStream0;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, 105, 41);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      Token token0 = Token.newToken(42);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 3, 3, (-794));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-769));
      javaParserTokenManager0.TokenLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('9').when(javaCharStream0).BeginToken();
      doReturn("Z]g>~t").when(javaCharStream0).GetImage();
      doReturn(18).when(javaCharStream0).getBeginColumn();
      doReturn(18).when(javaCharStream0).getBeginLine();
      doReturn(18).when(javaCharStream0).getEndColumn();
      doReturn(18).when(javaCharStream0).getEndLine();
      doReturn('K').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("Z]g>~t");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('X', '+').when(javaCharStream0).BeginToken();
      doReturn("k2gM&'>K:C=UUqyV3~t").when(javaCharStream0).GetImage();
      doReturn((-324), (-324)).when(javaCharStream0).getBeginColumn();
      doReturn(2145388542, (-324)).when(javaCharStream0).getBeginLine();
      doReturn((-324), (-2897)).when(javaCharStream0).getEndColumn();
      doReturn((-360), 43).when(javaCharStream0).getEndLine();
      doReturn('\u0086', 'v').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M,gG[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 0, 1432);
      javaCharStream0.backup(1432);
      char[] charArray0 = new char[0];
      javaCharStream0.buffer = charArray0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.').when(javaCharStream0).BeginToken();
      doReturn(101).when(javaCharStream0).getBeginColumn();
      doReturn(101).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', '2').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f=2HOWLNcSEm^bs$CRR");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 1465, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken(1215);
      StringReader stringReader1 = new StringReader("yRMH.J3Iq>P@^rxl");
      StringReader stringReader2 = new StringReader("");
      stringReader2.read();
      stringReader2.close();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 0, 0);
      MockFile mockFile0 = new MockFile("3+*");
      mockFile0.isDirectory();
      mockFile0.getName();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 61;
      StringReader stringReader0 = new StringReader("Bs\"])y#|8X8Y/j|]K");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 20, 44);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 45, column 37.  Encountered: <EOF> after : \"\\\"])y#|8X8Y/j|]K\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f=2HOWLNcSEm^bs$CRR");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 1465, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken(1465);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)12;
      token0.endColumn = (int) (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "f=2HOWLNcSEm^bs$CRR");
      StringReader stringReader1 = new StringReader("yRMH.J3Iq>P@^rxl");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "=");
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager2.getNextToken();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".v[Lb&gZ<14zC");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3956), 1352, 1352);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 896;
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '4', 'k').when(javaCharStream0).BeginToken();
      doReturn("").when(javaCharStream0).GetImage();
      doReturn(63, 63).when(javaCharStream0).getBeginColumn();
      doReturn(63, 896).when(javaCharStream0).getBeginLine();
      doReturn((int)')', 15).when(javaCharStream0).getEndColumn();
      doReturn((int)')', 36).when(javaCharStream0).getEndLine();
      doReturn('1', ')', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("long");
      int int1 = 1322;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, int1);
      JavaCharStream javaCharStream1 = new JavaCharStream(mockFileInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      int int2 = stringReader0.read();
      stringReader0.close();
      javaCharStream1.ReInit((Reader) stringReader0, int2, token1.endColumn, int0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager2.ReInit(javaCharStream1);
      javaParserTokenManager2.SkipLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2609);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2609. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f=2HOWLNcSEm^bs$CRR");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 1465, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken(1215);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "f=2HOWLNcSEm^bs$CRR");
      StringReader stringReader1 = new StringReader("yRMH.J3Iq>P@^rxl");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 828, 80);
      JavaParserTokenManager javaParserTokenManager3 = null;
      try {
        javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1, 1465);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1465. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('?').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(18).when(javaCharStream0).getEndColumn();
      doReturn(18).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("?");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.').when(javaCharStream0).BeginToken();
      doReturn(36).when(javaCharStream0).getBeginColumn();
      doReturn(4).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', '<').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(85, token0.kind);
      assertEquals(4, token0.beginLine);
      assertEquals(36, token0.beginColumn);
      assertEquals(794, token0.endLine);
      assertEquals(61, token0.endColumn);
      assertEquals(".", token0.toString());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M,gG[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 0, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaCharStream0.BeginToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 58, (-475), 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MgG[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 0, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaCharStream0.inputStream = (Reader) stringReader0;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("...");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('\"').when(javaCharStream0).BeginToken();
      doReturn(": t").when(javaCharStream0).GetImage();
      doReturn(794).when(javaCharStream0).getBeginColumn();
      doReturn(1802).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('\"').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      StringReader stringReader0 = new StringReader("");
      int int0 = JavaParserConstants.IN_SINGLE_LINE_COMMENT;
      stringReader0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 61, 24);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 2643);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2643. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      Token token0 = Token.newToken(26);
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '4', 'k', 'a').when(javaCharStream0).BeginToken();
      doReturn("", "", (String) null).when(javaCharStream0).GetImage();
      doReturn(63, 63, 63, 0).when(javaCharStream0).getBeginColumn();
      doReturn(63, 896, 113, 0).when(javaCharStream0).getBeginLine();
      doReturn((int)')', 15, 113, 0).when(javaCharStream0).getEndColumn();
      doReturn((int)')', 36, 46, 0).when(javaCharStream0).getEndLine();
      doReturn('1', ')', '[').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.curLexState = 63;
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M,gG[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 0, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.ReInit(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M,gG[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 0, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.getNextToken();
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\n");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(javaCharStream0).BeginToken();
      doReturn('a', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      StringReader stringReader0 = new StringReader("jY%i_kG");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 45, 45, 1432);
      javaCharStream1.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.beginLine = 0;
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Y");
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("jY%i_kG");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 45, 45, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken((-4486));
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', '.').when(javaCharStream0).BeginToken();
      doReturn(4081, 3).when(javaCharStream0).getBeginColumn();
      doReturn(61, 61).when(javaCharStream0).getBeginLine();
      doReturn(61, 7).when(javaCharStream0).getEndColumn();
      doReturn(794, 93).when(javaCharStream0).getEndLine();
      doReturn('.', 'U', 'S').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      StringReader stringReader0 = new StringReader(".");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 93, 3, 61);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', '.', '5').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(4081, 4081, (-645)).when(javaCharStream0).getBeginColumn();
      doReturn(61, 794, (-645)).when(javaCharStream0).getBeginLine();
      doReturn(61, 4081, (-645)).when(javaCharStream0).getEndColumn();
      doReturn(794, (-1429), 794).when(javaCharStream0).getEndLine();
      doReturn('.', 'U', 'Q', '+').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.jjmatchedKind = 794;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ".");
      javaParserTokenManager1.SkipLexicalActions(token0);
      javaParserTokenManager1.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      javaCharStream0.ReInit((InputStream) mockFileInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MgG[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 1432, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1435, javaCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      Token token0 = Token.newToken(21);
      javaParserTokenManager0.lengthOfMatch = 0;
      Token.newToken(1144);
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.').when(javaCharStream0).BeginToken();
      doReturn(794).when(javaCharStream0).getBeginColumn();
      doReturn(23).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', 'o').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 738, 53);
      javaCharStream0.GetSuffix(738);
      javaCharStream0.nextCharInd = 17;
      javaCharStream0.GetSuffix(53);
      javaCharStream0.backup(105);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjnewStateCnt = 738;
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.input_stream = javaCharStream0;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M,gG[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 0, 1432);
      stringReader0.ready();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      stringReader0.read();
      javaParserTokenManager0.jjmatchedKind = (-831);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(0).when(javaCharStream0).getEndColumn();
      doReturn(0).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', '<').when(javaCharStream0).BeginToken();
      doReturn(61, 10).when(javaCharStream0).getBeginColumn();
      doReturn((-1839), (int)'S').when(javaCharStream0).getBeginLine();
      doReturn(61, 10).when(javaCharStream0).getEndColumn();
      doReturn(794, (-741)).when(javaCharStream0).getEndLine();
      doReturn('.', 'S', '<', '\'').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ".");
      javaParserTokenManager1.image = stringBuffer0;
      javaParserTokenManager1.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      Token.newToken(21);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(712);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 712. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', 'a').when(javaCharStream0).BeginToken();
      doReturn(794).when(javaCharStream0).getBeginColumn();
      doReturn(1802).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', 'X', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 61, 24);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      CharBuffer.wrap((CharSequence) ".", 90, 10);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(0).when(javaCharStream0).getEndColumn();
      doReturn(0).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader0 = new StringReader("yRMH.J3Iq>P@^rxl");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 835, 80);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      StringReader stringReader1 = new StringReader("");
      StringBuffer stringBuffer2 = new StringBuffer(stringBuffer0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(javaCharStream0).BeginToken();
      doReturn('a', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('X', '\u0086').when(javaCharStream0).BeginToken();
      doReturn("k2gM&'>K:C=UUqyV3~t").when(javaCharStream0).GetImage();
      doReturn((-324)).when(javaCharStream0).getBeginColumn();
      doReturn(2145388542).when(javaCharStream0).getBeginLine();
      doReturn((-324), (-324)).when(javaCharStream0).getEndColumn();
      doReturn((-360), 1108).when(javaCharStream0).getEndLine();
      doReturn('\u0086', '%').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1108, column -324.  Encountered: \"\\u0086\" (134), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.').when(javaCharStream0).BeginToken();
      doReturn(61).when(javaCharStream0).getBeginColumn();
      doReturn(100).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', 'G').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.').when(javaCharStream0).BeginToken();
      doReturn(102).when(javaCharStream0).getBeginColumn();
      doReturn(1583).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', 'C').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', '.').when(javaCharStream0).BeginToken();
      doReturn(61, 61).when(javaCharStream0).getBeginColumn();
      doReturn((-1839), 61).when(javaCharStream0).getBeginLine();
      doReturn(61, 61).when(javaCharStream0).getEndColumn();
      doReturn(794, 3).when(javaCharStream0).getEndLine();
      doReturn('.', 'S', 'x').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<EOF>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 89, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f=2HOWLNcSEm^bs$CRR");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 1465, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken(1465);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)12;
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[4] = (byte)86;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "|");
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.MoreLexicalActions();
      Token token0 = new Token();
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "|");
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = new Token();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M,gG[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 0, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('9').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(18).when(javaCharStream0).getBeginColumn();
      doReturn(18).when(javaCharStream0).getBeginLine();
      doReturn(18).when(javaCharStream0).getEndColumn();
      doReturn(18).when(javaCharStream0).getEndLine();
      doReturn('a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', '<', 'a').when(javaCharStream0).BeginToken();
      doReturn(61, 10).when(javaCharStream0).getBeginColumn();
      doReturn((-1839), (int)'S').when(javaCharStream0).getBeginLine();
      doReturn(61, 10).when(javaCharStream0).getEndColumn();
      doReturn(794, (-741)).when(javaCharStream0).getEndLine();
      doReturn('.', 'S', '<', '\'', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ".");
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = new Token();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', '.', '.').when(javaCharStream0).BeginToken();
      doReturn(61, 11, (-1839)).when(javaCharStream0).getBeginColumn();
      doReturn((-1839), 11, 794).when(javaCharStream0).getBeginLine();
      doReturn(61, 11, 1606).when(javaCharStream0).getEndColumn();
      doReturn(794, 3, 11).when(javaCharStream0).getEndLine();
      doReturn('.', 'S', 'x', 'x').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 749, 53);
      javaCharStream0.GetSuffix(749);
      javaCharStream0.GetSuffix(53);
      javaCharStream0.backup(105);
      javaCharStream0.bufpos = 749;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.lengthOfMatch = 53;
      javaParserTokenManager0.jjFillToken();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?[N*NVp$D,%L>&k$vj");
      MockFile mockFile0 = new MockFile((File) null, "\"<\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.getCanonicalFile();
      PrintStream printStream0 = mockPrintStream0.format("N7~", (Object[]) javaParserTokenManager0.lexStateNames);
      javaParserTokenManager0.debugStream.println();
      mockPrintStream0.println();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.setDebugStream(printStream0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 0, 0, 5);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1635));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1635. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('/', '4', 'k').when(javaCharStream0).BeginToken();
      doReturn("", "").when(javaCharStream0).GetImage();
      doReturn(63, 63, 63).when(javaCharStream0).getBeginColumn();
      doReturn(63, 896, 113).when(javaCharStream0).getBeginLine();
      doReturn((int)'/', 15, 113).when(javaCharStream0).getEndColumn();
      doReturn((int)'/', 36, 46).when(javaCharStream0).getEndLine();
      doReturn('4', '/', '[').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("long");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('X').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn((-324)).when(javaCharStream0).getEndColumn();
      doReturn((-394)).when(javaCharStream0).getEndLine();
      doReturn('{').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.').when(javaCharStream0).BeginToken();
      doReturn(794).when(javaCharStream0).getBeginColumn();
      doReturn(1802).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', 'X').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 794, 38);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      javaCharStream0.ReInit((InputStream) mockFileInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[0];
      mockFileInputStream0.read(byteArray0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.jjnewStateCnt = 0;
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 61;
      StringReader stringReader0 = new StringReader("Bs\"]),yqK8X8Y/j|]K");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 20, 44);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 45, column 38.  Encountered: <EOF> after : \"\\\"]),yqK8X8Y/j|]K\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.').when(javaCharStream0).BeginToken();
      doReturn(794).when(javaCharStream0).getBeginColumn();
      doReturn(61).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', ' ').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 896;
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '4', 'a').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(63, 63).when(javaCharStream0).getBeginColumn();
      doReturn(63, 896).when(javaCharStream0).getBeginLine();
      doReturn((int)')', 15).when(javaCharStream0).getEndColumn();
      doReturn((int)')', 36).when(javaCharStream0).getEndLine();
      doReturn('a', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("long");
      int int1 = 1322;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, int1);
      JavaCharStream javaCharStream1 = new JavaCharStream(mockFileInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      int int2 = stringReader0.read();
      stringReader0.close();
      javaCharStream1.ReInit((Reader) stringReader0, int2, token1.endColumn, int0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager2.ReInit(javaCharStream1);
      javaParserTokenManager2.SkipLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('X', 'a').when(javaCharStream0).BeginToken();
      doReturn("k2gM&'>K:C=UUqyV3~t").when(javaCharStream0).GetImage();
      doReturn((-324)).when(javaCharStream0).getBeginColumn();
      doReturn(2145388542).when(javaCharStream0).getBeginLine();
      doReturn((-324)).when(javaCharStream0).getEndColumn();
      doReturn((-360)).when(javaCharStream0).getEndLine();
      doReturn('\u0086', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(74, token0.kind);
      assertEquals(2145388542, token0.beginLine);
      assertEquals((-324), token0.beginColumn);
      assertEquals((-360), token0.endLine);
      assertEquals((-324), token0.endColumn);
      assertEquals("k2gM&'>K:C=UUqyV3~t", token0.toString());
      
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', '.', 'a').when(javaCharStream0).BeginToken();
      doReturn(4081, 4081).when(javaCharStream0).getBeginColumn();
      doReturn(61, 794).when(javaCharStream0).getBeginLine();
      doReturn(61, 4081).when(javaCharStream0).getEndColumn();
      doReturn(794, (-1429)).when(javaCharStream0).getEndLine();
      doReturn('.', 'U', 'Q', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(794, token0.endLine);
      assertEquals(61, token0.beginLine);
      assertEquals(61, token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals(4081, token0.beginColumn);
      assertEquals(".", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(794, token1.beginLine);
      assertEquals(4081, token1.endColumn);
      assertEquals(85, token1.kind);
      assertEquals(4081, token1.beginColumn);
      assertEquals((-1429), token1.endLine);
      assertEquals(".", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.jjmatchedKind = (-1429);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ".");
      javaParserTokenManager1.SkipLexicalActions(token0);
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(mockFileInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.ReInit((InputStream) mockFileInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, 86);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 86. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 3, 3, 5);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 3);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token0.beginColumn);
      assertEquals(3, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(3, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bs\"])y#|8X8Y/j|]K");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 20, 44);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 20, 45);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(45, token0.beginLine);
      assertEquals(20, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(21, token0.endColumn);
      assertEquals(45, token0.endLine);
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals("Bs", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("yRMH.J3Iq>P@^rxl");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 835, 80);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)117;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)117, (byte)117, (byte)117, (byte)117, (byte)117}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringBuffer stringBuffer2 = new StringBuffer(stringBuffer0);
      assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertNotNull(stringBuffer2);
      assertEquals("", stringBuffer2.toString());
      assertEquals(0, stringBuffer2.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(835, token0.beginLine);
      assertEquals(835, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(80, token0.beginColumn);
      assertEquals(83, token0.endColumn);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("yRMH", token0.toString());
      assertEquals(80, javaCharStream1.getBeginColumn());
      assertEquals(83, javaCharStream1.getColumn());
      assertEquals(835, javaCharStream1.getEndLine());
      assertEquals(835, javaCharStream1.getLine());
      assertEquals(835, javaCharStream1.getBeginLine());
      assertEquals(83, javaCharStream1.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<EOF>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 89, 1432);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("<", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("EOF", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("yRMH.J3Iq>P@^rxl");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 835, 80);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.nextCharInd = 26;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.ReInit(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 835, column 81.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.defaultLexState = 0;
      javaParserTokenManager0.jjround = 0;
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('\"').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(794).when(javaCharStream0).getBeginColumn();
      doReturn(1802).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('\"').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(61, token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals(794, token0.endLine);
      assertEquals(794, token0.beginColumn);
      assertEquals(1802, token0.beginLine);
      assertNull(token0.toString());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.IN_SINGLE_LINE_COMMENT;
      assertEquals(1, int0);
      
      stringReader0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 61, 24);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(61, token1.endLine);
      assertEquals(61, token1.beginLine);
      assertEquals(23, token1.beginColumn);
      assertEquals(23, token1.endColumn);
      assertEquals(61, javaCharStream1.getLine());
      assertEquals(61, javaCharStream1.getEndLine());
      assertEquals(61, javaCharStream1.getBeginLine());
      assertEquals(23, javaCharStream1.getColumn());
      assertEquals(23, javaCharStream1.getEndColumn());
      assertEquals(23, javaCharStream1.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(23, token2.beginColumn);
      assertEquals(61, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(61, token2.beginLine);
      assertEquals(23, token2.endColumn);
      assertEquals(61, javaCharStream1.getLine());
      assertEquals(61, javaCharStream1.getEndLine());
      assertEquals(61, javaCharStream1.getBeginLine());
      assertEquals(23, javaCharStream1.getColumn());
      assertEquals(23, javaCharStream1.getEndColumn());
      assertEquals(23, javaCharStream1.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(61, javaCharStream1.getLine());
      assertEquals(61, javaCharStream1.getEndLine());
      assertEquals(61, javaCharStream1.getBeginLine());
      assertEquals(23, javaCharStream1.getColumn());
      assertEquals(23, javaCharStream1.getEndColumn());
      assertEquals(23, javaCharStream1.getBeginColumn());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 104, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.input_stream = javaCharStream0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('}').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn((-2720)).when(javaCharStream0).getEndColumn();
      doReturn((-2720)).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(80, token0.kind);
      assertEquals((-2720), token0.endColumn);
      assertEquals((-2720), token0.endLine);
      assertEquals("}", token0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', '.').when(javaCharStream0).BeginToken();
      doReturn(4081, 3).when(javaCharStream0).getBeginColumn();
      doReturn(61, 61).when(javaCharStream0).getBeginLine();
      doReturn(61, 7).when(javaCharStream0).getEndColumn();
      doReturn(794, 93).when(javaCharStream0).getEndLine();
      doReturn('.', 'U', 'S').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(61, token0.beginLine);
      assertEquals(794, token0.endLine);
      assertEquals(4081, token0.beginColumn);
      assertEquals(61, token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals(".", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(85, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(61, token1.beginLine);
      assertEquals(7, token1.endColumn);
      assertEquals(93, token1.endLine);
      assertEquals(".", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(token0.equals((Object)token1));
      assertEquals(61, token0.beginLine);
      assertEquals(794, token0.endLine);
      assertEquals(4081, token0.beginColumn);
      assertEquals(61, token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals(".", token0.toString());
      assertNotSame(token0, token1);
      
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f=2HOWLNcSEm^bs$CRR");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 1465, 1432);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(45, token0.beginLine);
      assertEquals(1465, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1465, token0.beginColumn);
      assertEquals(45, token0.endLine);
      assertEquals(1465, javaCharStream0.getEndColumn());
      assertEquals(1465, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(1465, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals("f", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token1.kind);
      assertEquals(1466, token1.beginColumn);
      assertEquals(45, token1.endLine);
      assertEquals(1466, token1.endColumn);
      assertEquals(45, token1.beginLine);
      assertEquals(1466, javaCharStream0.getBeginColumn());
      assertEquals(1466, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(1466, javaCharStream0.getColumn());
      assertEquals("=", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken(1215);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      StringReader stringReader1 = new StringReader("yRMH.J3Iq>P@^rxl");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1466, javaCharStream0.getBeginColumn());
      assertEquals(1466, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(1466, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1466, javaCharStream0.getBeginColumn());
      assertEquals(1466, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(1466, javaCharStream0.getColumn());
      
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1466, javaCharStream0.getBeginColumn());
      assertEquals(1466, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(1466, javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager2.SkipLexicalActions(token1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token1.kind);
      assertEquals(1466, token1.beginColumn);
      assertEquals(45, token1.endLine);
      assertEquals(1466, token1.endColumn);
      assertEquals(45, token1.beginLine);
      assertEquals(1466, javaCharStream0.getBeginColumn());
      assertEquals(1466, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(1466, javaCharStream0.getColumn());
      assertEquals("=", token1.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      
      javaParserTokenManager2.MoreLexicalActions();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1466, javaCharStream0.getBeginColumn());
      assertEquals(1466, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(1466, javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      
      Token token3 = Token.newToken(0);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertNull(token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      javaParserTokenManager2.TokenLexicalActions(token3);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(1466, javaCharStream0.getBeginColumn());
      assertEquals(1466, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(1466, javaCharStream0.getColumn());
      assertNull(token3.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      javaParserTokenManager2.MoreLexicalActions();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1466, javaCharStream0.getBeginColumn());
      assertEquals(1466, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(1466, javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1466, javaCharStream0.getBeginColumn());
      assertEquals(1466, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(1466, javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', 'a').when(javaCharStream0).BeginToken();
      doReturn(4081).when(javaCharStream0).getBeginColumn();
      doReturn(61).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', 'U', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(85, token0.kind);
      assertEquals(4081, token0.beginColumn);
      assertEquals(794, token0.endLine);
      assertEquals(61, token0.endColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(".", token0.toString());
      
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ".");
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("jY%i_kG");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 45, 45, 1432);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.endColumn);
      assertEquals(45, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(45, token0.beginColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(45, javaCharStream1.getEndLine());
      assertEquals(46, javaCharStream1.getColumn());
      assertEquals(46, javaCharStream1.getEndColumn());
      assertEquals(45, javaCharStream1.getBeginColumn());
      assertEquals(45, javaCharStream1.getBeginLine());
      assertEquals(45, javaCharStream1.getLine());
      assertEquals("jY", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(45, token1.beginLine);
      assertEquals(108, token1.kind);
      assertEquals(45, token1.endLine);
      assertEquals(47, token1.endColumn);
      assertEquals(47, token1.beginColumn);
      assertEquals(47, javaCharStream1.getEndColumn());
      assertEquals(45, javaCharStream1.getEndLine());
      assertEquals(47, javaCharStream1.getBeginColumn());
      assertEquals(47, javaCharStream1.getColumn());
      assertEquals(45, javaCharStream1.getBeginLine());
      assertEquals(45, javaCharStream1.getLine());
      assertEquals("%", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken((-4473));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertNull(token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      StringReader stringReader1 = new StringReader("yRMH.J3Iq>P@^rxl");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, 828, 80);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2, 48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 48. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("jY%i_kG");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 45, 45, 1432);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(45, token0.beginColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(46, token0.endColumn);
      assertEquals(45, token0.endLine);
      assertEquals(45, javaCharStream1.getEndLine());
      assertEquals(46, javaCharStream1.getColumn());
      assertEquals(46, javaCharStream1.getEndColumn());
      assertEquals(45, javaCharStream1.getBeginColumn());
      assertEquals(45, javaCharStream1.getBeginLine());
      assertEquals(45, javaCharStream1.getLine());
      assertEquals("jY", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token1.kind);
      assertEquals(45, token1.endLine);
      assertEquals(45, token1.beginLine);
      assertEquals(47, token1.endColumn);
      assertEquals(47, token1.beginColumn);
      assertEquals(45, javaCharStream1.getEndLine());
      assertEquals(47, javaCharStream1.getBeginColumn());
      assertEquals(47, javaCharStream1.getColumn());
      assertEquals(45, javaCharStream1.getBeginLine());
      assertEquals(45, javaCharStream1.getLine());
      assertEquals(47, javaCharStream1.getEndColumn());
      assertEquals("%", token1.toString());
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 47. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '(').when(javaCharStream0).BeginToken();
      doReturn(43, 43).when(javaCharStream0).getBeginColumn();
      doReturn((-4878), 5).when(javaCharStream0).getBeginLine();
      doReturn((int)')', 669).when(javaCharStream0).getEndColumn();
      doReturn((int)')', (-102)).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(78, token0.kind);
      assertEquals(41, token0.endColumn);
      assertEquals(43, token0.beginColumn);
      assertEquals(41, token0.endLine);
      assertEquals((-4878), token0.beginLine);
      assertEquals(")", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(669, token1.endColumn);
      assertEquals(77, token1.kind);
      assertEquals(43, token1.beginColumn);
      assertEquals((-102), token1.endLine);
      assertEquals(5, token1.beginLine);
      assertEquals("(", token1.toString());
      assertNotSame(token1, token0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("(");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 61;
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('.', 'a').when(javaCharStream0).BeginToken();
      doReturn(61).when(javaCharStream0).getBeginColumn();
      doReturn((-1839)).when(javaCharStream0).getBeginLine();
      doReturn(61).when(javaCharStream0).getEndColumn();
      doReturn(794).when(javaCharStream0).getEndLine();
      doReturn('.', 'S', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(85, token0.kind);
      assertEquals(61, token0.beginColumn);
      assertEquals((-1839), token0.beginLine);
      assertEquals(794, token0.endLine);
      assertEquals(61, token0.endColumn);
      assertEquals(".", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(61, token1.beginColumn);
      assertEquals(794, token1.endLine);
      assertEquals(85, token1.kind);
      assertEquals(61, token1.endColumn);
      assertEquals((-1839), token1.beginLine);
      assertEquals(".", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(61, token2.beginColumn);
      assertEquals(794, token2.endLine);
      assertEquals(61, token2.endColumn);
      assertEquals(85, token2.kind);
      assertEquals((-1839), token2.beginLine);
      assertEquals(".", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("!_2(Fk*Is:41,y%W");
      int int1 = (-3411);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, int1);
      JavaCharStream javaCharStream1 = new JavaCharStream(mockFileInputStream0);
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      stringReader0.read();
      stringReader0.close();
      javaCharStream1.ReInit((Reader) stringReader0, token2.beginLine, int0, int1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.SkipLexicalActions(token1);
      javaParserTokenManager0.TokenLexicalActions(token2);
      javaParserTokenManager1.jjFillToken();
      javaParserTokenManager1.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 896;
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '4', ')').when(javaCharStream0).BeginToken();
      doReturn("Rz08v").when(javaCharStream0).GetImage();
      doReturn(63, 63, 63).when(javaCharStream0).getBeginColumn();
      doReturn(63, 896, 896).when(javaCharStream0).getBeginLine();
      doReturn((int)')', 15, 896).when(javaCharStream0).getEndColumn();
      doReturn((int)')', 36, 1834).when(javaCharStream0).getEndLine();
      doReturn('|').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(63, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(41, token0.endColumn);
      assertEquals(63, token0.beginLine);
      assertEquals(41, token0.endLine);
      assertEquals(")", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(896, token1.beginLine);
      assertEquals(15, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(63, token1.beginColumn);
      assertEquals(36, token1.endLine);
      assertEquals("Rz08v", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(78, token2.kind);
      assertEquals(896, token2.endColumn);
      assertEquals(63, token2.beginColumn);
      assertEquals(896, token2.beginLine);
      assertEquals(1834, token2.endLine);
      assertEquals(")", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("long");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 31, (-314), 31);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', '4', 'k', '$').when(javaCharStream0).BeginToken();
      doReturn("", "").when(javaCharStream0).GetImage();
      doReturn(63, 63, 63).when(javaCharStream0).getBeginColumn();
      doReturn(63, 896, 113).when(javaCharStream0).getBeginLine();
      doReturn((int)')', 15, 113).when(javaCharStream0).getEndColumn();
      doReturn((int)')', 36, 46).when(javaCharStream0).getEndLine();
      doReturn('1', ')', '[', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(41, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(41, token0.endColumn);
      assertEquals(63, token0.beginColumn);
      assertEquals(63, token0.beginLine);
      assertEquals(")", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(36, token1.endLine);
      assertEquals(15, token1.endColumn);
      assertEquals(896, token1.beginLine);
      assertEquals(63, token1.beginColumn);
      assertEquals(66, token1.kind);
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(63, token2.beginColumn);
      assertEquals(113, token2.beginLine);
      assertEquals(113, token2.endColumn);
      assertEquals(46, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = Token.newToken(36);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertNull(token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertNotNull(token4);
      assertEquals(1866, token4.beginLine);
      assertEquals(74, token4.kind);
      assertEquals(27, token4.endColumn);
      assertEquals(63, token4.beginColumn);
      assertEquals((-613), token4.endLine);
      assertEquals("", token4.toString());
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 46;
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('/', '4', 'k').when(javaCharStream0).BeginToken();
      doReturn("", "").when(javaCharStream0).GetImage();
      doReturn(63, 63, 63).when(javaCharStream0).getBeginColumn();
      doReturn(63, 896, 113).when(javaCharStream0).getBeginLine();
      doReturn((int)'/', 15, 113).when(javaCharStream0).getEndColumn();
      doReturn((int)'/', 36, 46).when(javaCharStream0).getEndLine();
      doReturn('4', '/', '[').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(47, token0.endLine);
      assertEquals(63, token0.beginLine);
      assertEquals(63, token0.beginColumn);
      assertEquals(47, token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals("/", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(36, token1.endLine);
      assertEquals(63, token1.beginColumn);
      assertEquals(15, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(896, token1.beginLine);
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(74, token2.kind);
      assertEquals(46, token2.endLine);
      assertEquals(113, token2.endColumn);
      assertEquals(113, token2.beginLine);
      assertEquals(63, token2.beginColumn);
      assertEquals("", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 749, 53);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = javaCharStream0.GetSuffix(749);
      assertNotNull(charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(749, charArray0.length);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.nextCharInd = 17;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray1 = javaCharStream0.GetSuffix(53);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(53, charArray1.length);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(charArray1, charArray0);
      
      javaCharStream0.backup(105);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3990, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3990, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.jjnewStateCnt = 749;
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3990, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.input_stream = javaCharStream0;
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(0, javaParserTokenManager0.input_stream.getEndColumn());
      assertEquals(0, javaParserTokenManager0.input_stream.getColumn());
      assertEquals(0, javaParserTokenManager0.input_stream.getEndLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = 1231;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1231);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      bufferedInputStream0.mark(0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((InputStream) mockFileInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = mockFileInputStream0.read(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, int0);
      assertFalse(fileDescriptor0.valid());
      assertNotSame(byteArray1, byteArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjnewStateCnt = 0;
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      
      javaParserTokenManager0.SwitchTo(1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("jY%i_kG");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 45, 45, 1432);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.endColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(45, token0.beginColumn);
      assertEquals(45, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(46, javaCharStream1.getEndColumn());
      assertEquals(46, javaCharStream1.getColumn());
      assertEquals(45, javaCharStream1.getBeginColumn());
      assertEquals(45, javaCharStream1.getEndLine());
      assertEquals(45, javaCharStream1.getBeginLine());
      assertEquals(45, javaCharStream1.getLine());
      assertEquals("jY", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, token1.beginColumn);
      assertEquals(47, token1.endColumn);
      assertEquals(45, token1.endLine);
      assertEquals(45, token1.beginLine);
      assertEquals(108, token1.kind);
      assertEquals(47, javaCharStream1.getColumn());
      assertEquals(47, javaCharStream1.getBeginColumn());
      assertEquals(45, javaCharStream1.getEndLine());
      assertEquals(45, javaCharStream1.getBeginLine());
      assertEquals(45, javaCharStream1.getLine());
      assertEquals(47, javaCharStream1.getEndColumn());
      assertEquals("%", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken((-4473));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertNull(token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream1.bufpos);
      assertEquals(45, token3.beginLine);
      assertEquals(45, token3.endLine);
      assertEquals(48, token3.beginColumn);
      assertEquals(51, token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(48, javaCharStream1.getBeginColumn());
      assertEquals(51, javaCharStream1.getColumn());
      assertEquals(45, javaCharStream1.getEndLine());
      assertEquals(51, javaCharStream1.getEndColumn());
      assertEquals(45, javaCharStream1.getBeginLine());
      assertEquals(45, javaCharStream1.getLine());
      assertEquals("i_kG", token3.toString());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('?').when(javaCharStream0).BeginToken();
      doReturn(18).when(javaCharStream0).getBeginColumn();
      doReturn(18).when(javaCharStream0).getBeginLine();
      doReturn(18).when(javaCharStream0).getEndColumn();
      doReturn(18).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(91, token0.kind);
      assertEquals(18, token0.endColumn);
      assertEquals(18, token0.beginLine);
      assertEquals(18, token0.beginColumn);
      assertEquals(18, token0.endLine);
      assertEquals("?", token0.toString());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("?");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(')', 'a').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn((int)')').when(javaCharStream0).getEndColumn();
      doReturn((int)')').when(javaCharStream0).getEndLine();
      doReturn('a', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(41, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(41, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(")", token0.toString());
      
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(")");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, javaCharStream0.bufpos);
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager2.ReInit(javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M,gG[");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 0, 1432);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1432, token0.endLine);
      assertEquals(1432, token0.beginLine);
      assertEquals(1432, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1432, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1432, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("M", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1432, token1.beginLine);
      assertEquals(1432, token1.endLine);
      assertEquals(1432, javaCharStream0.getLine());
      assertEquals(1432, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1432, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(",", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1432, token2.beginLine);
      assertEquals(1, token2.endColumn);
      assertEquals(1432, token2.endLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(84, token2.kind);
      assertEquals(1432, javaCharStream0.getLine());
      assertEquals(1432, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1432, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(",", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1432, javaCharStream0.getLine());
      assertEquals(1432, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1432, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1432, javaCharStream0.getLine());
      assertEquals(1432, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1432, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1432, javaCharStream0.getLine());
      assertEquals(1432, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1432, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1432, token0.endLine);
      assertEquals(1432, token0.beginLine);
      assertEquals(1432, javaCharStream0.getLine());
      assertEquals(1432, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1432, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("M", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('1', '4', 'k').when(javaCharStream0).BeginToken();
      doReturn("", "").when(javaCharStream0).GetImage();
      doReturn(63, 63).when(javaCharStream0).getBeginColumn();
      doReturn(63, 896).when(javaCharStream0).getBeginLine();
      doReturn((int)'1', 15).when(javaCharStream0).getEndColumn();
      doReturn((int)'1', 36).when(javaCharStream0).getEndLine();
      doReturn('1', '1', '[', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(66, token0.kind);
      
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.curLexState = 63;
      javaParserTokenManager0.MoreLexicalActions();
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("[1E_e<:", token1.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 749, 53);
      javaCharStream0.GetSuffix(749);
      javaCharStream0.GetSuffix(53);
      javaCharStream0.backup(105);
      javaCharStream0.bufpos = 749;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.lengthOfMatch = 53;
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.lengthOfMatch = 105;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 25);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 25. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M,gG[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1432, 0, 1432);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager1.TokenLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      javaCharStream0.ReInit((InputStream) mockFileInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1052);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1052. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
