/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:35:37 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.IVisualizationTool;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.xplain.DeletionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeletionStrategy_ESTest extends DeletionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>((SingleSolutionDetector) null, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(singleSolutionDetector0).getLogPrefix();
      doReturn(true).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(singleSolutionDetector0).isVerbose();
      doReturn(iVecInt0).when(singleSolutionDetector0).unsatExplanation();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, false);
      IVecInt iVecInt1 = fullClauseSelectorSolver1.getLastClause();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(singleSolutionDetector0, hashMap0, iVecInt1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>((SingleSolutionDetector) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(iVecInt0).when(singleSolutionDetector0).unsatExplanation();
      SingleSolutionDetector singleSolutionDetector1 = new SingleSolutionDetector(singleSolutionDetector0);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector1, true);
      VecInt vecInt0 = new VecInt();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      iVecInt0.shrinkTo(1);
      IVecInt iVecInt1 = deletionStrategy0.explain(fullClauseSelectorSolver1, hashMap0, vecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>((SingleSolutionDetector) null, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn("fu=*.@O").when(singleSolutionDetector0).getLogPrefix();
      doReturn(true).when(singleSolutionDetector0).isVerbose();
      doReturn(iVecInt0).when(singleSolutionDetector0).unsatExplanation();
      iVecInt0.growTo(2635, 1311);
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      // Undeclared exception!
      deletionStrategy0.explain(singleSolutionDetector0, hashMap0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(statisticsSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(statisticsSolver0);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(statisticsSolver0, (Map<Integer, ?>) null, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.DeletionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain((ISolver) null, hashMap0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(singleSolutionDetectorArray0);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(manyCore0, hashMap0, vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      String string0 = deletionStrategy0.toString();
      assertEquals("Deletion based minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(singleSolutionDetector0).isVerbose();
      doReturn(vecInt0).when(singleSolutionDetector0).unsatExplanation();
      vecInt0.growTo(461, 461);
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      deletionStrategy0.explain(singleSolutionDetector0, hashMap0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(singleSolutionDetector0).isVerbose();
      doReturn(vecInt0).when(singleSolutionDetector0).unsatExplanation();
      vecInt0.growTo(14, 14);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(singleSolutionDetector0).isVerbose();
      doReturn(vecInt0).when(singleSolutionDetector0).unsatExplanation();
      vecInt0.growTo(14, (-781));
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0, false);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(optToSatAdapter0, hashMap0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(singleSolutionDetector0).getLogPrefix();
      doReturn(true).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(singleSolutionDetector0).isVerbose();
      doReturn(vecInt0).when(singleSolutionDetector0).unsatExplanation();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      vecInt0.growTo(4, (-157));
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(singleSolutionDetector0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(singleSolutionDetector0).getLogPrefix();
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true).when(singleSolutionDetector0).isVerbose();
      doReturn(vecInt0).when(singleSolutionDetector0).unsatExplanation();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      Integer integer0 = IVisualizationTool.NOTGOOD;
      hashMap0.put(integer0, deletionStrategy0);
      IVecInt iVecInt0 = deletionStrategy0.explain(singleSolutionDetector0, hashMap0, vecInt0);
      assertEquals("Deletion based minimization strategy", deletionStrategy0.toString());
      assertEquals(Integer.MIN_VALUE, iVecInt0.last());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      deletionStrategy0.cancelExplanationComputation();
      assertEquals("Deletion based minimization strategy", deletionStrategy0.toString());
  }
}
