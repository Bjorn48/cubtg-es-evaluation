/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 20:21:55 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, (-127.53899F), 0.01F, 0.01F, (-127.53899F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      Level level0 = new Level("1}", 1002.00757F, 0.01F, (-127.53899F));
      level0.clone();
      level0.setElevation((-127.53899F));
      wall0.setThickness((-127.53899F));
      wall0.setWallAtStart(wall1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      wall1.containsWallStartAt((-1021.63F), (-127.53899F), (-1656.0F));
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall((-6.741237F), (-6.741237F), (-6.741237F), (-6.741237F), (-6.741237F), (-6.741237F));
      Float float0 = new Float((-6.741237F));
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(2413.0F, 0.01F, (-222.6476F), (-222.6476F), 0.01F, 0.01F);
      wall0.setXStart(0.01F);
      Wall wall1 = new Wall(0.01F, 2413.0F, 2817.0F, (-1.0F), 0.01F, (-234.5301F));
      Float float0 = new Float(0.01F);
      wall0.setHeight(float0);
      Float.max(0.01F, (-1.0F));
      Float float1 = new Float((double) (-1.0F));
      Float float2 = wall1.getHeight();
      wall1.setHeight(float2);
      Wall wall2 = new Wall((-1883.5027F), 18.589F, 2413.0F, 773.54144F, (-1.0F), 600.4025F);
      wall0.getStartPointToEndPointDistance();
      wall1.setXEnd(1.0F);
      wall0.getYEnd();
      wall1.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart((Wall) null);
      CatalogTexture catalogTexture0 = new CatalogTexture("*lr=C)+{", "*lr=C)+{", (Content) null, (-723.5422F), 2928.2F, "Sm<S,UZ", false);
      wall0.setPattern(catalogTexture0);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Level level0 = new Level("", 0.0F, 2928.2F, 0.0F);
      wall0.isAtLevel(level0);
      Integer integer0 = Integer.getInteger("8T", 2057);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      wall0.setArcExtent((Float) null);
      wall0.containsWallStartAt(508.736F, 0.0F, 508.736F);
      Float.max(0.0F, 508.736F);
      Wall wall1 = wall0.getWallAtStart();
      Integer integer0 = new Integer(279);
      wall1.setLeftSideColor(integer0);
      wall1.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setHeight((Float) null);
      Float.max((-0.13822445F), 1.0F);
      Float float0 = new Float((double) (-0.13822445F));
      wall0.intersectsRectangle(1.0F, 1.0F, 1410.9381F, (-0.13822445F));
      wall0.setThickness(1.0F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), 1.0F, (-2816.2F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      linkedList0.pop();
      Float float0 = new Float((-1.0F));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      wall0.setArcExtent(float0);
      wall1.containsWallStartAt(508.736F, 508.736F, 0.0F);
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.getYArcCircleCenter();
      Wall.Property.values();
      Wall wall2 = new Wall(3167.0F, (-942.66F), 0.0F, (-223.511F), 508.736F, 50.0F);
      wall0.setLeftSideShininess((-964.86F));
      wall0.setLeftSideColor((Integer) null);
      wall2.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall((-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F));
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, "applicationSubFolder", temporaryURLContent0, (-1287.6682F), (-1287.6682F), "applicationSubFolder", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
      wall0.setLeftSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(1173.9F, 0.0F, 2917.6467F, 1373.0F, 0.0F);
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float((-34.28133F));
      Wall wall2 = wall1.getWallAtEnd();
      wall2.setArcExtent(float0);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall((-2847.8567F), (-2847.8567F), (-2847.8567F), (-2847.8567F), 3277.8774F, 0.1F);
      Float float0 = new Float(2.0);
      Float float1 = wall0.getHeight();
      wall0.setArcExtent(float1);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float2 = new Float(409.3F);
      Float float3 = new Float((double) (-2847.8567F));
      wall0.setArcExtent(float3);
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), 1.0F, (-2816.2F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      linkedList0.pop();
      Float float0 = new Float((-1.0F));
      wall0.setArcExtent(float0);
      wall1.containsWallStartAt(508.736F, 508.736F, 0.0F);
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.getYArcCircleCenter();
      Wall.Property.values();
      Wall wall2 = new Wall(3167.0F, (-942.66F), 0.0F, (-223.511F), 508.736F, 50.0F);
      wall0.setLeftSideShininess((-964.86F));
      wall0.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      Wall wall0 = new Wall((-745.78046F), 1655.971F, (-3744.503F), (-745.78046F), (-3744.503F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      Level level0 = new Level("1}", (-3744.503F), 2.0F, 1655.971F);
      level0.clone();
      Level level1 = new Level("1}", 1.0F, (-2499.383F), 716.21F);
      Level level2 = level1.clone();
      level2.clone();
      level2.setElevation(1.0F);
      wall0.setLevel(level2);
      wall0.setThickness(716.21F);
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall((-745.78046F), 1655.971F, (-3744.503F), (-745.78046F), (-3744.503F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LID$");
      Wall wall2 = new Wall(0.0F, 716.21F, 0.0F, (-0.9401114F), 1655.971F);
      wall1.setWallAtStart(wall0);
      Integer integer0 = new Integer(4);
      wall0.setLeftSideColor(integer0);
      wall1.setWallAtStart(wall2);
      Wall wall3 = wall1.getWallAtStart();
      wall3.getPoints();
      wall3.getPoints();
      wall2.getLeftSideTexture();
      wall2.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall((-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F));
      wall0.getPoints();
      wall0.getLeftSideColor();
      Level level0 = new Level("", 1.0F, 1.0F, (-1287.6682F));
      Level level1 = level0.clone();
      level0.setElevation((-1287.6682F));
      wall0.setLevel(level1);
      wall0.setThickness(2761.4F);
      Wall wall1 = new Wall((-1287.6682F), 1429.0107F, 498.113F, 498.113F, 1.0F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      wall0.getPoints();
      wall1.getLeftSideColor();
      wall0.containsWallStartAt(0.0F, 1.0F, (-1287.6682F));
      wall0.getPoints();
      wall0.getHeight();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setThickness((-0.13822445F));
      Level level0 = new Level("com.eteks.sweethome3d.model.Wall", 1376.7878F, (-0.13822445F), 2698.23F);
      level0.setElevation((-0.13822445F));
      wall0.setLevel(level0);
      level0.setVisible(false);
      wall0.getLevel();
      Wall wall1 = new Wall(2698.23F, (-1057.8325F), (-723.5422F), 1326.0037F, 0.0F, 1326.0037F);
      wall1.isAtLevel(level0);
      wall0.clone();
      wall1.getXEnd();
      wall1.setThickness((-1057.8325F));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      wall0.setThickness(0.0F);
      wall0.setArcExtent((Float) null);
      wall0.containsWallStartAt((-0.13822445F), 1422.49F, 2064.2634F);
      Float.max((-0.13822445F), (-2807.4F));
      Float float0 = new Float((double) 2064.2634F);
      wall0.setThickness(1422.49F);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, (-1.0F), 1.0F, (-2816.2F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Float float0 = new Float(2.0F);
      wall0.setArcExtent(float0);
      wall0.containsPoint(1322.1462F, (-1098.2F), (-1.0F));
      wall0.containsWallStartAt((-2816.2F), 0.0F, (-1708.1663F));
      Float.max((-1.0F), 2.0F);
      Float.max((-1.0F), (-3598.0F));
      Float float1 = new Float((double) (-1.0F));
      wall0.setYEnd(1322.1462F);
      Wall wall1 = new Wall(1.0F, (-2816.2F), 0.0F, (-1708.1663F), (-1098.2F), (-3598.0F));
      wall1.getLevel();
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall((-6.741237F), (-6.741237F), (-6.741237F), (-6.741237F), (-6.741237F), (-6.741237F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), 1.0F, (-2816.2F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.setWallAtEnd(wall0);
      wall0.getHeight();
      wall0.containsWallStartAt(508.736F, 508.736F, (-2259.0F));
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getYArcCircleCenter();
      Wall.Property.values();
      wall0.containsPoint(0.0F, 1331.96F, 1692.0F);
      wall0.intersectsRectangle(508.736F, (-2259.0F), 1331.96F, 2047.91F);
      wall0.setYEnd(1331.96F);
      wall0.setThickness((-1696.8021F));
      Level level0 = new Level("com.eteks.sweethome3d.io.HomeURLContent", 127.76605F, (-3823.701F), 2951.7F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.0F, 0.01F, (-223.511F));
      wall0.setXStart(0.01F);
      wall0.move(0.0F, 0.0F);
      wall0.isTrapezoidal();
      wall0.setWallAtEnd(wall0);
      Wall wall1 = new Wall(0.01F, 0.01F, 0.01F, 0.0F, 0.01F);
      wall0.setWallAtStart(wall1);
      wall0.move(2.0F, (-22.071114F));
      wall0.setRightSideColor((Integer) null);
      wall0.containsPoint(0.01F, (-223.511F), 0.0F);
      wall1.getXStart();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setWallAtStart(wall1);
      Integer integer0 = new Integer(33);
      Integer integer1 = new Integer((-1));
      wall0.setRightSideColor(integer1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      Wall wall1 = new Wall((-3056.0F), (-1580.7006F), (-121.868F), (-127.53899F), (-1060.56F), (-723.5422F));
      Wall wall2 = wall1.clone();
      wall0.setWallAtEnd(wall2);
      Level level0 = new Level("", 1002.00757F, (-1060.56F), (-723.5422F));
      level0.setFloorThickness((-1060.56F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.clone();
      Level level1 = level0.clone();
      wall2.setLevel(level1);
      wall0.setThickness((-127.53899F));
      wall2.setWallAtStart(wall0);
      wall2.getPoints();
      wall1.getLeftSideColor();
      Integer integer0 = new Integer(25);
      wall1.setRightSideColor(integer0);
      wall2.getRightSideShininess();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall((-1292.4457F), (-1292.4457F), (-1292.4457F), (-1292.4457F), (-1292.4457F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart((Wall) null);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall((-0.22556F), (-0.22556F), (-0.22556F), (-0.22556F), (-0.22556F));
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Level level0 = new Level("RIGHT_SIDE_COLOR", 0.01F, 2928.2F, (-0.22556F));
      wall0.setLevel(level0);
      Level level1 = new Level("", 0.0F, 2928.2F, 0.0F);
      wall0.isAtLevel(level1);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall((-5.9239473F), (-5.9239473F), (-5.9239473F), (-5.9239473F), (-5.9239473F));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart((Wall) null);
      CatalogTexture catalogTexture0 = new CatalogTexture("*lr=C)+{", "*lr=C)+{", (Content) null, (-723.5422F), 2928.2F, "Sm<S,UZ", false);
      wall0.setPattern(catalogTexture0);
      wall0.getLeftSideTexture();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("*lr=C)+{", propertyChangeListener0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall0, "*lr=C)+{", wall0, wall0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.getPattern();
      wall0.getRightSideColor();
      wall0.setRightSideShininess(355.9727F);
      wall0.intersectsRectangle(355.9727F, (-1.0F), 300.292F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-22.81635F), 1655.971F, 4.0F, (-22.81635F));
      wall0.setWallAtEnd(wall0);
      wall0.setThickness(0.1F);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      Wall wall1 = new Wall((-3056.0F), (-1580.7006F), (-121.868F), (-127.53899F), (-1060.56F), (-723.5422F));
      Wall wall2 = wall1.clone();
      wall0.setWallAtEnd(wall2);
      Level level0 = new Level("", 1002.00757F, (-1060.56F), (-723.5422F));
      level0.setFloorThickness((-1060.56F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.clone();
      Level level1 = level0.clone();
      wall2.setLevel(level1);
      wall0.setThickness((-127.53899F));
      wall2.setWallAtStart(wall0);
      wall2.getPoints();
      wall1.getLeftSideColor();
      Integer integer0 = new Integer(25);
      wall1.setRightSideColor(integer0);
      wall2.getRightSideShininess();
      wall1.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), 1.0F, (-2816.2F));
      wall0.setRightSideShininess(0.0F);
      wall0.intersectsRectangle((-5326.4F), 1.0F, 1253.3F, 0.0F);
      wall0.containsPoint((-336.3284F), 0.0F, 0.0F);
      wall0.getWallAtStart();
      wall0.getPoints();
      wall0.setYEnd(1469.963F);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall((-121.868F), (-127.53899F), (-121.868F), (-121.868F), (-127.53899F));
      wall0.setWallAtEnd(wall0);
      Level level0 = new Level("1}", (-127.53899F), (-127.53899F), (-127.53899F));
      Wall wall1 = new Wall((-127.53899F), 1002.00757F, (-121.868F), 315.38F, 1712.0F);
      wall1.setWallAtStart(wall0);
      Float float0 = new Float(2.8354797F);
      Float float1 = new Float(2864986.3251976892);
      Float float2 = new Float(0.0F);
      wall0.setArcExtent(float2);
      Wall wall2 = wall1.clone();
      wall2.setThickness((-894.3383F));
      wall2.getXArcCircleCenter();
      Wall wall3 = wall0.clone();
      wall3.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall((-601.2816F), (-305.4F), (-305.4F), (-305.4F), (-601.2816F));
      float float0 = new Float((-305.4F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("java.version", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.getHeight();
      wall0.setHeight((Float) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall((-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F));
      wall0.getPoints();
      Wall wall1 = new Wall((-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F));
      wall1.setWallAtStart(wall0);
      Level level0 = new Level("temp", (-1287.6682F), 63.819492F, (-1287.6682F));
      wall1.setLevel(level0);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      Integer integer0 = new Integer((-2147483059));
      wall1.setRightSideColor(integer0);
      wall1.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 1877.9F, (-1.0F), 1877.9F, 0.0F);
      wall0.setYStart(2.0F);
      Wall wall1 = wall0.clone();
      wall1.getXEnd();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall((-6.741237F), (-6.741237F), (-6.741237F), (-6.741237F), (-6.741237F), (-6.741237F));
      Float float0 = new Float((-6.741237F));
      wall0.setHeightAtEnd(float0);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      Float float0 = new Float((double) (-0.67417765F));
      wall0.setHeight(float0);
      wall0.intersectsRectangle((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(955.0F, 955.0F, 955.0F, 1.6057767F, 955.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setXEnd(1.6057767F);
      wall0.setThickness(1655.3899F);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 5671.6094F, 439.981F);
      Wall wall1 = wall0.clone();
      wall1.intersectsRectangle(1124.0F, 0.0F, 1878.0F, 1124.0F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall((-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F));
      wall0.getPoints();
      Wall wall1 = new Wall((-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F));
      wall1.setWallAtStart(wall0);
      wall0.getLevel();
      wall1.setLevel((Level) null);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
      Integer integer0 = new Integer((-2147483059));
      wall1.setRightSideColor(integer0);
      Float float0 = new Float((double) (-2147483059));
      wall1.setHeightAtEnd(float0);
      Float float1 = wall1.getHeight();
      wall0.setHeightAtEnd(float1);
      Wall wall2 = wall0.getWallAtStart();
      wall2.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Wall wall0 = new Wall(5, 5, 5, 5, 5, (-929.0F));
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(1591.08F, 0.0F, Float.POSITIVE_INFINITY, 0.0F, 0.0F);
      Float float0 = new Float((-2848.248F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart((Wall) null);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Level level0 = new Level("RIGHT_SIDE_COLOR", 0.01F, 2928.2F, (-723.5422F));
      level0.setElevation(0.0F);
      wall0.setLevel(level0);
      Level level1 = new Level("", 0.0F, 2928.2F, 0.0F);
      wall0.isAtLevel(level1);
      Integer integer0 = Integer.getInteger("8T", 2057);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(439.981F, 439.981F, 0.0F, 0.0F, 0.0F);
      wall0.move(439.981F, 439.981F);
      wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = 2413.0F;
      Wall wall0 = new Wall(2413.0F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      float float1 = 2817.0F;
      Float float2 = new Float(2413.0F);
      wall0.setArcExtent(float2);
      float float3 = (-69.0F);
      wall0.containsPoint((-69.0F), (-69.0F), 0.0F);
      // Undeclared exception!
      wall0.containsWallStartAt(2413.0F, (-69.0F), 2.0F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall((-6.741237F), (-6.741237F), (-6.741237F), (-156.5F), (-6.741237F), (-6861.0F));
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CatalogTexture catalogTexture0 = new CatalogTexture("LEFT_SIDE_SHININESS", (String) null, uRLContent0, (-6.741237F), (-156.5F), "4 cJ``v/RRi,K+%H", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
      HomeTexture homeTexture1 = new HomeTexture(homeTexture0);
      // Undeclared exception!
      try { 
        wall0.setLeftSideTexture(homeTexture1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      wall0.containsWallStartAt(508.736F, 0.0F, 508.736F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setXStart(0.0F);
      linkedList0.offerLast(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getYArcCircleCenter();
      Wall.Property.values();
      Float float0 = new Float((double) (-0.13822445F));
      wall0.setArcExtent(float0);
      Float.max((-723.5422F), 508.736F);
      Float float1 = new Float((double) 0.0F);
      Wall wall1 = wall0.getWallAtStart();
      wall1.setHeight(float0);
      wall0.getLength();
      wall1.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      wall0.setArcExtent((Float) null);
      wall0.containsWallStartAt(508.736F, 0.0F, 508.736F);
      Float.max(0.0F, 508.736F);
      wall0.setHeight((Float) null);
      Float.max((-0.13822445F), 1.0F);
      Float float0 = new Float((double) (-0.13822445F));
      wall0.setHeight(float0);
      wall0.getLength();
      wall0.getStartPointToEndPointDistance();
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall((-121.868F), (-127.53899F), (-121.868F), (-121.868F), (-127.53899F));
      wall0.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall(0.37699687F, 3.9659805F, 3141.3354F, 2689.97F, 248.53899F, 0.37699687F);
      Level level0 = new Level("Super class isn't cloneable", 3141.3354F, (-1583.0729F), (-1632.722F));
      level0.setElevation((-1632.722F));
      wall0.setLevel(level0);
      level0.clone();
      Wall wall1 = wall0.clone();
      wall1.getLevel();
      wall0.isAtLevel((Level) null);
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), 1.0F, (-2816.2F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      Wall wall2 = linkedList0.pop();
      Float float0 = new Float((-1.0F));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      wall0.setArcExtent(float0);
      Integer integer0 = new Integer((-159));
      wall2.setRightSideColor(integer0);
      wall1.containsPoint((-723.5422F), 0.0F, 1.0F);
      wall1.getXStart();
      Wall wall3 = new Wall(0.0F, (-1.0F), (-159), (-1939.015F), (-1.0F), 1875.0818F);
      wall1.getWallAtEnd();
      wall1.setWallAtStart((Wall) null);
      Integer integer1 = new Integer((-159));
      wall2.setRightSideColor(integer1);
      wall2.containsWallEndAt(508.736F, 2.0F, (-1395.0F));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("[9iG,q-3P0fXvmI", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setYEnd(0.0F);
      wall0.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 569.7761F, 1.0F, (-1572.0F));
      Float float0 = new Float((-1572.0F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setArcExtent(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float1 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2865.1277F), 0.1F, 0.1F, (-1751.55F));
      Level level0 = new Level("cE!SCenz$DHpBP", (-1751.55F), (-2865.1277F), 0.0F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(569.7761F, (-1572.0F), 569.7761F, 1.0F, 1.0F, (-1572.0F));
      Float float0 = new Float((double) 1.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.0F, 0.01F, (-223.511F));
      wall0.setXStart(0.01F);
      Wall wall1 = new Wall(0.01F, 0.0F, 2817.0F, 0.0F, 0.01F, (-234.5301F));
      wall1.intersectsRectangle(0.0F, 0.01F, 4264.684F, (-1.0F));
      wall0.containsPoint(0.0F, 4264.684F, 0.1F);
      wall0.getWallAtStart();
      Wall wall2 = new Wall((-723.5422F), (-1482.0F), 867.5378F, (-234.5301F), 0.01F, (-223.511F));
      URL uRL0 = MockURL.getFileExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, temporaryURLContent0, 2817.0F, (-723.5422F), true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall2.setRightSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(955.0F, 955.0F, 955.0F, 955.0F, 1.0F, 1.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setXEnd(1.0F);
      wall0.setThickness(1654.7551F);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.getLeftSideColor();
      wall0.containsWallStartAt(3277.8774F, 0.0F, (-1448.6743F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall((-1206.783F), (-1206.783F), (-1206.783F), (-1206.783F), (-1.0F));
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setYEnd((-1.0F));
      wall0.clone();
      Wall wall1 = new Wall((-1195.879F), (-1206.783F), 1371.94F, (-1039.9F), (-2679.3F), 0.1F);
      wall1.setRightSideShininess((-1.0F));
      wall1.clone();
      wall0.intersectsRectangle(1878.0F, 252.0F, (-1.0F), 0.1F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtStart((Wall) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(1211.0F, 1211.0F, (-33.0F), (-1.0F), (-1.0F), 0.0F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.setXEnd(737.14844F);
      wall0.setThickness((-1.0F));
      wall1.setWallAtStart(wall0);
      wall1.getPoints();
      wall1.getLeftSideColor();
      wall0.containsWallStartAt((-2048.7112F), 122.0F, (-2048.7112F));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      wall0.setXStart((-0.67417765F));
      wall0.intersectsRectangle((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(1356.838F, 1356.838F, 1356.838F, 2.0F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("UtI]R|4&6", propertyChangeListener0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object1, "M<,e", wall0, object2);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.getWallAtStart();
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(object0, "K", wall0, (Object) null);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getArcExtent();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("UtI]R|4&6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.UtI]R|4&6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall((-1292.1804F), (-1292.1804F), (-1292.1804F), (-1292.1804F), (-1292.1804F), (-1292.1804F));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      Integer integer0 = new Integer((-1799));
      wall0.getRightSideColor();
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-838.0F), (-723.5422F), (-723.5422F), (-0.13822445F), 639.5F);
      Float float0 = new Float((double) (-0.13822445F));
      wall0.setHeightAtEnd(float0);
      float float1 = new Float((-723.5422F));
      wall0.setYStart((-838.0F));
      Wall wall1 = wall0.clone();
      wall1.getYEnd();
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall((-723.3422F), (-723.3422F), (-723.3422F), (-723.3422F), (-723.3422F));
      wall0.setWallAtStart((Wall) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.0F, 0.01F, (-223.511F));
      wall0.setXStart(0.01F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall1 = new Wall(0.0F, 0.0F, (-7.4519997F), (-7.4519997F), 0.01F, 0.0F);
      wall0.setLeftSideShininess(395.4F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = 1.0F;
      Wall wall0 = new Wall(0.0F, 0.0F, (-3496.2F), 1.0F, 2279.5906F);
      wall0.getRightSideTexture();
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("4 cJ``v/RRi,K+%H", "4 cJ``v/RRi,K+%H", uRLContent0, (-377.46F), (-902.44214F), "4 cJ``v/RRi,K+%H", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
      wall0.setRightSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.0F, 0.01F, (-223.511F));
      wall0.setXStart(0.01F);
      wall0.move(0.0F, 0.0F);
      wall0.isTrapezoidal();
      wall0.setWallAtEnd(wall0);
      Wall wall1 = new Wall(0.01F, 0.01F, 0.01F, 0.0F, 0.01F);
      wall0.setWallAtStart(wall1);
      wall0.move(2.0F, (-22.071114F));
      wall0.setRightSideColor((Integer) null);
      wall0.containsPoint(0.01F, (-223.511F), 0.0F);
      wall0.intersectsRectangle(1.0F, 880.61554F, 1011.68414F, (-22.071114F));
      Wall wall2 = new Wall((-1.0F), 1.0F, (-385.8F), (-1.0F), 0.0F);
      wall2.setThickness(0.1F);
      wall2.getLeftSideColor();
      Wall wall3 = wall0.getWallAtEnd();
      wall3.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      Level level0 = new Level("RIGHT_SIDE_COLOR", 2928.2F, 2928.2F, (-723.5422F));
      level0.setElevation(0.0F);
      wall0.setLevel(level0);
      wall0.isAtLevel(level0);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      wall0.setWallAtStart((Wall) null);
      wall0.getLevel();
      Level level0 = new Level("com.eteks.sweethome3d.tools.URLContent", 1451.2F, 2157.0F, (-586.6F));
      wall0.setLevel(level0);
      Level level1 = new Level("C$", 2157.0F, 0.0F, 0.0F);
      wall0.isAtLevel(level1);
      Integer integer0 = Integer.getInteger("RIGHT_SIDE_COLOR", 2057);
      wall0.setLeftSideColor(integer0);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = (-428.5F);
      float float1 = 3197.7622F;
      Wall wall0 = new Wall((-428.5F), (-225.39021F), (-225.39021F), (-428.5F), 3197.7622F, (-225.39021F));
      Wall wall1 = wall0.clone();
      wall1.getWallAtStart();
      String string0 = "<tJyt.{X8@wT5B7-3";
      PropertyChangeListener propertyChangeListener0 = null;
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("<tJyt.{X8@wT5B7-3", (PropertyChangeListener) null);
      PropertyChangeEvent propertyChangeEvent0 = null;
      try {
        propertyChangeEvent0 = new PropertyChangeEvent((Object) null, "<tJyt.{X8@wT5B7-3", "<tJyt.{X8@wT5B7-3", wall0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall((-1292.4457F), (-1292.4457F), (-1292.4457F), (-1292.4457F), (-1292.4457F));
      wall0.setWallAtStart(wall0);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.0F, 0.01F, (-223.511F));
      wall0.setXStart(0.01F);
      wall0.move(0.0F, 0.0F);
      wall0.isTrapezoidal();
      Wall wall1 = new Wall(0.01F, 0.01F, 0.01F, (-223.511F), 0.01F);
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall(0.01F, 0.01F, 0.01F, 0.0F, 0.01F);
      wall0.setWallAtStart(wall2);
      wall0.move(2.0F, (-22.071114F));
      wall0.setRightSideColor((Integer) null);
      wall2.containsPoint(1.0F, 0.01F, 2.0F);
      wall0.getXStart();
      wall0.setWallAtStart(wall2);
      Integer integer0 = new Integer(4);
      wall2.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall(955.0F, 955.0F, 955.0F, 955.0F, 955.0F, 955.0F);
      wall0.setWallAtEnd(wall0);
      Integer integer0 = new Integer(4113);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("4 cJ``v/RRi,K+%H", "4 cJ``v/RRi,K+%H", uRLContent0, (-377.46F), 0.0F, "4 cJ``v/RRi,K+%H", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), 1.0F, (-2816.2F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      linkedList0.pop();
      Float float0 = new Float((-1.0F));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      wall0.setArcExtent(float0);
      wall1.containsWallStartAt(508.736F, 508.736F, 0.0F);
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getYArcCircleCenter();
      Wall.Property.values();
      wall0.setLeftSideShininess((-964.86F));
      wall0.setLeftSideColor((Integer) null);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall((-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F));
      wall0.getPoints();
      Wall wall1 = new Wall((-1287.6682F), 1.0F, (-1287.6682F), (-1287.6682F), 1.0F, (-1287.6682F));
      wall1.setWallAtStart(wall0);
      Level level0 = new Level("temp", (-1593.682F), 63.819492F, 1.0F);
      wall1.setLevel(level0);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      Integer integer0 = new Integer((-2147483059));
      wall1.setRightSideColor(integer0);
      wall1.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      Wall wall1 = new Wall((-723.5422F), (-838.2575F), (-723.5422F), (-723.5422F), (-0.13822445F), 639.5F);
      wall0.setLeftSideShininess((-0.13822445F));
      Wall wall2 = wall1.clone();
      Float float0 = new Float((double) (-0.13822445F));
      wall2.setHeightAtEnd(float0);
      wall1.setYStart((-0.13822445F));
      wall1.clone();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), 1.0F, (-2816.2F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      linkedList0.pop();
      Float float0 = new Float((-1.0F));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      wall0.setArcExtent(float0);
      wall1.containsWallStartAt(508.736F, 508.736F, 0.0F);
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.getYArcCircleCenter();
      Wall.Property.values();
      Wall wall2 = new Wall(3167.0F, (-942.66F), 0.0F, (-223.511F), 508.736F, 50.0F);
      wall0.setLeftSideShininess((-964.86F));
      wall0.setLeftSideColor((Integer) null);
      wall0.getXEnd();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall((-721.71075F), (-721.71075F), (-721.71075F), (-721.71075F), (-721.71075F));
      Wall wall1 = new Wall((-3056.0F), (-1580.7006F), (-121.868F), (-127.53899F), (-1060.56F), (-721.71075F));
      Wall wall2 = wall1.clone();
      wall0.setWallAtEnd(wall2);
      Level level0 = new Level("", 1002.00757F, (-1060.56F), (-721.71075F));
      level0.setFloorThickness((-1060.56F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.clone();
      Level level1 = level0.clone();
      wall2.setLevel(level1);
      wall0.setThickness((-127.53899F));
      wall2.setWallAtStart(wall0);
      wall2.getPoints();
      wall1.getLeftSideColor();
      Integer integer0 = new Integer(25);
      wall1.containsWallStartAt(851.31824F, 348.22836F, (-2414.34F));
      wall0.getPoints();
      wall2.getHeight();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      wall0.getPattern();
      wall0.setPattern((TextureImage) null);
      wall0.intersectsRectangle((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall((-10.266333F), (-10.266333F), (-10.266333F), (-10.266333F), (-10.266333F), (-10.266333F));
      wall0.containsWallEndAt((-10.266333F), (-10.266333F), (-10.266333F));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      wall0.intersectsRectangle((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(405.2026F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      TexturesCategory texturesCategory0 = new TexturesCategory("Qr5h)trD:e");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Qr5h)trD:e", "Qr5h)trD:e", 427, "m3j>6Sep8\"aPj7a", uRLStreamHandler0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      CatalogTexture catalogTexture0 = new CatalogTexture("Qr5h)trD:e", "Qr5h)trD:e", resourceURLContent0, 3012.58F, 0.0F, "Qr5h)trD:e");
      texturesCategory0.add(catalogTexture0);
      CatalogTexture catalogTexture1 = texturesCategory0.getTexture(0);
      wall0.setPattern(catalogTexture1);
      wall0.getLength();
      Integer integer0 = new Integer(0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall((-6.741237F), (-6.741237F), (-6.741237F), (-6.741237F), 2.0F, 2.0F);
      wall0.getPoints();
      Wall wall1 = new Wall((-1.0F), 127.54899F, (-14.731989F), (-3855.212F), (-2200.5964F));
      wall0.setLeftSideShininess((-2200.5964F));
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      Wall wall2 = wall1.getWallAtStart();
      wall2.getPoints();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall((-721.71075F), (-721.71075F), (-721.71075F), (-721.71075F), (-721.71075F));
      Wall wall1 = new Wall((-3056.0F), (-1580.7006F), (-121.868F), (-127.53899F), (-1060.56F), (-721.71075F));
      Wall wall2 = wall0.clone();
      wall0.setWallAtEnd(wall2);
      Level level0 = new Level("", 1002.00757F, (-1060.56F), (-721.71075F));
      level0.setFloorThickness((-1060.56F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.clone();
      Level level1 = level0.clone();
      wall2.setLevel(level1);
      wall0.setThickness((-127.53899F));
      wall2.setWallAtStart(wall0);
      wall2.getPoints();
      wall1.getLeftSideColor();
      Integer integer0 = new Integer(25);
      wall1.containsWallStartAt(851.31824F, 348.22836F, (-2414.34F));
      wall0.getPoints();
      wall2.getHeight();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-838.0F), (-723.5422F), (-723.5422F), (-0.13822445F), 639.5F);
      Float float0 = new Float((double) 639.5F);
      Float float1 = new Float((double) 639.5F);
      wall0.setHeightAtEnd(float1);
      wall0.move(1591.08F, 639.5F);
      Float.max(0.01F, 1677.8899F);
      wall0.setYStart((-723.5422F));
      wall0.clone();
      wall0.getYEnd();
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      Float float0 = new Float((-1619.9862F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-0.13822445F), 201.55F, (-1.0F));
      Float.max(509.89224F, 0.0F);
      Float.max(509.89224F, (-3774.69F));
      Float float1 = new Float(1.0);
      Integer integer0 = new Integer(2112217953);
      wall0.setLeftSideColor(integer0);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-1505.5F), 0.0F, (-1505.5F), 1.0F, (-1505.5F));
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(667.023F, 667.023F, 667.023F, 667.023F, 1051.8364F);
      Integer integer0 = new Integer((-962));
      Integer.getInteger("n'+ze=mk", integer0);
      Integer.compare((-1), (-1));
      wall0.setRightSideColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      Object object0 = new Object();
      wall0.getWallAtEnd();
      Integer integer1 = new Integer((-962));
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "%", (Object) null, integer1);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.getPattern();
      wall0.getRightSideColor();
      wall0.setRightSideShininess((-1.0F));
      wall0.intersectsRectangle(439.981F, 667.023F, 2.01F, 439.981F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall((-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F));
      wall0.getPoints();
      Wall wall1 = new Wall((-1287.6682F), 1.0F, 1.0F, 1.0F, 1.0F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), (-336.3284F), (-2816.2F));
      wall0.setWallAtEnd(wall0);
      Float float0 = new Float((-1.0F));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      Float.max(0.0F, (-1.0F));
      Float.max(0.0F, (-1.0F));
      Level level0 = new Level("BACKGROUND_IMAGE", (-336.3284F), 0.0F, (-336.3284F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(2689.965F, 2689.965F, 2689.965F, 0.37699687F, 1.0F, (-2822.387F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      Level level0 = new Level("", 2689.965F, 1.0F, 0.37699687F);
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      wall0.setThickness(2689.965F);
      wall0.getPoints();
      wall1.getLeftSideColor();
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.0F, 0.01F, (-223.511F));
      wall0.setXStart(0.01F);
      Wall wall1 = new Wall(0.01F, 0.0F, 2817.0F, (-1.0F), 0.01F, (-234.5301F));
      wall0.setRightSideShininess(18.589F);
      Wall wall2 = new Wall(0.01F, 4593.1655F, (-336.3284F), 508.736F, 3167.0F, 0.01F);
      wall0.setLeftSideShininess((-234.5301F));
      wall0.getRightSideColor();
      wall0.setLeftSideColor((Integer) null);
      wall2.getXArcCircleCenter();
      wall2.getRightSideTexture();
      wall1.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall((-1206.783F), (-1206.783F), (-1206.783F), (-1206.783F), (-1.0F));
      wall0.getPoints();
      wall0.isTrapezoidal();
      Wall wall1 = new Wall((-1.0F), (-1.0F), 1.0F, (-1334.9645F), 1.0F, (-631.0F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall(0.0F, (-1334.9645F), (-1288.0F), (-3851.68F), (-3851.68F));
      wall0.setWallAtStart(wall2);
      wall2.move(1.0F, (-1288.0F));
      Integer integer0 = new Integer(711);
      wall2.setRightSideColor(integer0);
      wall0.containsPoint((-798.78F), (-631.0F), 0.0F);
      wall0.getXStart();
      wall1.getWallAtStart();
      wall0.setWallAtStart(wall1);
      Integer integer1 = new Integer(711);
      Integer integer2 = new Integer(1477);
      Wall wall3 = wall0.getWallAtEnd();
      Integer integer3 = new Integer(711);
      wall3.setRightSideColor(integer3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      Integer integer0 = new Integer(447);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall(955.0F, 955.0F, 955.0F, 955.0F, 1.0F, 1.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setXEnd(1.0F);
      Float float0 = new Float(1.0F);
      wall0.setThickness(1654.7551F);
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall1.getLeftSideColor();
      wall1.containsWallStartAt(3277.8774F, 0.0F, (-1448.6743F));
      wall1.getPoints();
      wall0.getHeight();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      wall0.getPattern();
      wall0.setPattern((TextureImage) null);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      wall0.setThickness((-0.13822445F));
      wall0.setArcExtent((Float) null);
      wall0.containsWallStartAt(509.89224F, 0.0F, 509.89224F);
      Float.max((-0.13822445F), 1.0F);
      Float float0 = new Float((double) 1.0F);
      wall0.setThickness(0.0F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall((-1292.4457F), (-1292.4457F), (-1292.4457F), (-1292.4457F), (-1292.4457F));
      wall0.setThickness((-1292.4457F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float(4.272129884690372);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall((-1361.148F), (-926.3752F), (-926.3752F), 0.0F, (-1836.8073F));
      Integer integer0 = new Integer((-656));
      wall0.setRightSideColor(integer0);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setArcExtent(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float1 = new Float(0.0F);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("L:=okxmd", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.intersectsRectangle((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall((-121.868F), (-1060.56F), (-121.868F), (-121.868F), (-1060.56F));
      wall0.setWallAtEnd(wall0);
      Level level0 = new Level("1}", (-127.53899F), (-127.53899F), (-127.53899F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("1}", (String) null, "", propertyChangeListenerProxy1);
      propertyChangeListenerProxy2.propertyChange(propertyChangeEvent0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy2);
      Level level1 = level0.clone();
      level1.clone();
      Level level2 = new Level("", 1002.00757F, (-121.868F), 1002.00757F);
      level2.setElevation(0.0F);
      wall0.setThickness((-121.868F));
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.getPoints();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("'XeqZ:L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.'XeqZ:L
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(2689.965F, 2689.965F, 2689.965F, 2689.965F, 1.0F, (-2822.387F));
      wall0.setWallAtEnd(wall0);
      Level level0 = new Level("", 2689.965F, 1.0F, 2689.965F);
      level0.clone();
      wall0.setThickness(2689.965F);
      wall0.getPoints();
      wall0.getLeftSideColor();
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall((-1206.783F), (-1206.783F), (-1206.783F), (-1206.783F), (-1.0F));
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setYEnd((-1.0F));
      Float float0 = new Float((-1.0F));
      wall0.setYStart(486.6649F);
      Float float1 = new Float((double) 486.6649F);
      wall0.setHeight(float0);
      wall0.getLength();
      wall0.getLeftSideTexture();
      wall0.getPoints();
      Float float2 = new Float((-310.0F));
      wall0.setHeightAtEnd(float2);
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall(30.332417F, 30.332417F, 30.332417F, 30.332417F, 30.332417F, 30.332417F);
      wall0.getLeftSideColor();
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall(1373.0F, 638.56757F, 638.56757F, 1373.0F, 1373.0F);
      CatalogTexture catalogTexture0 = new CatalogTexture("?$#A?={", (Content) null, (-1721.62F), (-1837.0F), false);
      wall0.setPattern(catalogTexture0);
      Float float0 = new Float((double) 1373.0F);
      wall0.setHeightAtEnd(float0);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), 1.0F, (-2816.2F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      linkedList0.pop();
      Float float0 = new Float((-1.0F));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      wall0.setArcExtent(float0);
      wall1.containsWallStartAt(508.736F, 508.736F, 0.0F);
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.getYArcCircleCenter();
      Wall.Property.values();
      wall0.containsPoint(0.0F, (-1.0F), (-476.4867F));
      Wall wall2 = new Wall(2870.5527F, 554.8F, (-1.0F), (-1165.0715F), 1326.0037F);
      wall2.setThickness(5671.6094F);
      wall1.getLeftSideColor();
      wall1.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), 1.0F, (-2816.2F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      linkedList0.pop();
      Float float0 = new Float((-1.0F));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      wall0.setArcExtent(float0);
      Float.max((-2816.2F), (-1.0F));
      Float float1 = new Float(0.0);
      Float float2 = new Float((double) (-1.0F));
      wall0.setHeight(float2);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall((-2847.8567F), (-2847.8567F), 3277.8774F, (-2847.8567F), 3277.8774F, (-14.022106F));
      Wall wall1 = new Wall(440.83524F, 440.83524F, 1628.91F, 1628.91F, (-2847.8567F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall((-2847.8567F), (-2847.8567F), 3277.8774F, (-2847.8567F), 3277.8774F, (-14.022106F));
      Wall wall1 = new Wall(3277.8774F, 3277.8774F, (-14.022106F), (-14.022106F), (-2847.8567F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float((-2847.8567F));
      wall1.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getHeight();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-838.0F), (-723.5422F), (-723.5422F), (-0.13822445F), 639.5F);
      Float float0 = new Float((double) (-0.13822445F));
      wall0.move(1591.08F, 851.3082F);
      Float.max((-0.13822445F), (-838.0F));
      Float.min(639.5F, 639.5F);
      wall0.setHeightAtEnd(float0);
      wall0.setYStart((-0.13822445F));
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-838.0F), (-723.5422F), (-723.5422F), (-0.13822445F), 639.5F);
      Float float0 = new Float((double) (-0.13822445F));
      wall0.setHeightAtEnd(float0);
      Level level0 = new Level("", (-0.13822445F), (-701.48047F), (-723.5422F));
      level0.setElevation(340.723F);
      wall0.setLevel(level0);
      Level level1 = level0.clone();
      wall0.isAtLevel(level1);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart((Wall) null);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Level level0 = new Level("RIGHT_SIDE_COLOR", 0.01F, 2928.2F, (-723.5422F));
      level0.setElevation(0.0F);
      Float.max(2928.2F, 0.01F);
      Float float0 = new Float(0.01F);
      wall0.setHeight(float0);
      Float.max(600.4025F, (-723.5422F));
      Float float1 = new Float((double) 600.4025F);
      wall0.getHeight();
      wall0.setHeight(float1);
      Wall wall1 = new Wall(0.0F, 0.0F, 2928.2F, (-1.0F), 600.4025F, 1714.8611F);
      wall0.getLength();
      wall1.getStartPointToEndPointDistance();
      wall1.getYStart();
      wall0.setXEnd(600.4025F);
      wall1.getYEnd();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      wall0.containsWallStartAt(508.736F, (-0.13822445F), 508.736F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setXStart((-0.13822445F));
      Float float0 = new Float((-723.5422F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt(1346.075F, (-723.5422F), 745.27F);
      Float.max(412.0F, 745.27F);
      Float.max((-0.13822445F), 0.0F);
      Level level0 = new Level("Y_END", 412.0F, (-724.6379F), 22.0F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall((-1.1832477F), 0.01F, (-1.1832477F), 0.01F, 0.01F);
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall.Property.values();
      Float float0 = new Float(0.0);
      wall0.setArcExtent(float0);
      Float float1 = new Float(8178083.687048599);
      wall0.getWallAtStart();
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd((Wall) null);
      wall1.getLength();
      Wall.Property.valueOf("RIGHT_SIDE_COLOR");
      Integer integer0 = new Integer(31);
      wall1.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall(1742.0F, 1742.0F, 1742.0F, 1742.0F, 1742.0F, 1742.0F);
      Float float0 = new Float(2649.8F);
      Float.isFinite(2649.8F);
      Wall wall1 = wall0.clone();
      wall1.setArcExtent(float0);
      wall0.setArcExtent(float0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F);
      Wall wall1 = wall0.clone();
      wall1.getPoints();
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall1.setThickness((-2534.0F));
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall((-723.32056F), (-723.32056F), (-723.32056F), (-723.32056F), (-723.32056F), (-723.32056F));
      wall0.setWallAtStart((Wall) null);
      Float float0 = new Float((double) (-723.32056F));
      wall0.setArcExtent(float0);
      Float float1 = new Float(2928.2F);
      Float float2 = wall0.getArcExtent();
      wall0.setArcExtent(float2);
      Wall wall1 = new Wall((-2807.4F), (-2807.4F), 1.0F, 2928.2F, (-2807.4F), 336.0F);
      wall1.getLevel();
      wall1.isAtLevel((Level) null);
      Wall wall2 = new Wall(1.0F, 2476.34F, (-789.8F), 0.1F, (-2807.4F), 222.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall1);
      Float float3 = new Float((-1656.2076F));
      wall1.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.0F, 0.01F, (-223.511F));
      wall0.setXStart(0.01F);
      wall0.move(0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.01F, (-223.511F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall(0.01F, 0.01F, 0.01F, 0.0F, 0.01F);
      wall0.setWallAtStart(wall2);
      wall0.move(2.0F, (-22.071114F));
      wall1.getYArcCircleCenter();
      Wall.Property.values();
      Wall wall3 = new Wall(1.0F, 1.0F, 0.0F, (-223.511F), 1.0F, 0.0F);
      wall2.setLeftSideShininess(0.0F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall((-723.32056F), (-723.32056F), (-723.32056F), (-723.32056F), (-723.32056F), (-723.32056F));
      Wall wall1 = new Wall((-723.32056F), 0.32057536F, (-723.32056F), (-1.0F), (-2430.7932F));
      Wall wall2 = new Wall((-472.298F), 0.32057536F, 582.0F, 0.0F, 0.0F);
      wall0.getHeightAtEnd();
      wall2.setHeightAtEnd((Float) null);
      wall0.setRightSideTexture((HomeTexture) null);
      wall2.setYEnd(679.0F);
      Wall wall3 = wall2.clone();
      wall3.getThickness();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(4.0F, 2689.97F, (-2822.387F), 2689.97F, (-2822.387F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall wall1 = new Wall(0.0471111F, (-2822.387F), 2012.4668F, 2012.4668F, 0.0F);
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(0.0471111F);
      Wall wall2 = wall0.getWallAtEnd();
      wall2.setArcExtent((Float) null);
      wall2.getPoints();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), 1308.835F, (-723.5422F), (-723.5422F), (-0.13822445F), 639.5F);
      Float float0 = new Float(0.1771240234375);
      wall0.setHeightAtEnd(float0);
      wall0.move((-0.5728165F), 1647.0F);
      Float.max(0.0F, 2.0F);
      wall0.setLeftSideShininess(2229.2F);
      wall0.setHeightAtEnd(float0);
      Float float1 = new Float((-1625.2F));
      wall0.setHeightAtEnd(float0);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall((-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F), (-1287.6682F));
      wall0.getRightSideColor();
      wall0.setLeftSideColor((Integer) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart((Wall) null);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Level level0 = new Level("RIGHT_SIDE_COLOR", 0.01F, 2928.2F, (-723.5422F));
      level0.setElevation(0.0F);
      wall0.setLevel(level0);
      Level level1 = wall0.getLevel();
      wall0.isAtLevel(level1);
      Integer integer0 = Integer.getInteger("K", 671);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall((-121.868F), (-127.53899F), (-121.868F), (-121.868F), (-127.53899F));
      wall0.setWallAtEnd(wall0);
      Level level0 = new Level("1}", (-127.53899F), (-127.53899F), (-127.53899F));
      Float float0 = new Float((-127.53899F));
      wall0.setArcExtent(float0);
      // Undeclared exception!
      try { 
        wall0.getPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(1373.0F, 1308.835F, 1373.0F, 1373.0F, (-0.13822445F), 638.56757F);
      Float float0 = new Float((double) (-0.13822445F));
      Float.min(1308.835F, 1.0F);
      wall0.setHeightAtEnd(float0);
      wall0.getLeftSideColor();
      wall0.containsWallStartAt((-2414.34F), 1.373384F, (-0.13822445F));
      wall0.getPoints();
      wall0.getHeight();
      wall0.getHeightAtEnd();
      Wall.Property.values();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      Wall.clone(list1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart((Wall) null);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Level level0 = new Level("RIGHT_SIDE_COLOR", 0.01F, 2928.2F, (-723.5422F));
      level0.setElevation(0.0F);
      Float.max(2928.2F, 0.01F);
      Float float0 = new Float(0.01F);
      wall0.setHeight(float0);
      Float.max(600.4025F, (-723.5422F));
      Float float1 = new Float((double) 600.4025F);
      Float float2 = wall0.getHeight();
      wall0.setHeight(float2);
      Wall wall1 = new Wall((-723.5422F), 600.4025F, (-1449.7435F), (-1883.5027F), (-1.0F), 0.01F);
      wall1.getLength();
      wall0.getStartPointToEndPointDistance();
      wall1.getYStart();
      wall0.setXEnd(4820.0F);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.0F, 0.01F, (-223.511F));
      wall0.setXStart(0.01F);
      wall0.move(0.0F, 0.0F);
      wall0.isTrapezoidal();
      Wall wall1 = new Wall(0.01F, 0.01F, 0.01F, (-223.511F), 0.01F);
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall(0.01F, 0.01F, 0.01F, 0.0F, 0.01F);
      wall0.setWallAtStart(wall2);
      wall0.move(2.0F, (-22.071114F));
      wall0.setRightSideColor((Integer) null);
      wall0.containsPoint(2863.8289F, 0.0F, 0.01F);
      wall0.getXStart();
      wall2.setWallAtStart(wall0);
      Integer integer0 = new Integer(33);
      wall1.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.0F, 0.01F, (-223.511F));
      wall0.setXStart(0.01F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.move(0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.01F, (-223.511F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall(0.0F, 0.0F, 0.01F, 0.0F, 0.01F);
      wall0.setWallAtStart(wall2);
      Wall.clone((List<Wall>) linkedList0);
      wall0.move(2.0F, (-7.462F));
      wall0.setRightSideColor((Integer) null);
      wall0.containsPoint(2863.8289F, 0.0F, 0.01F);
      wall0.getXStart();
      wall2.setWallAtStart(wall0);
      Integer integer0 = new Integer(33);
      wall1.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(30.585815F, 30.585815F, 30.585815F, 30.585815F, 30.585815F);
      Wall wall1 = new Wall(30.585815F, 30.585815F, (-2433.6294F), 1910.51F, 3.1415927F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall((-121.868F), (-1060.56F), (-121.868F), (-121.868F), (-1060.56F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      Level level0 = new Level("1}", 1002.00757F, (-121.868F), (-127.53899F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.clone();
      Level level1 = level0.clone();
      level0.setElevation((-1060.56F));
      wall0.setLevel(level1);
      wall0.setThickness((-127.53899F));
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall1.getLeftSideColor();
      wall0.setHeight((Float) null);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall((-601.2816F), (-601.2816F), (-601.2816F), (-601.2816F), (-305.4F), (-601.2816F));
      Float float0 = new Float((-533.495));
      Float.max((-0.13822445F), (-0.13822445F));
      Float.max((-305.4F), 1.0F);
      wall0.setHeight(float0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall((-221.1933F), (-6.4F), (-221.1933F), (-6.4F), (-6.4F));
      wall0.setXStart((-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.move(0.0F, (-1.0F));
      wall0.containsWallStartAt(1591.08F, (-336.3284F), 1591.08F);
      Wall wall1 = wall0.clone();
      Wall wall2 = new Wall(1591.08F, 0.0F, (-4298.7F), (-221.1933F), (-4298.7F), 2180.199F);
      wall2.setWallAtEnd(wall1);
      Wall wall3 = new Wall((-336.3284F), 0.0F, (-4298.7F), 1.0F, (-1.0F));
      wall0.setWallAtStart(wall1);
      Wall.clone((List<Wall>) linkedList0);
      wall3.move((-336.3284F), 2180.199F);
      wall0.setRightSideColor((Integer) null);
      wall3.containsPoint(2.0F, (-4298.7F), (-1.0F));
      wall3.getXStart();
      Wall wall4 = new Wall(1.0F, (-6.4F), (-6.4F), (-223.511F), (-1.0F), 1250.6622F);
      wall4.setWallAtStart(wall1);
      Integer integer0 = new Integer(33);
      wall1.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall(955.0F, 955.0F, 955.0F, 1.6057767F, 955.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setXEnd(1.6057767F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      wall0.intersectsRectangle((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall((-3004.2F), 0.0F, (-2033.0F), (-938.79F), 0.0F, 0.0F);
      Float float0 = new Float((-3004.2F));
      Float float1 = new Float(0.0F);
      wall0.setArcExtent(float1);
      wall0.containsPoint(509.89224F, 0.0F, 0.1F);
      wall0.containsWallStartAt((-1763.98F), 1161.7435F, (-2033.0F));
      Float.max((-1763.98F), (-1619.9862F));
      Float.max(129.2288F, 2.0F);
      Float float2 = new Float(197.4608424);
      wall0.setYEnd((-1437.91F));
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart((Wall) null);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Level level0 = new Level("RIGHT_SIDE_COLOR", 0.01F, 2928.2F, (-723.5422F));
      wall0.setLevel(level0);
      Level level1 = new Level("", 0.0F, 2928.2F, 0.0F);
      wall0.isAtLevel(level1);
      Integer integer0 = Integer.getInteger("8T", 2057);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall((-336.3284F), (-336.3284F), 0.0F, (-1.0F), 1.0F, (-2822.387F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      Wall wall2 = linkedList0.pop();
      Float float0 = new Float((-1.0F));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      wall0.setArcExtent(float0);
      wall0.getLevel();
      wall1.isAtLevel((Level) null);
      wall1.clone();
      wall1.getXEnd();
      linkedList0.add(wall2);
      Float float1 = new Float(2263.11058);
      wall0.setArcExtent(float0);
      wall2.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall((-6.741237F), 1.6057767F, (-723.5422F), (-723.5422F), (-1.0F), (-3838.9065F));
      wall0.getPoints();
      Wall wall1 = new Wall(1.0F, 1849.05F, (-6.741237F), (-6.741237F), (-723.5422F));
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      Wall wall2 = wall0.getWallAtStart();
      wall2.getPoints();
      wall2.getPoints();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      wall0.setThickness((-723.5422F));
      wall0.setArcExtent((Float) null);
      wall0.containsPoint((-1307.085F), (-723.5422F), (-2807.4F));
      wall0.containsWallStartAt(0.0F, 0.01F, (-1307.085F));
      Float.max(1.0F, 0.01F);
      Float.max(1.0F, 827.5F);
      Float float0 = new Float((-1904.4751036512));
      wall0.setYEnd(0.0F);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 5671.6094F, (-1640.1F), (-1640.1F), (-1640.1F));
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setYEnd((-1640.1F));
      Wall wall1 = wall0.clone();
      Float float0 = new Float((-336.3284F));
      Float float1 = new Float((-1727.6F));
      Float float2 = new Float((double) (-1727.6F));
      wall0.setHeightAtEnd(float2);
      wall0.setYStart(1578.7812F);
      wall0.clone();
      wall1.getXEnd();
      Float float3 = new Float(885.8613F);
      wall1.setArcExtent(float3);
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall((-121.868F), (-127.53899F), (-121.868F), (-121.868F), (-127.53899F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      Level level0 = new Level("1}", 1002.00757F, (-121.868F), (-127.53899F));
      level0.clone();
      level0.setElevation((-127.53899F));
      wall0.setThickness((-127.53899F));
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall(4.0F, (-127.53899F), 2689.97F, (-1.0F), 4.0F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      Level level0 = new Level("Z:/J.s+FT'x\u0001", 2.0F, 2689.97F, 4.0F);
      level0.setFloorThickness((-121.868F));
      Level level1 = level0.clone();
      level0.clone();
      wall0.setLevel(level1);
      wall0.setThickness((-2286.0F));
      wall1.setWallAtStart(wall0);
      wall0.getPoints();
      wall1.getLeftSideColor();
      wall1.containsWallStartAt(2409.1309F, 851.31824F, (-1151.3F));
      wall1.getHeight();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall((-1.5567586F), (-127.53899F), (-1.5567586F), (-1.5567586F), (-127.53899F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      Level level0 = new Level("1}", (-1.5567586F), 1.0F, (-1.5567586F));
      Level level1 = level0.clone();
      level1.setElevation(1002.00757F);
      wall0.setWallAtStart(wall1);
      wall1.containsWallStartAt((-1.5567586F), 1.0F, 0.1F);
      wall0.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 1.0F, 0.0F, 0.0F, 1180.1753F);
      Integer integer0 = new Integer(1526);
      wall0.setLeftSideColor(integer0);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall(667.0F, 667.0F, 667.0F, 667.0F, 1051.8364F);
      Integer integer0 = new Integer((-962));
      Integer.getInteger("n'+ze=mk", (Integer) null);
      Integer.compare(1264, 739);
      wall0.setRightSideColor((Integer) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("X_END", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      Object object0 = new Object();
      Object object1 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "HEIGHT", (Object) null, object1);
      propertyChangeListenerProxy1.propertyChange(propertyChangeEvent0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.getPattern();
      wall0.getRightSideColor();
      wall0.setRightSideShininess(0.1F);
      wall0.intersectsRectangle(667.0F, (-596.6257F), 1264, 1051.8364F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", resourceURLContent0, 955.0F, (-0.67417765F), "", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
      wall0.setLeftSideTexture(homeTexture0);
      wall0.getLeftSideTexture();
      Float float0 = new Float(0.0F);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall(955.0F, 955.0F, 955.0F, 1.6057767F, 955.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall((-723.32056F), (-723.32056F), (-723.32056F), (-723.32056F), (-723.32056F), (-723.32056F));
      Wall wall1 = new Wall((-1.0F), (-2816.2F), (-1.0F), 597.0F, (-723.32056F), (-4192.156F));
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float((-2920.12F));
      Wall wall2 = wall1.getWallAtEnd();
      wall2.setArcExtent(float0);
      wall2.containsWallStartAt(1.0F, (-4192.156F), (-1.0F));
      Float.max((-1625.229F), (-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall2);
      Float float1 = new Float((-1.0F));
      wall0.setArcExtent(float1);
      wall2.getXArcCircleCenter();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5dIqUJFM(5`_+ej");
      wall0.setWallAtStart((Wall) null);
      wall0.setWallAtStart((Wall) null);
      wall0.getPoints();
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(667.0F, 667.0F, 667.0F, 667.0F, 1051.8364F);
      Integer integer0 = new Integer((-962));
      Integer.getInteger("n'+ze=mk", integer0);
      Integer.compare((-962), (-1));
      wall0.setRightSideColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("", "", "", propertyChangeListenerProxy0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.getPattern();
      wall0.getRightSideColor();
      wall0.setRightSideShininess(1.0F);
      wall0.intersectsRectangle((-1), (-1553.541F), 1051.8364F, 402.9F);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart(wall0);
      wall0.setArcExtent((Float) null);
      wall0.containsWallStartAt(508.736F, 0.0F, 508.736F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.offerLast(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Wall.clone(list0);
      wall0.getYArcCircleCenter();
      Wall.Property.values();
      Wall wall1 = new Wall(1.0F, (-0.13822445F), (-4171.1274F), (-929.621F), 2390.1F, (-4171.1274F));
      wall1.setLeftSideShininess(0.0F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F), (-723.5422F));
      wall0.setWallAtStart((Wall) null);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Level level0 = new Level("RIGHT_SIDE_COLOR", 0.01F, 2928.2F, (-723.5422F));
      level0.setElevation(0.0F);
      wall0.setLevel(level0);
      Level level1 = new Level("", 0.0F, 2928.2F, 0.0F);
      wall0.isAtLevel(level1);
      Wall wall1 = wall0.clone();
      wall0.getXEnd();
      Float float0 = new Float((double) (-723.5422F));
      wall1.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(13.635184F, 13.635184F, 13.635184F, 13.635184F, 13.635184F);
      Float float0 = Float.valueOf(13.635184F);
      wall0.setArcExtent(float0);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setArcExtent((Float) null);
      wall0.setThickness(0.0F);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(439.981F, 439.981F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      wall0.intersectsRectangle((-0.67417765F), (-0.67417765F), (-0.67417765F), (-0.67417765F));
      wall0.getRightSideShininess();
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall((-723.5422F), 0.0F, (-2855.2837F), 639.5F, 2.0F, 0.0F);
      Wall wall1 = new Wall((-838.0F), 0.1F, 0.0F, 2.0F, (-693.1907F));
      wall0.setWallAtEnd(wall1);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getHeight();
      Float float0 = new Float(2618.975209715126);
      wall0.setHeight(float0);
      wall1.getRightSideTexture();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LID$");
      Wall wall1 = new Wall((-3786.0F), 1.0F, (-3786.0F), (-3786.0F), 1180.1753F);
      Integer integer0 = new Integer(1526);
      wall0.setLeftSideColor(integer0);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      wall1.getPoints();
      wall0.getPoints();
      wall1.getRightSideColor();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }
}
