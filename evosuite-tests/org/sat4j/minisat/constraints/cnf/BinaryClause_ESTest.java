/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:45:42 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryClause_ESTest extends BinaryClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      DotSearchTracing<MixedDataStructureDanielWL> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureDanielWL>("org.sat4j.minisat.constraints.cnf.CBClause");
      String string0 = learntBinaryClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("0[?] 16[?]", string0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      int[] intArray0 = new int[2];
      intArray0[1] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      boolean boolean0 = learntBinaryClause0.isSatisfied();
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 1476);
      IVecInt iVecInt0 = vecInt0.pop();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, iLits0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReasonOnTheFly(3, readOnlyVecInt0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1476
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2823);
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2823);
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.hashCode();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      LearntBinaryClause learntBinaryClause1 = new LearntBinaryClause(vecInt0, (ILits) null);
      assertTrue(learntBinaryClause1.equals((Object)learntBinaryClause0));
      
      learntBinaryClause1.head = 3;
      boolean boolean0 = learntBinaryClause0.equals(learntBinaryClause1);
      assertFalse(learntBinaryClause1.equals((Object)learntBinaryClause0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      boolean boolean0 = learntBinaryClause0.equals(learntBinaryClause0);
      assertTrue(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      int[] intArray1 = learntBinaryClause0.getLits();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertArrayEquals(new int[] {32, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 617;
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(1.0E100);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      SearchParams searchParams0 = new SearchParams(0.0, (-2823), (-1157.748166), (-565));
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ASolverFactory<Solver<MixedDataStructureDanielWL>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWL>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWL>>(aSolverFactory0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, subsetVarOrder0, arminRestarts0, basicLauncher0);
      learntBinaryClause0.assertConstraintIfNeeded(solver0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 617;
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(1.0E100);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      SearchParams searchParams0 = new SearchParams((-2823), 1.0E20, 0.0, (-2823));
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, subsetVarOrder0, eMARestarts0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 616
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.rescaleBy(0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      int int0 = learntBinaryClause0.get(1);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 617;
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      // Undeclared exception!
      try { 
        noLearningButHeuristics0.claBumpActivity(learntBinaryClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.AbstractLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.get((-846));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      boolean boolean0 = learntBinaryClause0.locked();
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2823);
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2824
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      learntBinaryClause0.head = (-786);
      // Undeclared exception!
      try { 
        learntBinaryClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -785
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.calcReasonOnTheFly(32, vecInt0, vecInt0);
      assertEquals(32, vecInt0.last());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      iLits0.satisfies(0);
      Constr constr0 = learntBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      Constr constr0 = learntBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      lits0.getFromPool(3);
      learntBinaryClause0.getVocabulary();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2823);
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      int int0 = learntBinaryClause0.getAssertionLevel(vecInt0, (-2823));
      assertEquals(0, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.incActivity(32);
      double double0 = learntBinaryClause0.getActivity();
      assertEquals(32.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.setActivity((-7224));
      double double0 = learntBinaryClause0.getActivity();
      assertEquals((-7224.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      int int0 = learntBinaryClause0.get(0);
      assertEquals(0, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      DotSearchTracing<MixedDataStructureDanielWL> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureDanielWL>("org.sat4j.core.EmptyVecInt$1");
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 1657);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      DotSearchTracing<MixedDataStructureDanielWL> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureDanielWL>("");
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1657
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2823);
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2823
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1083);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1083
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagate((UnitPropagationListener) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagate((UnitPropagationListener) null, (-2445));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2445
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, (-281));
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -141
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, (-1669));
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1670
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 1477);
      IVecInt iVecInt0 = vecInt0.pop();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReasonOnTheFly(1477, iVecInt0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReason(3, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, (-2043));
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReason(3, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2043
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, Integer.MAX_VALUE);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.calcReason(3, iVecInt0);
      assertEquals(2, vecInt0.size());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      double double0 = learntBinaryClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      String string0 = learntBinaryClause0.toString((VarMapper) null);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals("-1[?] -1[?]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      vecInt0.unsafePush(4076);
      int int0 = learntBinaryClause0.getAssertionLevel(iVecInt0, 3);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      cardinalityDataStructure0.createUnregisteredCardinalityConstraint(vecInt0, (-2823));
      int int0 = learntBinaryClause0.getAssertionLevel(vecInt0, 187);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      lits0.satisfies(3);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.isSatisfied();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      LearntBinaryClause learntBinaryClause1 = new LearntBinaryClause(vecInt0, (ILits) null);
      assertTrue(learntBinaryClause1.equals((Object)learntBinaryClause0));
      
      learntBinaryClause1.tail = 308;
      boolean boolean0 = learntBinaryClause0.equals(learntBinaryClause1);
      assertFalse(learntBinaryClause1.equals((Object)learntBinaryClause0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      LearntBinaryClause learntBinaryClause1 = new LearntBinaryClause(vecInt0, lits0);
      assertTrue(learntBinaryClause1.equals((Object)learntBinaryClause0));
      
      learntBinaryClause0.head = (-786);
      boolean boolean0 = learntBinaryClause1.equals(learntBinaryClause0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.equals(lits0);
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.equals((Object) null);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.simplify();
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      lits0.satisfies(3);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.simplify();
      assertTrue(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      LearntBinaryClause learntBinaryClause0 = null;
      try {
        learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      int int0 = learntBinaryClause0.size();
      assertEquals(2, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(3);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, arminRestarts0);
      learntBinaryClause0.assertConstraint(solver0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      learntBinaryClause0.getVocabulary();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      String string0 = learntBinaryClause0.toString();
      assertEquals("-1[?] -1[?]", string0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.canBeSatisfiedByCountingLiterals();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      int int0 = learntBinaryClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 285);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 284
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      IVecInt iVecInt0 = vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.rescaleBy(3);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      vecInt0.pop();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      Constr constr0 = originalBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }
}
