/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:27:36 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.encoding.Commander;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Commander_ESTest extends Commander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(2921);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0, checkMUSSolutionListener0);
      // Undeclared exception!
      try { 
        commander0.addExactly(abstractMinimalModel0, (IVecInt) null, 375);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Commander commander0 = new Commander();
      ISolver iSolver0 = null;
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        commander0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Commander commander0 = new Commander();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((ISolver) null).when(solutionCounter0).getSolvingEngine();
      doReturn(1, 0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      doReturn(1).when(solutionCounter0).realNumberOfVariables();
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      negationDecorator0.getSolvingEngine();
      negationDecorator0.realNumberOfVariables();
      VecInt vecInt0 = new VecInt(1, 0);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(negationDecorator0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Commander commander0 = new Commander();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMin0).getVocabulary();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMin1).getVocabulary();
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseCachingAutoEraseStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, tabuListDecorator0, fixedPeriodRestarts0);
      SearchParams searchParams0 = solver0.getSearchParams();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        solver1.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Commander commander0 = new Commander();
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[1];
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IVecInt) null).when(solutionCounter0).createBlockingClauseForCurrentModel();
      doReturn(false).when(solutionCounter0).isSatisfiable();
      solutionCounterArray0[0] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(true, solutionCounterArray0);
      manyCore0.setTimeoutOnConflicts(998);
      solutionCounter0.isSatisfiable();
      manyCore0.createBlockingClauseForCurrentModel();
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(manyCore0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Commander commander0 = new Commander();
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[1];
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(solutionCounter0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(false).when(solutionCounter0).isSatisfiable();
      solutionCounterArray0[0] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(true, solutionCounterArray0);
      manyCore0.setTimeoutOnConflicts(998);
      solutionCounter0.isSatisfiable();
      VecInt vecInt0 = new VecInt(998, 998);
      int[] intArray0 = new int[9];
      intArray0[0] = 998;
      intArray0[1] = 998;
      intArray0[2] = 998;
      intArray0[3] = 4052;
      intArray0[4] = 998;
      intArray0[5] = 998;
      intArray0[6] = 998;
      intArray0[7] = 998;
      intArray0[8] = 988;
      vecInt0.moveTo(998, intArray0);
      IConstr iConstr0 = commander0.addExactly(manyCore0, vecInt0, 998);
      assertEquals(2, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Commander commander0 = new Commander();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Commander commander0 = new Commander();
      // Undeclared exception!
      try { 
        commander0.addExactlyOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Commander commander0 = new Commander();
      ISolver iSolver0 = null;
      int[] intArray0 = new int[8];
      int int0 = 0;
      intArray0[0] = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[1] = 0;
      intArray0[2] = 512;
      intArray0[3] = (-3038);
      intArray0[4] = 0;
      intArray0[5] = (-433);
      VecInt vecInt0 = new VecInt(5);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        commander0.addExactly((ISolver) null, iVecInt0, (-857));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }
}
