/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 14:36:36 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCharStream_ESTest extends SimpleCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uh#QsB,-");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.GetImage();
      simpleCharStream0.BeginToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      simpleCharStream0.GetSuffix(0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(sequenceInputStream0, 0, 1);
      simpleCharStream1.ReInit((Reader) stringReader0, (-2500), 1);
      simpleCharStream0.ExpandBuff(true);
      // Undeclared exception!
      try { 
        simpleCharStream1.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = null;
      int int0 = 2476;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null, 2476, 2476);
      simpleCharStream0.line = 0;
      pipedInputStream0.markSupported();
      StringReader stringReader0 = new StringReader(">gz]l5E0pqg5ENy");
      simpleCharStream0.inBuf = 1;
      int int1 = 1337;
      stringReader0.markSupported();
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStream inputStream0 = null;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int int0 = 2880;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 2880, 2880, 2880);
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int int0 = 2932;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 2932, 2932, 2932);
      simpleCharStream0.getBeginLine();
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lC?tjo\"o?}5B!Xo");
      File file0 = MockFile.createTempFile("lC?tjo\"o?}5B!Xo", "lC?tjo\"o?}5B!Xo", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uh#QsB,-");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.readChar();
      simpleCharStream0.GetImage();
      simpleCharStream0.BeginToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-1424);
      simpleCharStream0.available = (-1424);
      simpleCharStream0.ExpandBuff(true);
      simpleCharStream0.getColumn();
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      int int0 = 276;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2141), (-2141), 276);
      simpleCharStream0.bufsize = 6134;
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(6134, (-2141));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 276
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-510), (-510), 0);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uh#QsB,-");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.readChar();
      simpleCharStream0.GetImage();
      simpleCharStream0.BeginToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleCharStream0.available = (-1424);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 1, 856);
      simpleCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = false;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      simpleCharStream0.setTabSize((-2863));
      simpleCharStream0.GetImage();
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-858), (-858));
      simpleCharStream0.prevCharIsLF = false;
      simpleCharStream0.ReInit((Reader) stringReader0);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.ExpandBuff(false);
      simpleCharStream0.getTabSize((-709));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-(KDQum$v0Jfu.W*>y`");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.ReInit((Reader) stringReader0, (-19), 6109, 2048);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-510), (-510), 0);
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix(4058);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w?A20LNs(7B");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "w?A20LNs(7B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      int int0 = (-2863);
      simpleCharStream0.setTabSize((-2863));
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 2880, 2880, 2880);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(dataInputStream0, (-1), 2048);
      StringReader stringReader0 = new StringReader("-1lhdK4dSiz6x+!b]");
      simpleCharStream1.ReInit((Reader) stringReader0, 2048, 321, 802);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0, 2880, (-1258), 2048);
      simpleCharStream2.FillBuff();
      SimpleCharStream simpleCharStream3 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream3.GetSuffix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uh#QsB,-");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.readChar();
      simpleCharStream0.GetImage();
      simpleCharStream0.BeginToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleCharStream0.available = (-1424);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      simpleCharStream0.setTabSize(4050);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.GetSuffix(0);
      simpleCharStream0.getEndColumn();
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn(1, (-1424));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~_X9^F%I");
      int int0 = (-2757);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), (-2757));
      int[] intArray0 = new int[0];
      simpleCharStream0.bufline = intArray0;
      simpleCharStream0.bufsize = (-2757);
      simpleCharStream0.backup((-1));
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n@Q6:X1~2a");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      simpleCharStream0.setTabSize(57);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.GetSuffix(57);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn(38, 1418);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q.X)6KVZ");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      simpleCharStream0.ReInit((InputStream) mockFileInputStream0, 0, 258, 4096);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-_");
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-510), (-510), 0);
      simpleCharStream0.setTabSize((-510));
      // Undeclared exception!
      try { 
        simpleCharStream0.getBeginLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "", 501, 1341, 2759);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, "", 4061, 1922);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = (-510);
      int int1 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-510), (-510), 0);
      int int2 = (-1);
      simpleCharStream0.ReInit((Reader) stringReader0, (-1), (-1), 0);
      simpleCharStream0.setTabSize(0);
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 2175, 3995);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 0, (byte)1);
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.GetSuffix(9);
      simpleCharStream0.getEndColumn();
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn(0, 0);
      simpleCharStream0.getLine();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n-%LvsvFqew#*p6(&B(");
      int int0 = 1120;
      int int1 = 1760;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(stringReader0, 1120, 1760, (-4446));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.getBeginLine();
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-1822));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uh#QsB,-");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 3462, 3462);
      simpleCharStream0.GetSuffix(3462);
      simpleCharStream0.ReInit((Reader) stringReader0, (-2179), 3462, 4051);
      simpleCharStream0.backup(0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, (-2179), (-266));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.setTabSize((-635));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byte byte0 = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte) (-44));
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      byteArrayInputStream0.read();
      boolean boolean0 = true;
      String string0 = "com.pmdesigns.jvc.tools.SimpleCharStream";
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "com.pmdesigns.jvc.tools.SimpleCharStream", 0, 212, 1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n@Q6:X1~2a");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      InputStream inputStream0 = null;
      simpleCharStream0.BeginToken();
      stringReader0.ready();
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-524), (-524), 0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      simpleCharStream0.bufcolumn = intArray0;
      simpleCharStream0.GetSuffix(0);
      simpleCharStream0.GetImage();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, (-2225), (-2225), (-2225));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.getTabSize(2627);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f<Y~'(Ie^IZl(}");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[0];
      byteArrayInputStream0.read(byteArray1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 2714, (-2023));
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup(531);
      simpleCharStream0.setTabSize((byte) (-1));
      simpleCharStream0.getBeginLine();
      char[] charArray0 = simpleCharStream0.buffer;
      simpleCharStream0.getEndColumn();
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn(252, (-1));
      simpleCharStream0.UpdateLineColumn('\u0000');
      simpleCharStream0.getEndLine();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.GetImage();
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InputStream inputStream0 = null;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int int0 = 2880;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 2880, 2880, 2880);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(dataInputStream0, (-1), 2048);
      StringReader stringReader0 = new StringReader("-1lhdK4dSiz6x+!b]");
      simpleCharStream1.ReInit((Reader) stringReader0, 2048, 321, 802);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0, 2880, (-1258), 2048);
      simpleCharStream2.readChar();
      simpleCharStream2.getLine();
      simpleCharStream0.getBeginLine();
      int int1 = 241;
      SimpleCharStream simpleCharStream3 = new SimpleCharStream(stringReader0, (-1), 0, 241);
      try { 
        simpleCharStream1.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-65);
      int int0 = 3805;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-88), 3805);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      simpleCharStream0.setTabSize((byte)0);
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w?A20LNs(7B");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader0, 153, 153, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 0, (byte)1);
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.GetSuffix(9);
      simpleCharStream0.getTabSize((byte)0);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.UpdateLineColumn('2');
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 0, (byte)1);
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize((byte)0);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.getColumn();
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uh#QsB,-");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.readChar();
      simpleCharStream0.GetImage();
      simpleCharStream0.BeginToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleCharStream0.available = (-1424);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      simpleCharStream0.GetSuffix(0);
      String string0 = "com.pmdesigns.jvc.tools.SimpleCharStream";
      try { 
        simpleCharStream0.ReInit((InputStream) sequenceInputStream0, "Uh#QsB,-", 243, 0, 0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InputStream inputStream0 = null;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "``L>S'dIP_04&x]SpK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 2930, 2930, 2930);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(dataInputStream0);
      simpleCharStream0.GetImage();
      // Undeclared exception!
      try { 
        simpleCharStream1.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 0, (byte)1);
      simpleCharStream0.Done();
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize((byte)0);
      // Undeclared exception!
      try { 
        simpleCharStream0.getBeginLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2141), (-2141), 276);
      simpleCharStream0.adjustBeginLineColumn(6134, (-2141));
      simpleCharStream0.ReInit((Reader) stringReader0, 4096, 276);
      simpleCharStream0.GetSuffix(276);
      simpleCharStream0.ExpandBuff(false);
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f<Y~'(Ie^IZl(}");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[0];
      byteArrayInputStream0.read(byteArray1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 2714, (-2023));
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup((-875));
      simpleCharStream0.setTabSize((byte) (-1));
      simpleCharStream0.getBeginLine();
      simpleCharStream0.GetSuffix(0);
      byteArrayInputStream0.close();
      simpleCharStream0.tabSize = (-2023);
      simpleCharStream0.BeginToken();
      simpleCharStream0.GetImage();
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 0, (byte)1);
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.GetSuffix(9);
      simpleCharStream0.getEndColumn();
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn(0, 0);
      simpleCharStream0.getEndColumn();
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-510), (-510), 0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      simpleCharStream0.bufcolumn = intArray0;
      simpleCharStream0.GetSuffix(0);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-510), (-510), 0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      simpleCharStream0.bufcolumn = intArray0;
      simpleCharStream0.GetSuffix(0);
      simpleCharStream0.prevCharIsLF = true;
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~_X9^F%I");
      int int0 = (-2757);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), (-2757));
      int[] intArray0 = new int[0];
      simpleCharStream0.bufline = intArray0;
      simpleCharStream0.bufsize = (-2757);
      stringReader0.read();
      simpleCharStream0.backup((-2757));
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n@Q6:X1~2a");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "n@Q6:X1~2a";
      StringReader stringReader0 = new StringReader("n@Q6:X1~2a");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n@Q6:X1~2a");
      simpleCharStream0.BeginToken();
      simpleCharStream0.setTabSize(57);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.GetSuffix(57);
      simpleCharStream0.getEndColumn();
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn(38, 1418);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-_");
      int int0 = (-510);
      int int1 = 0;
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-510), (-510), 0);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, (String) null, (-510), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f<Y~'(Ie^IZl(}");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[0];
      byteArrayInputStream0.read(byteArray1);
      int int0 = 2714;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 2714, (-2023));
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup((-875));
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "f<Y~'(Ie^IZl(}", (-2546), (-2546));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rd");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0, 1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 0, (-2926));
      simpleCharStream0.ExpandBuff(false);
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w?A20LNs(7B");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      int int0 = (-2863);
      simpleCharStream0.setTabSize((-2863));
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 2880, 2880, 2880);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(dataInputStream0, (-1), 2048);
      StringReader stringReader0 = new StringReader("-1lhdK4dSiz6x+!b]");
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0, (-1), 260);
      simpleCharStream1.ReInit((Reader) stringReader0);
      simpleCharStream1.getBeginColumn();
      simpleCharStream0.ExpandBuff(false);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f<Y~'(Ie^IZl(}");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[0];
      byteArrayInputStream0.read(byteArray1);
      int int0 = 2714;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 2714, (-2023));
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup((-875));
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-2023));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "", 2048, 0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n@Q6:X1~2a");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      InputStream inputStream0 = null;
      simpleCharStream0.BeginToken();
      int int0 = 3132;
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream((InputStream) null, 3810, 3810, 3132);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte)0);
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup((byte) (-1));
      simpleCharStream0.setTabSize(4075);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.GetSuffix((byte)1);
      simpleCharStream0.getEndColumn();
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-41);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte) (-44));
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      byteArrayInputStream0.read();
      boolean boolean0 = true;
      String string0 = "com.pmdesigns.jvc.tools.SimpleCharStream";
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "com.pmdesigns.jvc.tools.SimpleCharStream", 0, 212, 0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f<Y~'(Ie^IZl(}");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0);
      simpleCharStream0.setTabSize(532);
      simpleCharStream0.GetImage();
      simpleCharStream0.BeginToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      simpleCharStream0.GetSuffix(0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(sequenceInputStream0, 8, 1322);
      simpleCharStream1.ReInit((InputStream) sequenceInputStream0, (String) null, 1, 0, 648);
      StringReader stringReader1 = new StringReader("");
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(sequenceInputStream0);
      simpleCharStream1.GetImage();
      simpleCharStream2.ReInit((InputStream) sequenceInputStream0, 2656, (-1516));
      simpleCharStream1.getBeginLine();
      simpleCharStream2.ExpandBuff(false);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      InputStream inputStream0 = null;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 2880, 2880, 2880);
      int int0 = 321;
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(dataInputStream0, (-1), 2048);
      StringReader stringReader0 = new StringReader("-1lhdK4dSiz6x+!b]");
      simpleCharStream1.ReInit((Reader) stringReader0, 2048, 321, 802);
      StringReader stringReader1 = new StringReader("-1lhdK4dSiz6x+!b]");
      simpleCharStream1.ReInit((InputStream) dataInputStream0);
      SimpleCharStream simpleCharStream2 = null;
      try {
        simpleCharStream2 = new SimpleCharStream((InputStream) null, "-1lhdK4dSiz6x+!b]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/z$2tn?51TC#");
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(stringReader0, 4302, 4302, (-2893));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uh#QsB,-");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-22), (-22));
      simpleCharStream0.setTabSize((-22));
      simpleCharStream0.readChar();
      simpleCharStream0.GetImage();
      simpleCharStream0.BeginToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleCharStream0.available = (-1424);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      sequenceInputStream0.close();
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 1, 856);
      simpleCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";@LN0rv_1");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3362, (-516));
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader0, 1, (-758), (-2135));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lC?tjo\"o?}5B!Xo");
      File file0 = MockFile.createTempFile("lC?tjo\"o?}5B!Xo", "lC?tjo\"o?}5B!Xo", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, "", (-2340), (-2340), (-2340));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-510), (-510), 0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      simpleCharStream0.bufcolumn = intArray0;
      simpleCharStream0.GetSuffix(0);
      simpleCharStream0.backup(248);
      simpleCharStream0.ExpandBuff(false);
      simpleCharStream0.adjustBeginLineColumn(253, 0);
      simpleCharStream0.ExpandBuff(false);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -249
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      byteArrayInputStream1.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)1, (byte) (-1));
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup((byte)0);
      simpleCharStream0.setTabSize((byte) (-1));
      simpleCharStream0.getBeginLine();
      simpleCharStream0.GetSuffix((byte)1);
      simpleCharStream0.getEndColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+m.{?]c T");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.ExpandBuff(false);
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-41);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte) (-44));
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      byteArrayInputStream0.read();
      simpleCharStream0.setTabSize(2988);
      simpleCharStream0.GetImage();
      simpleCharStream0.BeginToken();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      simpleCharStream0.GetSuffix(1959);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(sequenceInputStream0, 4073, (byte) (-41));
      simpleCharStream1.GetImage();
      simpleCharStream0.ExpandBuff(false);
      simpleCharStream0.adjustBeginLineColumn((-2060), 8);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+m.{?]c T");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.ExpandBuff(false);
      int int0 = 5755;
      simpleCharStream0.adjustBeginLineColumn(int0, int0);
  }
}
