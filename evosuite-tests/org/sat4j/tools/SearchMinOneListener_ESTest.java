/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:08:02 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.Lbool;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.SearchMinOneListener;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SearchMinOneListener_ESTest extends SearchMinOneListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener((SolutionFoundListener) null);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[8];
      intArray0[1] = (-2419);
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, iSolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SearchMinOneListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(checkMUSSolutionListener0);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, noRestarts0);
      searchMinOneListener0.init(solver0);
      int[] intArray0 = new int[0];
      searchMinOneListener0.solutionFound(intArray0, solver0);
      assertEquals(1, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      int[] intArray0 = new int[4];
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder(0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, tabuListDecorator0, fixedPeriodRestarts0);
      searchMinOneListener0.init(solver0);
      intArray0[1] = 27;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, dimacsStringSolver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      Lbool lbool0 = Lbool.TRUE;
      // Undeclared exception!
      try { 
        searchMinOneListener0.end(lbool0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(checkMUSSolutionListener0);
      Lbool lbool0 = Lbool.FALSE;
      searchMinOneListener0.end(lbool0);
      assertEquals("F", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener((SolutionFoundListener) null);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[8];
      intArray0[0] = 3612;
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, iSolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SearchMinOneListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(checkMUSSolutionListener0);
      LightFactory lightFactory0 = new LightFactory();
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      searchMinOneListener0.init(solver0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, solver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cards with degree 1 are clauses!!!!
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }
}
