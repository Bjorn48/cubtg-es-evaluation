/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:58:17 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GroupClauseSelectorSolver_ESTest extends GroupClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = (-3159);
      VecInt vecInt0 = new VecInt(intArray0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt0).when(iSolver0).unsatExplanation();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = groupClauseSelectorSolver0.unsatExplanation();
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = (ManyCore<ModelIteratorToSATAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(manyCore0).modelWithInternalVariables();
      GroupClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>>(manyCore0);
      int[] intArray1 = groupClauseSelectorSolver0.model();
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver1 = lightFactory0.lightSolver();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(iSolver1);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(singleSolutionDetector0);
      Integer integer0 = groupClauseSelectorSolver0.getGroupVar(iVecInt0, 46);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(1385).when(iSolver0).nextFreeVarId(anyBoolean());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver1 = lightFactory0.lightSolver();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(iSolver1);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(singleSolutionDetector0);
      Integer integer0 = groupClauseSelectorSolver0.getGroupVar(iVecInt0, 46);
      assertEquals(1385, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(iSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(singleSolutionDetector0);
      IConstr iConstr0 = groupClauseSelectorSolver0.addNonControlableClause(iVecInt0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(learntWLClause0).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt1 = VecInt.EMPTY;
      LearntWLClause learntWLClause1 = (LearntWLClause)groupClauseSelectorSolver0.addControlableClause(iVecInt1, 0);
      assertFalse(learntWLClause1.simplify());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelIterator[] modelIteratorArray0 = new ModelIterator[4];
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(modelIterator0).addClause(any(org.sat4j.specs.IVecInt.class));
      modelIteratorArray0[0] = modelIterator0;
      modelIteratorArray0[1] = modelIterator0;
      modelIteratorArray0[2] = modelIterator0;
      modelIteratorArray0[3] = modelIterator0;
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(false, modelIteratorArray0);
      ModelIterator modelIterator1 = new ModelIterator(manyCore0);
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIterator1);
      groupClauseSelectorSolver0.addClause((IVecInt) null, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(printWriter0);
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = new LexicoDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>((LexicoDecorator<DimacsOutputSolver>) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(modelIteratorToSATAdapterArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0, true);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>((ModelIteratorToSATAdapter) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(aSolverFactory0, false, stringArray0);
      GroupClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>>(manyCore0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.getGroupVar(vecInt0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GateTranslator>(gateTranslator0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.getGroupVar(vecInt0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver1 = lightFactory0.lightSolver();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(iSolver1);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(singleSolutionDetector0);
      Integer integer0 = new Integer((-4169));
      IVecInt iVecInt1 = iVecInt0.push((int) integer0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.getGroupVar(iVecInt1, 46);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4InclusionModel>((Minimal4InclusionModel) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addNonControlableClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause((IVecInt) null, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ManyCore<GateTranslator> manyCore0 = (ManyCore<GateTranslator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(manyCore0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<ManyCore<GateTranslator>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ManyCore<GateTranslator>>(manyCore0);
      int[] intArray0 = new int[7];
      intArray0[1] = (-1819);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause(vecInt0, (-702));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>((ModelIterator) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause((IVecInt) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      VecInt vecInt0 = new VecInt(intArray0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt0).when(iSolver0).unsatExplanation();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = groupClauseSelectorSolver0.unsatExplanation();
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(iSolver0).modelWithInternalVariables();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      int[] intArray0 = groupClauseSelectorSolver0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-702);
      intArray0[1] = 43;
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = (ManyCore<ModelIteratorToSATAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(manyCore0).modelWithInternalVariables();
      GroupClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>>(manyCore0);
      groupClauseSelectorSolver0.model();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((-171), 2, 2, 3257, 0).when(optToSatAdapter0).nVars();
      doReturn(1327, 0).when(optToSatAdapter0).nextFreeVarId(anyBoolean());
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, (EncodingStrategyAdapter) null);
      clausalCardinalitiesDecorator0.nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(clausalCardinalitiesDecorator0);
      SolutionCounter solutionCounter0 = new SolutionCounter(clausalCardinalitiesDecorator0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver1.addControlableClause(iVecInt0, (-702));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(groupClauseSelectorSolver0, solutionFoundListener0);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<AbstractMinimalModel>(abstractMinimalModel0);
      Collection<Integer> collection0 = groupClauseSelectorSolver1.getAddedVars();
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>((ModelIteratorToSATAdapter) null);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = (ManyCore<ModelIteratorToSATAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(manyCore0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(manyCore0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>>(manyCore0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(groupClauseSelectorSolver0, true);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver1.addNonControlableClause(vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      groupClauseSelectorSolver0.addClause((IVecInt) vecInt0, 7);
      assertEquals(1, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(3, vecInt0.size());
  }
}
