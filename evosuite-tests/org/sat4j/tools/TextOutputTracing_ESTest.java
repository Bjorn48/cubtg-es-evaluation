/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:23:45 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolverService;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.RandomAccessModel;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.TextOutputTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextOutputTracing_ESTest extends TextOutputTracing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      hashMap0.put((Integer) 1, "Trivial inconsistency");
      textOutputTracing0.assuming((-1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "");
      textOutputTracing0.assuming(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      BiFunction<Integer, Object, MixedDataStructureSingleWL> biFunction0 = (BiFunction<Integer, Object, MixedDataStructureSingleWL>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(mixedDataStructureSingleWL0).when(biFunction0).apply(anyInt() , any());
      hashMap0.compute((Integer) 102, biFunction0);
      textOutputTracing0.assuming(102);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>((Map<Integer, Integer>) null);
      textOutputTracing0.assuming(5917);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GroupClauseSelectorSolver<Solver<MixedDataStructureSingleWL>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Solver<MixedDataStructureSingleWL>>((Solver<MixedDataStructureSingleWL>) null);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(map0);
      textOutputTracing0.learnUnit((-674));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      TextOutputTracing<MixedDataStructureSingleWL> textOutputTracing0 = new TextOutputTracing<MixedDataStructureSingleWL>(hashMap0);
      textOutputTracing0.delete((IConstr) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.restarting();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(hashMap0);
      Lbool lbool0 = Lbool.UNDEFINED;
      textOutputTracing0.end(lbool0);
      assertEquals("U", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.backtracking(281);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      int[] intArray0 = new int[4];
      textOutputTracing0.solutionFound(intArray0, (RandomAccessModel) null);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.enqueueing(16, (IConstr) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(hashMap0);
      textOutputTracing0.init((ISolverService) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.conflictFound(0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.start();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.beginLoop();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.conflictFound((IConstr) null, 0, (-177));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Solver<MixedDataStructureSingleWL>> hashMap0 = new HashMap<Integer, Solver<MixedDataStructureSingleWL>>();
      TextOutputTracing<Solver<MixedDataStructureSingleWL>> textOutputTracing0 = new TextOutputTracing<Solver<MixedDataStructureSingleWL>>(hashMap0);
      textOutputTracing0.learn((IConstr) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.cleaning();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      TextOutputTracing<MixedDataStructureSingleWL> textOutputTracing0 = new TextOutputTracing<MixedDataStructureSingleWL>(hashMap0);
      textOutputTracing0.adding(1009);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      TextOutputTracing<MixedDataStructureSingleWL> textOutputTracing0 = new TextOutputTracing<MixedDataStructureSingleWL>(hashMap0);
      textOutputTracing0.backjump(591);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.propagating(2);
  }
}
