/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:26:58 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.Binomial;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Policy;
import org.sat4j.tools.encoding.Sequential;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClausalCardinalitiesDecorator_ESTest extends ClausalCardinalitiesDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      String string0 = clausalCardinalitiesDecorator0.toString((String) null);
      assertEquals("Dimacs output solver\nCardinality to SAT encoding: \nEncoding: Policy = [At most K: Native, at most 1: Native, exactly K: Native, exactly 1: Native]\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsOutputSolver0, solutionFoundListener0);
      ClausalCardinalitiesDecorator<ModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIterator>(modelIteratorToSATAdapter0, (EncodingStrategyAdapter) null);
      String string0 = clausalCardinalitiesDecorator0.toString();
      assertEquals("Dimacs output solver\nCardinality to SAT encoding: \nEncoding: null\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Policy policy0 = new Policy();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, policy0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(clausalCardinalitiesDecorator0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsOutputSolver0, checkMUSSolutionListener0);
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator1 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      IConstr iConstr0 = clausalCardinalitiesDecorator1.addExactly(iVecInt0, 0);
      assertEquals(2, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Policy policy0 = new Policy();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ClausalCardinalitiesDecorator<StatisticsSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<StatisticsSolver>(statisticsSolver0, policy0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator1 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(clausalCardinalitiesDecorator0);
      IConstr iConstr0 = clausalCardinalitiesDecorator1.addAtMost(iVecInt0, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(0);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(0, 0);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, lubyRestarts0, iLogAble0);
      ClausalCardinalitiesDecorator<Solver<MixedDataStructureDanielWL>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Solver<MixedDataStructureDanielWL>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      UnitClauses unitClauses0 = (UnitClauses)clausalCardinalitiesDecorator0.addAtMost(iVecInt0, 0);
      assertTrue(unitClauses0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(1161);
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, arminRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      try { 
        clausalCardinalitiesDecorator0.addExactly(iVecInt0, 537);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>((OptToSatAdapter) null);
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<LexicoDecorator<OptToSatAdapter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<OptToSatAdapter>>(lexicoDecorator0, binomial0);
      VecInt vecInt0 = new VecInt(2014, 0);
      // Undeclared exception!
      clausalCardinalitiesDecorator0.addExactly(vecInt0, (-1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ModelIterator modelIterator0 = new ModelIterator(statisticsSolver0);
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(modelIterator0, 4894L, checkMUSSolutionListener0);
      LexicoDecorator<ModelIterator> lexicoDecorator0 = new LexicoDecorator<ModelIterator>(modelIteratorToSATAdapter0);
      ClausalCardinalitiesDecorator<LexicoDecorator<ModelIterator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<ModelIterator>>(lexicoDecorator0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly(iVecInt0, (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>((OptToSatAdapter) null);
      Policy policy0 = new Policy();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<LexicoDecorator<OptToSatAdapter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<OptToSatAdapter>>(lexicoDecorator0, binomial0);
      int int0 = 2014;
      VecInt vecInt0 = new VecInt(2014, 0);
      // Undeclared exception!
      clausalCardinalitiesDecorator0.addExactly(vecInt0, (-1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>((OptToSatAdapter) null);
      ClausalCardinalitiesDecorator<LexicoDecorator<OptToSatAdapter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<OptToSatAdapter>>(lexicoDecorator0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly(vecInt0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<LexicoDecorator<ModelIterator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<ModelIterator>>((LexicoDecorator<ModelIterator>) null, binary0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly(vecInt0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder0, eMARestarts0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GateTranslator>(gateTranslator0);
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly(vecInt0, 1528);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(32);
      dimacsStringSolver0.newVar(32);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, checkMUSSolutionListener0);
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, sequential0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly(iVecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<LexicoDecorator<AbstractMinimalModel>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<AbstractMinimalModel>>((LexicoDecorator<AbstractMinimalModel>) null, binary0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(vecInt0, (-5326));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Policy policy0 = new Policy();
      dimacsStringSolver0.newVar(976);
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, policy0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
      // Undeclared exception!
      clausalCardinalitiesDecorator0.addAtLeast(iVecInt0, 1602);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, binary0);
      ClausalCardinalitiesDecorator<ClausalCardinalitiesDecorator<DimacsStringSolver>> clausalCardinalitiesDecorator1 = new ClausalCardinalitiesDecorator<ClausalCardinalitiesDecorator<DimacsStringSolver>>(clausalCardinalitiesDecorator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator1.addAtLeast(iVecInt0, 469);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Binary binary0 = new Binary();
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, pureOrder0, fixedPeriodRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ClausalCardinalitiesDecorator<StatisticsSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<StatisticsSolver>(statisticsSolver0, binary0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast(iVecInt0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      dimacsStringSolver0.newVar(1197);
      Sequential sequential0 = new Sequential();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, sequential0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(minimal4InclusionModel0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast(iVecInt0, 1197);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      ClausalCardinalitiesDecorator<LexicoDecorator<AbstractMinimalModel>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<AbstractMinimalModel>>((LexicoDecorator<AbstractMinimalModel>) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(vecInt0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Policy policy0 = new Policy();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, policy0);
      GateTranslator gateTranslator0 = new GateTranslator(clausalCardinalitiesDecorator0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(gateTranslator0);
      IConstr iConstr0 = policy0.addExactlyOne(gateTranslator0, iVecInt0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>((Minimal4InclusionModel) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(vecInt0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Policy policy0 = new Policy();
      policy0.getAtLeastKEncoding();
      policy0.setAtMostOneEncoding((EncodingStrategyAdapter) null);
      dimacsStringSolver0.newVar(0);
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(clausalCardinalitiesDecorator0);
      clausalCardinalitiesDecorator0.addAtLeast(iVecInt0, 0);
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[8];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      dimacsOutputSolverArray0[2] = dimacsOutputSolver0;
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsOutputSolver0, checkMUSSolutionListener0);
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator1 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      clausalCardinalitiesDecorator1.addExactly(iVecInt0, 0);
      DimacsOutputSolver dimacsOutputSolver1 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver1, true);
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<DimacsOutputSolver>> clausalCardinalitiesDecorator2 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<DimacsOutputSolver>>(fullClauseSelectorSolver0, (EncodingStrategyAdapter) null);
      clausalCardinalitiesDecorator2.nConstraints();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(clausalCardinalitiesDecorator0, iVecInt0);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minimal4CardinalityModel0, (ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "variable occurrences (min/max/avg) ";
      stringArray0[2] = ">)](*E7!su=pxM";
      stringArray0[3] = "";
      ManyCore<AbstractMinimalModel> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<AbstractMinimalModel>(aSolverFactory0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Policy policy0 = new Policy();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, policy0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(clausalCardinalitiesDecorator0);
      clausalCardinalitiesDecorator0.addAtLeast(iVecInt0, 1);
      assertEquals(1, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>((MaxSatDecorator) null);
      ClausalCardinalitiesDecorator<ClausalCardinalitiesDecorator<MaxSatDecorator>> clausalCardinalitiesDecorator1 = new ClausalCardinalitiesDecorator<ClausalCardinalitiesDecorator<MaxSatDecorator>>(clausalCardinalitiesDecorator0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator1.addAtLeast((IVecInt) null, 2823);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>((SolutionCounter) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.toString("{b_(DOr9a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>((MinOneDecorator) null, sequential0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
