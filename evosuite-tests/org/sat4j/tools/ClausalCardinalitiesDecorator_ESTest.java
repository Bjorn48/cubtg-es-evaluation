/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:06:48 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Ladder;
import org.sat4j.tools.encoding.Sequential;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClausalCardinalitiesDecorator_ESTest extends ClausalCardinalitiesDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(iSolver0).addExactly(any(org.sat4j.specs.IVecInt.class) , anyInt());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      ClausalCardinalitiesDecorator<ModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIterator>(modelIterator0);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addExactly((IVecInt) null, (-1092));
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[12];
      String[] stringArray0 = new String[2];
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[3];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0, vecInt0, solutionFoundListener0);
      minimal4InclusionModelArray0[0] = minimal4InclusionModel0;
      minimal4InclusionModelArray0[1] = minimal4InclusionModel0;
      minimal4InclusionModelArray0[2] = minimal4InclusionModelArray0[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(stringArray0, minimal4InclusionModelArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0, false);
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addExactly(vecInt0, (-2020));
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addAtMost(iVecInt0, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt();
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addAtLeast(vecInt0, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = mock(IPhaseSelectionStrategy.class, new ViolatedAssumptionAnswer());
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(iPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, miniSATRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addAtLeast(iVecInt0, 0);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClausalCardinalitiesDecorator<SingleSolutionDetector> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SingleSolutionDetector>((SingleSolutionDetector) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.toString("Om&G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GateTranslator>((GateTranslator) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(657);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(dimacsStringSolver0);
      ClausalCardinalitiesDecorator<SingleSolutionDetector> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly((IVecInt) null, 657);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 657
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      VecInt vecInt0 = new VecInt(45, Integer.MIN_VALUE);
      SubModelIterator subModelIterator0 = new SubModelIterator(maxSatDecorator0, vecInt0);
      GateTranslator gateTranslator0 = new GateTranslator(subModelIterator0);
      LexicoDecorator<GateTranslator> lexicoDecorator0 = new LexicoDecorator<GateTranslator>(gateTranslator0);
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<LexicoDecorator<GateTranslator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<GateTranslator>>(lexicoDecorator0, binary0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly(vecInt0, 73);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      Ladder ladder0 = new Ladder();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0, ladder0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(maxSatDecorator0);
      try { 
        clausalCardinalitiesDecorator0.addAtMost(iVecInt0, (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(vecInt0, (-1092));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, true);
      Sequential sequential0 = new Sequential();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0, sequential0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(vecInt0, (-1016));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = mock(IPhaseSelectionStrategy.class, new ViolatedAssumptionAnswer());
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(iPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, miniSATRestarts0);
      ClausalCardinalitiesDecorator<Solver<CardinalityDataStructureYanMin>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Solver<CardinalityDataStructureYanMin>>(solver0);
      String string0 = clausalCardinalitiesDecorator0.toString("Got one! Elapsed wall clock time (in seconds):");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, true);
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly((IVecInt) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, iVecInt0);
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      try { 
        clausalCardinalitiesDecorator0.addExactly(iVecInt0, 1510);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost((IVecInt) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<MaxSatDecorator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<MaxSatDecorator>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast((IVecInt) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.FullClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<MaxSatDecorator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<MaxSatDecorator>>(fullClauseSelectorSolver0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast(vecInt0, 52);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ManyCore<SubModelIterator> manyCore0 = (ManyCore<SubModelIterator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn("qI|}H?#TFhnxOP(eNq").when(manyCore0).toString(anyString());
      ClausalCardinalitiesDecorator<ManyCore<SubModelIterator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ManyCore<SubModelIterator>>(manyCore0, (EncodingStrategyAdapter) null);
      String string0 = clausalCardinalitiesDecorator0.toString();
      assertEquals("qI|}H?#TFhnxOP(eNq\nCardinality to SAT encoding: \nEncoding: null\n", string0);
  }
}
