/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 16:00:51 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicLauncher_ESTest extends BasicLauncher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<DimacsStringSolver> basicLauncher0 = new BasicLauncher<DimacsStringSolver>(aSolverFactory0);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "c ";
      String string0 = basicLauncher0.getInstanceName(stringArray0);
      assertEquals("c ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = "";
      ASolverFactory<GroupClauseSelectorSolver<ModelIterator>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<ModelIterator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GroupClauseSelectorSolver<ModelIterator>> basicLauncher0 = new BasicLauncher<GroupClauseSelectorSolver<ModelIterator>>(aSolverFactory0);
      String string0 = basicLauncher0.getInstanceName(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<StatisticsSolver> basicLauncher0 = new BasicLauncher<StatisticsSolver>(aSolverFactory0);
      Reader reader0 = basicLauncher0.createReader(gateTranslator0, "org.sat4j.BasicLauncher");
      assertFalse(reader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(gateTranslator0).when(aSolverFactory0).defaultSolver();
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      basicLauncher0.configureSolver(stringArray0);
      assertEquals(Integer.MAX_VALUE, iSolver0.getTimeout());
      assertTrue(iSolver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASolverFactory<ManyCore<AbstractMinimalModel>> aSolverFactory0 = (ASolverFactory<ManyCore<AbstractMinimalModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ManyCore<AbstractMinimalModel>> basicLauncher0 = new BasicLauncher<ManyCore<AbstractMinimalModel>>(aSolverFactory0);
      // Undeclared exception!
      try { 
        basicLauncher0.getInstanceName((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      BasicLauncher<MinOneDecorator> basicLauncher0 = new BasicLauncher<MinOneDecorator>(aSolverFactory0);
      // Undeclared exception!
      try { 
        basicLauncher0.configureSolver(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<StatisticsSolver> basicLauncher0 = new BasicLauncher<StatisticsSolver>(aSolverFactory0);
      basicLauncher0.usage();
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SolutionCounter> basicLauncher0 = new BasicLauncher<SolutionCounter>(aSolverFactory0);
      String string0 = basicLauncher0.getInstanceName(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        BasicLauncher.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      BasicLauncher.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      BasicLauncher.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        BasicLauncher.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
