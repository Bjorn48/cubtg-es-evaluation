/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 08:49:14 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Sector;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.AreaStatistic;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import de.outstare.fortbattleplayer.statistics.CriticalHit;
import de.outstare.fortbattleplayer.statistics.LabeledData;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import de.outstare.fortbattleplayer.statistics.RoundStatistics;
import de.outstare.fortbattleplayer.statistics.WeaponModCounter;
import java.awt.Point;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BattleStatistics_ESTest extends BattleStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1340), 1791);
      battleStatistics0.setRound(57);
      battleStatistics0.setRound(1682);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getNotShootersPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 0, 0, false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2718, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 50, "otc4+ 9xH/BxcNlv", characterClass0, simpleWeapon0, ">'jbmoPTbI~x#3(m_");
      battleStatistics0.criticalShot(simpleCombatant0, simpleCombatant1, 50);
      assertEquals(CombatantSide.ATTACKER, simpleCombatant1.getSide());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(16716049, 16716049);
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      SimpleArea simpleArea0 = new SimpleArea(16716049, 2979, sector0);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "PAUSE", 0, 1616);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1496, "PAUSE", characterClass0, simpleWeapon0, "PAUSE");
      // Undeclared exception!
      try { 
        battleStatistics0.hasSwappedPosition(simpleCombatant0, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2719, 2719);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), false, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-4), "3X;`w", characterClass0, simpleWeapon0, (String) null);
      // Undeclared exception!
      try { 
        battleStatistics0.aimsAt(simpleCombatant0, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, true, 0, 0, true, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2718, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      simpleCombatant0.addObserver(battleStatistics0);
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2719, 2719);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), false, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "~s9;[P5G6h7+?V!", characterClass0, simpleWeapon0, "PAUSE");
      battleStatistics0.hasMoved(simpleCombatant0, simpleArea0);
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(3.677822728944465E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(975, 975);
      Hashtable<CombatantSide, AtomicInteger> hashtable0 = new Hashtable<CombatantSide, AtomicInteger>();
      HashMap<CombatantSide, RoundStatistics> hashMap0 = new HashMap<CombatantSide, RoundStatistics>();
      battleStatistics0.addAndResetRoundCounter(hashtable0, hashMap0);
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1912, (-2088));
      battleStatistics0.isDead((Combatant) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 0, 0, false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2718, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.hasSwappedPosition(simpleCombatant0, simpleCombatant0);
      int int0 = battleStatistics0.totalSwaps(combatantSide0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      int int0 = battleStatistics0.round(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3144), 16716049);
      int int0 = battleStatistics0.round(16716049);
      assertEquals(16716049, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(75, (-1));
      int int0 = battleStatistics0.round((-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2719, 2719);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), false, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "~s9;[P5G6h7+?V!", characterClass0, simpleWeapon0, "PAUSE");
      battleStatistics0.hasMoved(simpleCombatant0, simpleArea0);
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(3.677822728944465E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2719, 2719);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), false, false, 0, (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "3X;`w", characterClass0, simpleWeapon0, (String) null);
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      WeaponModCounter.GraphitLubricantCounter weaponModCounter_GraphitLubricantCounter0 = new WeaponModCounter.GraphitLubricantCounter();
      int int0 = battleStatistics0.countWeaponMods(combatantSide0, weaponModCounter_GraphitLubricantCounter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-2160), (-2160));
      int int0 = battleStatistics0.combatantLifetime((Combatant) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(1, false, true, 1, (-868), false, (-868), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, 1, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "", 1, 2);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.combatantLifetime(simpleCombatant0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 0, 0, false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2718, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      simpleCombatant0.addObserver(battleStatistics0);
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals((-1755), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point(2718, 2718);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 2718, 2718, false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2718, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2718, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "?\"sz+mHz\"-=HQ");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(963, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2718, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "?\"sz+mHz\"-=HQ");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals((-1759), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-2160), (-2160));
      // Undeclared exception!
      try { 
        battleStatistics0.isOnline((Combatant) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(16716049, 16716049);
      // Undeclared exception!
      try { 
        battleStatistics0.isHit((Combatant) null, 2979, 2979);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1044, 1044);
      // Undeclared exception!
      try { 
        battleStatistics0.hasMoved((Combatant) null, (Area) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(3, 3);
      // Undeclared exception!
      try { 
        battleStatistics0.criticalShot((Combatant) null, (Combatant) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.CriticalHit", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(40, 40);
      Hashtable<CombatantSide, RoundStatistics> hashtable0 = new Hashtable<CombatantSide, RoundStatistics>();
      // Undeclared exception!
      try { 
        battleStatistics0.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      List<CriticalHit> list0 = battleStatistics0.critList((CombatantSide) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(40, 40);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      List<CriticalHit> list0 = battleStatistics0.critList(combatantSide0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point(2, 2);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 2, 2, false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "PAUSE", 2, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      battleStatistics0.criticalShot(simpleCombatant0, simpleCombatant0, 2);
      assertEquals(CombatantSide.ATTACKER, simpleCombatant0.getSide());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1171, 20);
      battleStatistics0.setRound(20);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, 0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 4, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(4, "8", 20, 50);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1, "8", characterClass0, simpleWeapon0, "8");
      battleStatistics0.isOnline(simpleCombatant0, false);
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1171, 20);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-2160), (-2160));
      long long0 = battleStatistics0.criticalHitDamage((CombatantSide) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2721, 2721);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList(combatantSide0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2721, 2721);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Integer integer0 = new Integer(2721);
      Point point0 = new Point(0, 2721);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 0, 0, true, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2721, "ASE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.hasSwappedPosition(simpleCombatant0, simpleCombatant0);
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList(combatantSide0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2719, 2719);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), false, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1063, "", characterClass0, simpleWeapon0, "6CQ|a'");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfHipFlasks(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2721, 2721);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Integer integer0 = new Integer(2721);
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 0, 0, true, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2721, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      simpleCombatant0.addObserver(battleStatistics0);
      int int0 = battleStatistics0.numberOfShinyOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, true, 0, 0, true, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2718, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2718, "PAUSE", characterClass0, simpleWeapon0, "PAUSE");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      String string0 = battleStatistics0.targetNoOne(combatantSide1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2718, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "?\"sz+mHz\"-=HQ");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      String string0 = battleStatistics0.targetNoOne(combatantSide0);
      assertEquals(">'jbmoPTbI~x#3(m_(1)", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), false, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-4), ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.isOnline(simpleCombatant0, false);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2721, 2721);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Integer integer0 = new Integer(2721);
      Point point0 = new Point(0, 2721);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 0, 0, true, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2721, "ASE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, true, 0, 0, true, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2718, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.isOnline(simpleCombatant0, true);
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.roundsTillOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, true, 0, 0, true, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2718, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-4), ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), false, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-4), ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Integer integer0 = new Integer(2718);
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), false, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-4), ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2721, 2721);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Integer integer0 = new Integer(2721);
      Point point0 = new Point(0, 2721);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 0, 0, true, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2721, "ASE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1171, 20);
      battleStatistics0.setRound(20);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Integer integer0 = new Integer(1171);
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((int) integer0, true, false, (int) integer0, (int) integer0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1, 0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 4, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(4, "8", 20, 50);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1, "8", characterClass0, simpleWeapon0, "8");
      battleStatistics0.isOnline(simpleCombatant0, false);
      battleStatistics0.setRound((-3745));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1340), 1791);
      battleStatistics0.setRound(3000);
      battleStatistics0.setRound(57);
      battleStatistics0.setRound(1682);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1171, 20);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getShotsPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2721, 2721);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Integer integer0 = new Integer(2721);
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 0, 0, true, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2721, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1912, (-2088));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.criticalHits(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1912, (-2088));
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getHitsPerRound();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "x0^b>m]", 1, 13);
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, 2301, area0, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1), "de.outstare.fortbattleplayer.statistics.RoundStatistics", characterClass0, simpleWeapon0, "-!-`\"T:05F)");
      battleStatistics0.isAlive(simpleCombatant0);
      assertEquals("-!-`\"T:05F)", simpleCombatant0.getCity());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfSchmierOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfFettesOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1171, 20);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.totalSwaps(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1171, 20);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfGraphitLubricants(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2718, 2718);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2721, 2721);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Integer integer0 = new Integer(2721);
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1755), true, false, 0, 0, true, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2721, "PAUSE", 0, (int) integer0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      simpleCombatant0.addObserver(battleStatistics0);
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide0);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(708, 708);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2719, 2719);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point((-4), (-4));
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector((-1755), false, false, (-4), (-4), false, (-1755), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-4), "PASE", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-4), ">'jbmoPTbI~x#3(m_", characterClass0, simpleWeapon0, "otc4+ 9xH/BxcNlv");
      battleStatistics0.isHit(simpleCombatant0, 2274, 724);
      assertEquals((-4), simpleCombatant0._getMaxLP());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(75, (-1));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, 2, area0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1), "", characterClass0, (Weapon) null, "");
      SimpleSector simpleSector0 = new SimpleSector((-1758), true, false, (-1758), (-1758), true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(75, 175, simpleSector0);
      battleStatistics0.newDestination(simpleCombatant0, simpleArea0);
      assertEquals((-1), simpleCombatant0._getMaxLP());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2721, 2721);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfBayonets(combatantSide0);
      assertEquals(0, int0);
  }
}
