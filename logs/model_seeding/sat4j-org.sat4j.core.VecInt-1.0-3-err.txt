[MASTER] 01:51:49.429 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 01:55:59.370 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_45_1550364959338/org/sat4j/core/VecInt_45_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_45_1550364959338/org/sat4j/core/VecInt_45_tmp__ESTest_scaffolding.java]]
[MASTER] 01:55:59.371 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 01:55:59.371 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 01:55:59.375 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 67
[MASTER] 01:55:59.376 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 80
[MASTER] 01:55:59.381 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_45_1550364959338/org/sat4j/core/VecInt_45_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sun Feb 17 00:55:59 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import org.evosuite.runtime.EvoRunner;
11: import org.evosuite.runtime.EvoRunnerParameters;
12: import org.junit.runner.RunWith;
13: import org.sat4j.core.VecInt;
14: import org.sat4j.specs.IVecInt;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class VecInt_45_tmp__ESTest extends VecInt_45_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       int int0 = 15;
22:       VecInt vecInt0 = new VecInt(15, 15);
23:       assertFalse(vecInt0.isEmpty());
24:       assertEquals(15, vecInt0.size());
25:       assertEquals(15, vecInt0.last());
26:       assertNotNull(vecInt0);
27:       
28:       VecInt vecInt1 = new VecInt();
29:       assertTrue(vecInt1.isEmpty());
30:       assertEquals(0, vecInt1.size());
31:       assertNotNull(vecInt1);
32:       assertFalse(vecInt1.equals((Object)vecInt0));
33:       
34:       VecInt vecInt2 = new VecInt();
35:       assertTrue(vecInt2.isEmpty());
36:       assertEquals(0, vecInt2.size());
37:       assertNotNull(vecInt2);
38:       assertFalse(vecInt2.equals((Object)vecInt0));
39:       assertTrue(vecInt2.equals((Object)vecInt1));
40:       
41:       int int1 = vecInt2.size();
42:       assertEquals(0, int1);
43:       assertTrue(vecInt2.isEmpty());
44:       assertEquals(0, vecInt2.size());
45:       assertNotSame(vecInt2, vecInt1);
46:       assertNotSame(vecInt2, vecInt0);
47:       assertFalse(vecInt2.equals((Object)vecInt0));
48:       assertTrue(vecInt2.equals((Object)vecInt1));
49:       assertFalse(int1 == int0);
50:       
51:       vecInt2.sortUnique();
52:       assertTrue(vecInt2.isEmpty());
53:       assertEquals(0, vecInt2.size());
54:       assertNotSame(vecInt2, vecInt1);
55:       assertNotSame(vecInt2, vecInt0);
56:       assertFalse(vecInt2.equals((Object)vecInt0));
57:       assertTrue(vecInt2.equals((Object)vecInt1));
58:       
59:       VecInt vecInt3 = new VecInt();
60:       assertEquals(0, vecInt3.size());
61:       assertTrue(vecInt3.isEmpty());
62:       assertNotNull(vecInt3);
63:       assertTrue(vecInt3.equals((Object)vecInt1));
64:       assertTrue(vecInt3.equals((Object)vecInt2));
65:       assertFalse(vecInt3.equals((Object)vecInt0));
66:       
67:       int int2 = VecInt.access$000(vecInt3);
68:       assertEquals(0, int2);
69:       assertEquals(0, vecInt3.size());
70:       assertTrue(vecInt3.isEmpty());
71:       assertNotSame(vecInt3, vecInt1);
72:       assertNotSame(vecInt3, vecInt2);
73:       assertNotSame(vecInt3, vecInt0);
74:       assertTrue(vecInt3.equals((Object)vecInt1));
75:       assertTrue(vecInt3.equals((Object)vecInt2));
76:       assertFalse(vecInt3.equals((Object)vecInt0));
77:       assertTrue(int2 == int1);
78:       assertFalse(int2 == int0);
79:       
80:       int[] intArray0 = VecInt.access$100(vecInt3);
81:       assertEquals(0, vecInt3.size());
82:       assertTrue(vecInt3.isEmpty());
83:       assertNotNull(intArray0);
84:       assertNotSame(vecInt3, vecInt1);
85:       assertNotSame(vecInt3, vecInt2);
86:       assertNotSame(vecInt3, vecInt0);
87:       assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
88:       assertEquals(5, intArray0.length);
89:       assertTrue(vecInt3.equals((Object)vecInt1));
90:       assertTrue(vecInt3.equals((Object)vecInt2));
91:       assertFalse(vecInt3.equals((Object)vecInt0));
92:       
93:       IVecInt[] iVecIntArray0 = vecInt3.subset(int0);
94:       assertEquals(0, vecInt3.size());
95:       assertTrue(vecInt3.isEmpty());
96:       assertNotNull(iVecIntArray0);
97:       assertNotSame(vecInt3, vecInt1);
98:       assertNotSame(vecInt3, vecInt2);
99:       assertNotSame(vecInt3, vecInt0);
100:       assertEquals(0, iVecIntArray0.length);
101:       assertFalse(int0 == int1);
102:       assertFalse(int0 == int2);
103:       assertTrue(vecInt3.equals((Object)vecInt1));
104:       assertTrue(vecInt3.equals((Object)vecInt2));
105:       assertFalse(vecInt3.equals((Object)vecInt0));
106:   }
107: }
RegularFileObject[/tmp/EvoSuite_45_1550364959338/org/sat4j/core/VecInt_45_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sun Feb 17 00:55:59 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_45_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_45_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_45_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt",
98:       "org.sat4j.core.EmptyVecInt$1"
99:     );
100:   }
101: }

[MASTER] 01:55:59.386 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = 15;
VecInt vecInt0 = new VecInt(15, 15);
assertFalse(vecInt0.isEmpty());
assertEquals(15, vecInt0.size());
assertEquals(15, vecInt0.last());
assertNotNull(vecInt0);

VecInt vecInt1 = new VecInt();
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertNotNull(vecInt1);
assertFalse(vecInt1.equals((Object)vecInt0));

VecInt vecInt2 = new VecInt();
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertNotNull(vecInt2);
assertFalse(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt1));

int int1 = vecInt2.size();
assertEquals(0, int1);
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertFalse(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt1));
assertFalse(int1 == int0);

vecInt2.sortUnique();
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertFalse(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt1));

VecInt vecInt3 = new VecInt();
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());
assertNotNull(vecInt3);
assertTrue(vecInt3.equals((Object)vecInt1));
assertTrue(vecInt3.equals((Object)vecInt2));
assertFalse(vecInt3.equals((Object)vecInt0));

int int2 = VecInt.access$000(vecInt3);
assertEquals(0, int2);
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());
assertNotSame(vecInt3, vecInt1);
assertNotSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt0);
assertTrue(vecInt3.equals((Object)vecInt1));
assertTrue(vecInt3.equals((Object)vecInt2));
assertFalse(vecInt3.equals((Object)vecInt0));
assertTrue(int2 == int1);
assertFalse(int2 == int0);

int[] intArray0 = VecInt.access$100(vecInt3);
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());
assertNotNull(intArray0);
assertNotSame(vecInt3, vecInt1);
assertNotSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertTrue(vecInt3.equals((Object)vecInt1));
assertTrue(vecInt3.equals((Object)vecInt2));
assertFalse(vecInt3.equals((Object)vecInt0));

IVecInt[] iVecIntArray0 = vecInt3.subset(int0);
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());
assertNotNull(iVecIntArray0);
assertNotSame(vecInt3, vecInt1);
assertNotSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt0);
assertEquals(0, iVecIntArray0.length);
assertFalse(int0 == int1);
assertFalse(int0 == int2);
assertTrue(vecInt3.equals((Object)vecInt1));
assertTrue(vecInt3.equals((Object)vecInt2));
assertFalse(vecInt3.equals((Object)vecInt0));


[MASTER] 01:56:03.102 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_100_1550364963083/org/sat4j/core/VecInt_100_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_100_1550364963083/org/sat4j/core/VecInt_100_tmp__ESTest_scaffolding.java]]
[MASTER] 01:56:03.102 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 01:56:03.102 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 01:56:03.102 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 76
[MASTER] 01:56:03.104 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_100_1550364963083/org/sat4j/core/VecInt_100_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sun Feb 17 00:56:03 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.ReadOnlyVecInt;
15: import org.sat4j.core.VecInt;
16: import org.sat4j.specs.IVecInt;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class VecInt_100_tmp__ESTest extends VecInt_100_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       VecInt vecInt0 = new VecInt(2071);
24:       assertTrue(vecInt0.isEmpty());
25:       assertEquals(0, vecInt0.size());
26:       assertNotNull(vecInt0);
27:       
28:       IVecInt iVecInt0 = vecInt0.push(2071);
29:       assertEquals(2071, vecInt0.last());
30:       assertFalse(vecInt0.isEmpty());
31:       assertEquals(1, vecInt0.size());
32:       assertEquals(1, iVecInt0.size());
33:       assertFalse(iVecInt0.isEmpty());
34:       assertEquals(2071, iVecInt0.last());
35:       assertNotNull(iVecInt0);
36:       assertSame(vecInt0, iVecInt0);
37:       assertSame(iVecInt0, vecInt0);
38:       
39:       vecInt0.remove(2071);
40:       assertTrue(vecInt0.isEmpty());
41:       assertEquals(0, vecInt0.size());
42:       assertSame(vecInt0, iVecInt0);
43:       
44:       IVecInt[] iVecIntArray0 = vecInt0.subset(0);
45:       assertTrue(vecInt0.isEmpty());
46:       assertEquals(0, vecInt0.size());
47:       assertNotNull(iVecIntArray0);
48:       assertSame(vecInt0, iVecInt0);
49:       assertEquals(0, iVecIntArray0.length);
50:       
51:       ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
52:       assertTrue(vecInt0.isEmpty());
53:       assertEquals(0, vecInt0.size());
54:       assertTrue(readOnlyVecInt0.isEmpty());
55:       assertEquals(0, readOnlyVecInt0.size());
56:       assertNotNull(readOnlyVecInt0);
57:       
58:       int int0 = 2956;
59:       int[] intArray0 = new int[4];
60:       intArray0[0] = 1;
61:       intArray0[1] = 2956;
62:       intArray0[3] = 5;
63:       VecInt vecInt1 = new VecInt(intArray0);
64:       assertFalse(vecInt1.isEmpty());
65:       assertEquals(4, vecInt1.size());
66:       assertEquals(5, vecInt1.last());
67:       assertNotNull(vecInt1);
68:       assertArrayEquals(new int[] {1, 2956, 0, 5}, intArray0);
69:       assertEquals(4, intArray0.length);
70:       assertFalse(vecInt1.equals((Object)iVecInt0));
71:       assertFalse(vecInt1.equals((Object)vecInt0));
72:       
73:       VecInt vecInt2 = null;
74:       // Undeclared exception!
75:       try { 
76:         VecInt.access$100((VecInt) null);
77:         fail("Expecting exception: NullPointerException");
78:       
79:       } catch(NullPointerException e) {
80:          //
81:          // no message in exception (getMessage() returned null)
82:          //
83:          verifyException("org.sat4j.core.VecInt", e);
84:       }
85:   }
86: }
RegularFileObject[/tmp/EvoSuite_100_1550364963083/org/sat4j/core/VecInt_100_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sun Feb 17 00:56:03 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_100_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_100_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_100_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt",
98:       "org.sat4j.core.EmptyVecInt$1"
99:     );
100:   }
101: }

[MASTER] 01:56:03.105 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt(2071);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.push(2071);
assertEquals(2071, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals(2071, iVecInt0.last());
assertNotNull(iVecInt0);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);

vecInt0.remove(2071);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertSame(vecInt0, iVecInt0);

IVecInt[] iVecIntArray0 = vecInt0.subset(0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(iVecIntArray0);
assertSame(vecInt0, iVecInt0);
assertEquals(0, iVecIntArray0.length);

ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(readOnlyVecInt0.isEmpty());
assertEquals(0, readOnlyVecInt0.size());
assertNotNull(readOnlyVecInt0);

int int0 = 2956;
int[] intArray0 = new int[4];
intArray0[0] = 1;
intArray0[1] = 2956;
intArray0[3] = 5;
VecInt vecInt1 = new VecInt(intArray0);
assertFalse(vecInt1.isEmpty());
assertEquals(4, vecInt1.size());
assertEquals(5, vecInt1.last());
assertNotNull(vecInt1);
assertArrayEquals(new int[] {1, 2956, 0, 5}, intArray0);
assertEquals(4, intArray0.length);
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt0));

VecInt vecInt2 = null;
VecInt.access$100((VecInt) null);

