* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 9590
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550437885705
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2469458987783595
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.13096862210095497
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.10266666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3464566929133858
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.09686221009549795
[Progress:>                             0%] [Cov:==========>                        31%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 303
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:=============>                     39%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3542757417102967
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21691678035470668
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.21466666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.23308270676691728
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4330708661417323
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1582537517053206
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 404
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.37347294938917974
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2305593451568895
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.24933333333333332
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5669291338582677
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4566929133858268
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17326057298772168
[Progress:>                             0%] [Cov:==============>                    41%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 512
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3944153577661431
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24556616643929058
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.29733333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2781954887218045
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6377952755905512
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1869031377899045
[Progress:>                             0%] [Cov:===============>                   44%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 610
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:================>                  46%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4075043630017452
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.25648021828103684
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.32666666666666666
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2894736842105263
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6771653543307087
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5590551181102362
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.20054570259208732
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 716
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:================>                  47%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4118673647469459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.26193724420190995
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3293333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.29699248120300753
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7165354330708661
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5905511811023622
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.20600272851296045
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 818
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:================>                  48%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.418848167539267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2673942701227831
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.33066666666666666
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.30451127819548873
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7559055118110236
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6220472440944882
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.21282401091405184
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 924
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:=================>                 49%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4214659685863874
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.27148703956343795
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.33466666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.30451127819548873
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7716535433070866
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6299212598425197
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.21691678035470668
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1027
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:=================>                 49%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1129
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:=================>                 50%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4223385689354276
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2728512960436562
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.33466666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.30451127819548873
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7716535433070866
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6299212598425197
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.21691678035470668
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1234
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:=================>                 50%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.42844677137870857
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2810368349249659
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3373333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3082706766917293
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6535433070866141
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.22510231923601637
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1339
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:=================>                 51%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1446
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:==================>                52%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.42844677137870857
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2810368349249659
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3373333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.31954887218045114
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8110236220472441
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6614173228346457
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.22646657571623466
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1553
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[Progress:>                             0%] [Cov:==================>                53%]
* Search finished after 126s and 13 generations, 27755 statements, best individual has fitness: 2395.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.45549738219895286
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3015006821282401
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.36666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8503937007874016
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6929133858267716
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24965893587994542
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.45287958115183247
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2987721691678035
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.36666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8267716535433071
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6850393700787402
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24420190995907232
[MASTER] 22:13:58.133 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 14 seconds more than allowed.
* Minimizing test suite
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.45549738219895286
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3015006821282401
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.36666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8503937007874016
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6929133858267716
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24965893587994542
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.45549738219895286
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3015006821282401
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.36666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8503937007874016
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6929133858267716
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24965893587994542
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 22:15:01.316 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 47%
* Total number of goals: 1146
* Number of covered goals: 542
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 30%
* Total number of goals: 733
* Number of covered goals: 221
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 69
* Number of covered goals: 69
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 38%
* Total number of goals: 750
* Number of covered goals: 282
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 34%
* Total number of goals: 266
* Number of covered goals: 90
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 88%
* Total number of goals: 127
* Number of covered goals: 112
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 69%
* Total number of goals: 127
* Number of covered goals: 88
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 25%
* Total number of goals: 733
* Number of covered goals: 183
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.45549738219895286
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3015006821282401
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.36666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8503937007874016
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6929133858267716
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24965893587994542
* Generated 212 tests with total length 4278
* Resulting test suite's coverage: 53% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:16:00.115 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6674% of time used, but only 17/212 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.45549738219895286
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3015006821282401
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.36666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8503937007874016
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6929133858267716
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24965893587994542
* Compiling and checking tests
[MASTER] 22:16:50.772 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 22:16:50.798 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 22:17:02.697 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 22:17:02.697 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(0);
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
LubyRestarts lubyRestarts0 = new LubyRestarts();
SearchParams searchParams0 = new SearchParams(32);
PureOrder pureOrder0 = new PureOrder(0);
Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, lubyRestarts0);
searchParams0.setConflictBoundIncFactor((-1962.2811013));
solver0.nextFreeVarId(false);
assertEquals(1, solver0.nVars());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
ArminRestarts arminRestarts0 = new ArminRestarts();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax2 = new CardinalityDataStructureYanMax();
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax2, pureOrder0, arminRestarts0);
boolean boolean0 = solver1.simplifyDB();
assertTrue(boolean0);


[MASTER] 22:17:04.351 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 22:17:04.351 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
SearchParams searchParams0 = new SearchParams(2097);
solver0.setSearchParams(searchParams0);
ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, miniSATRestarts0);
solver0.setLearnedConstraintsDeletionStrategy((LearnedConstraintsDeletionStrategy) activityLCDS0);

[MASTER] 22:17:07.723 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 22:17:07.724 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-1273));
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
PureOrder pureOrder0 = new PureOrder();
LubyRestarts lubyRestarts0 = new LubyRestarts();
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>();
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
int[] intArray0 = new int[3];
intArray0[0] = (-1273);
intArray0[1] = 32;
intArray0[2] = 32;
VecInt vecInt0 = new VecInt(intArray0);
NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
levelBasedVarOrderHeap0.getVocabulary();
CBClause cBClause0 = new CBClause(vecInt0, (ILits) null, true);
solver0.claBumpActivity(cBClause0);
ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, lubyRestarts0);
Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, lubyRestarts0);
solver2.addAtLeast(vecInt0, (-1892));
assertEquals(2, solver2.realNumberOfVariables());


[MASTER] 22:17:08.379 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 22:17:08.379 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
SearchParams searchParams0 = new SearchParams((-1264.45939956721), (-1));
PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
ArminRestarts arminRestarts0 = new ArminRestarts();
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, arminRestarts0);
Vec<IVecInt> vec0 = new Vec<IVecInt>();
solver0.addAllClauses(vec0);
assertEquals(1, solver0.nVars());

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, (-1264.45939956721));
Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, arminRestarts0);
VecInt vecInt0 = new VecInt();
solver1.findModel((IVecInt) vecInt0);
assertEquals(2147483, solver1.getTimeout());


[MASTER] 22:17:09.981 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 22:17:10.019 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[0];
VecInt vecInt0 = new VecInt(intArray0);
assertNotNull(vecInt0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, intArray0.length);

PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>((-1374));
assertNotNull(percentLengthLearning0);
assertEquals((-1374), percentLengthLearning0.getLimit());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams0 = new SearchParams((-1374));
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1374), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals((-1374), percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1374), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());

AtLeast atLeast0 = (AtLeast)solver0.addAtLeast(vecInt0, (-363));
assertNotNull(atLeast0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals((-1374), percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1374), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(atLeast0.simplify());
assertTrue(atLeast0.locked());
assertEquals(0, atLeast0.size());
assertFalse(atLeast0.isSatisfied());
assertEquals(0.0, atLeast0.getActivity(), 0.01);
assertFalse(atLeast0.learnt());
assertFalse(atLeast0.canBePropagatedMultipleTimes());
assertEquals((-363), atLeast0.requiredNumberOfSatisfiedLiterals());
assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
assertEquals(0, intArray0.length);

boolean boolean0 = solver0.removeConstr(atLeast0);
assertTrue(boolean0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals((-1374), percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1374), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(atLeast0.simplify());
assertTrue(atLeast0.locked());
assertEquals(0, atLeast0.size());
assertFalse(atLeast0.isSatisfied());
assertEquals(0.0, atLeast0.getActivity(), 0.01);
assertFalse(atLeast0.learnt());
assertFalse(atLeast0.canBePropagatedMultipleTimes());
assertEquals((-363), atLeast0.requiredNumberOfSatisfiedLiterals());
assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
assertEquals(0, intArray0.length);

SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, intArray0.length);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Pair pair0 = new Pair();
assertNotNull(pair0);
assertEquals(0, pair0.getBacktrackLevel());

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertNotNull(percentLengthLearning1);
assertEquals(10, percentLengthLearning1.getLimit());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT0, subsetVarOrder0, miniSATRestarts0);
assertNotNull(solver1);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(10, percentLengthLearning1.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, intArray0.length);

Lits lits0 = (Lits)solver1.voc;
assertNotNull(lits0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(2, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertEquals(0, intArray0.length);

Xor xor0 = new Xor(vecInt0, false, lits0);
assertNotNull(xor0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(10, percentLengthLearning1.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(xor0.canBePropagatedMultipleTimes());
assertEquals(0, xor0.size());
assertFalse(xor0.learnt());
assertFalse(xor0.simplify());
assertTrue(xor0.canBeSatisfiedByCountingLiterals());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, intArray0.length);

Xor xor1 = (Xor)xor0.toConstraint();
assertSame(xor0, xor1);
assertSame(xor1, xor0);
assertNotNull(xor1);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(10, percentLengthLearning1.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(xor0.canBePropagatedMultipleTimes());
assertEquals(0, xor0.size());
assertFalse(xor0.learnt());
assertFalse(xor0.simplify());
assertTrue(xor0.canBeSatisfiedByCountingLiterals());
assertFalse(xor1.simplify());
assertEquals(0, xor1.size());
assertTrue(xor1.canBeSatisfiedByCountingLiterals());
assertFalse(xor1.learnt());
assertFalse(xor1.canBePropagatedMultipleTimes());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, intArray0.length);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructure>();
assertNotNull(percentLengthLearning2);
assertEquals(10, percentLengthLearning2.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning2, cardinalityDataStructure0, searchParams0, subsetVarOrder0, miniSATRestarts0);
assertNotNull(solver2);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(10, percentLengthLearning2.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1374), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, intArray0.length);

String string0 = solver2.getLogPrefix();
assertEquals("c ", string0);
assertNotNull(string0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(10, percentLengthLearning2.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1374), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(4, solver2.newVar());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, intArray0.length);


[MASTER] 22:17:10.687 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 22:17:10.691 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertNotNull(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertNotNull(fixedPeriodRestarts0);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>(0);
assertNotNull(fixedLengthLearning1);
assertEquals(0, fixedLengthLearning1.getMaxLength());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
assertNotNull(solver0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());

ILogAble iLogAble0 = solver0.getLogger();
assertNotNull(iLogAble0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble0);
assertNotNull(solver1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
solver1.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
