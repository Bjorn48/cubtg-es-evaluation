/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 10:14:15 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.ImageProducer;
import jigl.image.ROI;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealGrayImage_ESTest extends RealGrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(232, 2446).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((ImageProducer) null).when(image0).getSource();
      doReturn(232, 0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(image0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      assertNotNull(realGrayImage0);
      assertEquals(3133, realGrayImage0.Y());
      assertEquals(3133, realGrayImage0.X());
      
      Float float0 = Float.valueOf((-122.9793F));
      ROI rOI0 = new ROI(3133, 3133, 3133, 3133);
      // Undeclared exception!
      try { 
        realGrayImage0.set(3133, 3133, float0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6266
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      // Undeclared exception!
      try { 
        realGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.copy();
      realGrayImage0.sqrSum();
      ROI rOI0 = new ROI(255, 255, 255, 255);
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.Y();
      rOI1.X();
      rOI1.Y();
      realGrayImage0.copy();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      realGrayImage0.sqrSum();
      realGrayImage0.Y();
      ROI rOI0 = new ROI(255, 255, 255, 255);
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        realGrayImage1.clip(0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2374;
      RealGrayImage realGrayImage0 = new RealGrayImage(2374, 2374);
      int int1 = 1;
      int int2 = 600;
      realGrayImage0.addbuffer(1, 2374, 1, 600, (float) 600);
      int int3 = 0;
      int int4 = 1;
      int int5 = (-1592);
      ROI rOI0 = new ROI(0, 1, 2374, (-1592));
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1592
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.copy();
      realGrayImage0.sqrSum();
      realGrayImage0.Y();
      ROI rOI0 = new ROI(255, 255, 255, 255);
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.Y();
      // Undeclared exception!
      realGrayImage0.addbuffer(968, 255, 0.0F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      ROI rOI0 = new ROI();
      rOI0.Y();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.clip(108, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      ROI rOI0 = new ROI();
      rOI0.Y();
      rOI0.Y();
      RealGrayImage realGrayImage1 = realGrayImage0.copy(rOI0);
      // Undeclared exception!
      try { 
        realGrayImage0.add(realGrayImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      int int1 = 1050;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 1050);
      int int2 = 2632;
      ROI rOI0 = new ROI();
      rOI0.setROI(2173, 2173, 6941, 1050);
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1050
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[1][6];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 4171.2246F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-2253.246F);
      floatArray1[7] = 1.0F;
      floatArray0[0] = floatArray1;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.add(3133, 3133, 3735.83F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3133
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage1.addSum();
      realGrayImage1.addSum();
      realGrayImage1.addSum();
      ROI rOI0 = null;
      realGrayImage0.addbuffer(439, 8, 8, 439, (float) 439);
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 925.44F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[1] = floatArray2;
      RealGrayImage realGrayImage2 = null;
      try {
        realGrayImage2 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[1][3];
      float[] floatArray1 = new float[3];
      floatArray0[0] = floatArray1;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-891);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 134.29F;
      floatArray0[2] = (float) (-891);
      floatArray0[2] = (-467.0239F);
      ROI rOI0 = null;
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      // Undeclared exception!
      try { 
        realGrayImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      ROI rOI0 = new ROI(255, 255, 255, 255);
      int int0 = 2;
      int int1 = 0;
      realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        realGrayImage0.divide(1961, 1961, (float) 1961, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      // Undeclared exception!
      realGrayImage0.addbuffer(2374, 2374, 2374, 2374, 32767.0F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      double double0 = realGrayImage0.sqrSum();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      
      int int0 = realGrayImage0.Y();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, int0);
      assertNotSame(realGrayImage0, realGrayImage1);
      
      ROI rOI0 = new ROI(255, 255, 255, 255);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ux());
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ux());
      assertEquals(255, int1);
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ux());
      assertEquals(255, int2);
      
      int int3 = rOI0.lx();
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ux());
      assertEquals(255, int3);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int4 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      
      RealGrayImage realGrayImage2 = realGrayImage0.addbuffer(968, 1, 0.0F);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(968, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      int int6 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      
      int int7 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, int7);
      assertNotSame(rOI1, rOI0);
      
      int int8 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int6);
      assertFalse(int8 == int2);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertFalse(int8 == int0);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertTrue(int8 == int5);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, int8);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.clip(255, 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      double double0 = realGrayImage0.sqrSum();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      
      int int0 = realGrayImage0.Y();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, int0);
      assertNotSame(realGrayImage0, realGrayImage1);
      
      int int1 = 0;
      int int2 = 255;
      ROI rOI0 = new ROI(255, 255, 255, 255);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ux());
      
      int int3 = 6941;
      rOI0.setROI(255, 6941, 0, 6941);
      assertEquals(255, rOI0.lx());
      assertEquals(6941, rOI0.ly());
      assertEquals(256, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6941, rOI0.uy());
      
      int int4 = rOI0.uy();
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(255, rOI0.lx());
      assertEquals(6941, rOI0.ly());
      assertEquals(256, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6941, rOI0.uy());
      assertEquals(6941, int4);
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertEquals(255, rOI0.lx());
      assertEquals(6941, rOI0.ly());
      assertEquals(256, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6941, rOI0.uy());
      assertEquals(6941, int5);
      
      int int6 = rOI0.ux();
      assertTrue(int6 == int1);
      assertFalse(int6 == int2);
      assertTrue(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertEquals(255, rOI0.lx());
      assertEquals(6941, rOI0.ly());
      assertEquals(256, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6941, rOI0.uy());
      assertEquals(0, int6);
      
      int int7 = rOI0.lx();
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertTrue(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int6);
      assertEquals(255, rOI0.lx());
      assertEquals(6941, rOI0.ly());
      assertEquals(256, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(6941, rOI0.uy());
      assertEquals(255, int7);
      
      // Undeclared exception!
      try { 
        realGrayImage1.clip(0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6941
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) (-891);
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray1.length);
      assertNotNull(imageProducer0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, floatArray1.length);
      assertNotNull(string0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals("0:0\n", string0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0, floatArray1.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      assertNotNull(realGrayImage0);
      assertEquals(3133, realGrayImage0.Y());
      assertEquals(3133, realGrayImage0.X());
      
      Float float0 = Float.valueOf((-102.5667F));
      assertNotNull(float0);
      assertEquals((-102.5667F), (float)float0, 0.01F);
      
      ROI rOI0 = new ROI(3133, 3133, 3133, 999);
      assertNotNull(rOI0);
      assertEquals(3133, rOI0.ux());
      assertEquals(2135, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(3133, rOI0.lx());
      assertEquals(999, rOI0.uy());
      assertEquals(3133, rOI0.ly());
      
      Float float1 = Float.valueOf((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      Float float2 = Float.valueOf((-1.0F));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Float float3 = Float.valueOf((-1719.8821F));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals((-1719.8821F), (float)float3, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.set(1936, 1390, float3, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      assertNotNull(realGrayImage0);
      assertEquals(3133, realGrayImage0.X());
      assertEquals(3133, realGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      
      float float0 = realGrayImage0.addSum();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = realGrayImage0.addSum();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, float1, 0.01F);
      
      float float2 = realGrayImage0.addSum();
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, float2, 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 122);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(122, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      
      double double0 = realGrayImage0.sqrSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 134.29F;
      floatArray0[2] = (float) (-891);
      floatArray0[5] = (-467.0239F);
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray1.length);
      assertNotNull(imageProducer0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      // Undeclared exception!
      try { 
        realGrayImage0.median((-891), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      float float0 = realGrayImage1.addSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      float float1 = realGrayImage1.addSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(float1, float0, 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      float float2 = realGrayImage1.addSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage0.add(0.0F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertNotNull(realGrayImage3);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage0);
      
      // Undeclared exception!
      try { 
        realGrayImage3.addbuffer((-405), (-405), 0.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1;
      int int1 = 1;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (-467.0239F);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 1256);
      assertNotNull(realGrayImage0);
      assertEquals(1256, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(4201, 1, (-467.0239F));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1256, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(4201, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      int int4 = rOI0.Y();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int4);
      
      int int5 = rOI0.X();
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int5);
      
      int int6 = rOI0.Y();
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int6);
      
      int int7 = 1380;
      realGrayImage1.clip(int0, int7, rOI0);
      RealGrayImage realGrayImage2 = realGrayImage1.subtract((float) int1);
      realGrayImage0.add(realGrayImage2, rOI0, rOI0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (-1563.7F);
      floatArray0[2] = (float) 16;
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) 16;
      floatArray0[5] = (float) 16;
      floatArray0[6] = (float) 16;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(16, 16, floatArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(imageProducer0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(242, int0);
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(242, int1);
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(242, int2);
      
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage3 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertNotNull(realGrayImage3);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      
      int int3 = (-1261);
      int int4 = 935;
      float float0 = (-2307.62F);
      // Undeclared exception!
      try { 
        realGrayImage0.divide(realGrayImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.uy());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(imageProducer0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.uy());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(242, int0);
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.uy());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(242, int1);
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.uy());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(242, int2);
      
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertNotNull(realGrayImage3);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(2, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(2, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      
      ImageProducer imageProducer1 = realGrayImage3.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertNotNull(imageProducer1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(2, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(2, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(imageProducer1, imageProducer0);
      
      ImageProducer imageProducer2 = realGrayImage1.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(imageProducer2.equals((Object)imageProducer0));
      assertFalse(imageProducer2.equals((Object)imageProducer1));
      assertNotNull(imageProducer2);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(imageProducer2, imageProducer0);
      assertNotSame(imageProducer2, imageProducer1);
      
      int int3 = (-132);
      // Undeclared exception!
      try { 
        realGrayImage3.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 242
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      int int0 = (-818);
      float[] floatArray1 = new float[2];
      floatArray1[0] = (float) (-818);
      floatArray1[1] = (float) (-818);
      // Undeclared exception!
      try { 
        realGrayImage1.addbuffer((-818), (-818), (-818.0F));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      
      ROI rOI0 = new ROI(255, 255, 255, 255);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 1961;
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      
      int int1 = 0;
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = 2;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 6, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      int int3 = rOI0.ly();
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      RealGrayImage realGrayImage3 = realGrayImage2.add(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage3);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage2);
      
      RealGrayImage realGrayImage4 = null;
      try {
        realGrayImage4 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 301.1171F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = 612.1F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 301.1171F;
      floatArray2[2] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = (-1.0F);
      floatArray3[2] = 0.0F;
      floatArray3[3] = (-1.0F);
      floatArray3[4] = (-1.0F);
      floatArray3[5] = 301.1171F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 612.1F;
      floatArray4[1] = 301.1171F;
      floatArray4[2] = 301.1171F;
      floatArray4[3] = 612.1F;
      floatArray4[4] = 0.0F;
      floatArray4[5] = 0.0F;
      floatArray4[6] = (-1305.84F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 2839.0845F;
      floatArray5[1] = (-1.0F);
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = (-1.0F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray1));
      
      floatArray7[0] = 0.0F;
      floatArray7[1] = 0.0F;
      floatArray7[2] = 4300.516F;
      floatArray7[3] = (-1305.84F);
      floatArray7[4] = 1.0F;
      floatArray7[5] = 301.1171F;
      floatArray7[6] = 550.62F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[2];
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray7));
      
      floatArray8[0] = 4300.516F;
      floatArray8[1] = 0.0F;
      floatArray0[7] = floatArray8;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-1.0F);
      floatArray1[5] = 1357.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 2098.3894F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 1357.0F;
      floatArray2[4] = (-1.0F);
      floatArray0[1] = floatArray2;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      assertNotNull(realGrayImage0);
      assertEquals(3133, realGrayImage0.X());
      assertEquals(3133, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      int int3 = rOI0.X();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(1, 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int0 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      assertNotSame(rOI0, rOI1);
      
      rOI1.setROI(1, 1, 1961, 1961);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(1961, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1961, rOI1.lx());
      assertEquals(1961, rOI1.Y());
      assertEquals(1961, rOI1.X());
      assertNotSame(rOI1, rOI0);
      
      int int1 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(1, rOI1.uy());
      assertEquals(1961, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1961, rOI1.lx());
      assertEquals(1961, rOI1.Y());
      assertEquals(1961, rOI1.X());
      assertEquals(1961, int1);
      assertNotSame(rOI1, rOI0);
      
      int int2 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, rOI1.uy());
      assertEquals(1961, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1961, rOI1.lx());
      assertEquals(1961, rOI1.Y());
      assertEquals(1961, rOI1.X());
      assertEquals(1961, int2);
      assertNotSame(rOI1, rOI0);
      
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      float float0 = realGrayImage0.absSum();
      assertEquals(0, floatArray0.length);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) (-891);
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray1.length);
      assertNotNull(imageProducer0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.median((-891), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ROI rOI0 = new ROI(3094, 3094, 2131, 2131);
      assertNotNull(rOI0);
      assertEquals(3094, rOI0.lx());
      assertEquals(3094, rOI0.ly());
      assertEquals(2131, rOI0.uy());
      assertEquals(2131, rOI0.ux());
      assertEquals(964, rOI0.Y());
      assertEquals(964, rOI0.X());
      
      int int0 = 0;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(6, 0, 6, 0, 492.0F);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(6, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      
      int int1 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, int1);
      assertNotSame(rOI1, rOI0);
      
      ROI rOI2 = new ROI();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      // Undeclared exception!
      try { 
        realGrayImage1.copy(rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ux());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(imageProducer0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ux());
      assertEquals(242, int0);
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ux());
      assertEquals(242, int1);
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ux());
      assertEquals(242, int2);
      
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage3 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertNotNull(realGrayImage3);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      
      ImageProducer imageProducer1 = realGrayImage1.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertNotNull(imageProducer1);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(imageProducer1, imageProducer0);
      
      // Undeclared exception!
      try { 
        realGrayImage2.median((-132), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 242
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) (-891);
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray1.length);
      assertNotNull(imageProducer0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ROI rOI0 = new ROI(1256, 1256, (-891), (-891));
      assertNotNull(rOI0);
      assertEquals(2148, rOI0.Y());
      assertEquals(2148, rOI0.X());
      assertEquals((-891), rOI0.uy());
      assertEquals((-891), rOI0.ux());
      assertEquals(1256, rOI0.ly());
      assertEquals(1256, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(255, (-351), (-1400.2F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1242
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) (-891);
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage((-932), (-122));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1;
      int int1 = 1;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      float float0 = (-467.0239F);
      floatArray0[1] = (-467.0239F);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      int int2 = 8;
      ROI rOI0 = new ROI(2804, 2804, 8, 571);
      assertNotNull(rOI0);
      assertEquals(571, rOI0.uy());
      assertEquals(2804, rOI0.ly());
      assertEquals(2804, rOI0.lx());
      assertEquals(2234, rOI0.Y());
      assertEquals(2797, rOI0.X());
      assertEquals(8, rOI0.ux());
      
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      
      float float1 = realGrayImage1.addSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      float float2 = realGrayImage1.addSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      float float3 = realGrayImage1.addSum();
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      // Undeclared exception!
      try { 
        realGrayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 571
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      
      String string0 = realGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals("0:0\n", string0);
      
      float float0 = realGrayImage0.addSum();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, float0, 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      RealGrayImage realGrayImage3 = realGrayImage2.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage3);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      
      String string1 = realGrayImage0.toString();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals("0:0\n", string1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      
      RealGrayImage realGrayImage4 = realGrayImage3.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage4);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      
      // Undeclared exception!
      try { 
        realGrayImage4.addbuffer(1, (-1), 0, 0, 0.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.uy());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      
      rOI0.setROI(16, (-218), 0, 16);
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals((-218), rOI0.uy());
      assertEquals(17, rOI0.X());
      assertEquals(235, rOI0.Y());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(1961, 0);
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(imageProducer0);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      int int0 = rOI0.ly();
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals((-218), rOI0.uy());
      assertEquals(17, rOI0.X());
      assertEquals(235, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(16, int0);
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals((-218), rOI0.uy());
      assertEquals(17, rOI0.X());
      assertEquals(235, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      
      String string0 = realGrayImage2.toString();
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(string0);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      int int2 = rOI0.lx();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals((-218), rOI0.uy());
      assertEquals(17, rOI0.X());
      assertEquals(235, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(16, int2);
      
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage3 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage3);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      
      RealGrayImage realGrayImage4 = null;
      try {
        realGrayImage4 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(247, 247, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int0 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      assertNotSame(rOI0, rOI1);
      
      int int1 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int1);
      assertNotSame(rOI0, rOI1);
      
      rOI1.setROI(1, (-343), 1961, 1961);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ux());
      assertEquals(1961, rOI1.X());
      assertEquals((-343), rOI1.uy());
      assertEquals(2305, rOI1.Y());
      assertEquals(1961, rOI1.ly());
      assertEquals(1961, rOI1.lx());
      assertNotSame(rOI1, rOI0);
      
      int int2 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int2);
      assertNotSame(rOI0, rOI1);
      
      int int3 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, rOI1.ux());
      assertEquals(1961, rOI1.X());
      assertEquals((-343), rOI1.uy());
      assertEquals(2305, rOI1.Y());
      assertEquals(1961, rOI1.ly());
      assertEquals(1961, rOI1.lx());
      assertEquals(2305, int3);
      assertNotSame(rOI1, rOI0);
      
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      float float0 = realGrayImage0.absSum();
      assertEquals(0, floatArray0.length);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      assertNotNull(realGrayImage0);
      assertEquals(3133, realGrayImage0.Y());
      assertEquals(3133, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      int int3 = rOI0.X();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        realGrayImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ROI rOI0 = new ROI(255, 255, 255, 255);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(255, rOI0.lx());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 255;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertArrayEquals(new float[] {255.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 255, (float) 255);
      assertEquals(1, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(255, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertArrayEquals(new float[] {255.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.median(1540, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(255, 255, 255, 255);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      int int0 = rOI0.ux();
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(255, int0);
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(255, int1);
      
      // Undeclared exception!
      try { 
        realGrayImage0.divide(2, 255, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 2374;
      RealGrayImage realGrayImage0 = new RealGrayImage(2374, 2374);
      assertNotNull(realGrayImage0);
      assertEquals(2374, realGrayImage0.Y());
      assertEquals(2374, realGrayImage0.X());
      
      // Undeclared exception!
      try { 
        realGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(16, (-218), 0, 16);
      assertEquals(16, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.lx());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(1961, 0);
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(imageProducer0);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      int int0 = rOI0.ly();
      assertEquals(16, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(16, int0);
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(16, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(0, int1);
      
      String string0 = realGrayImage2.toString();
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(string0);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(16, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(16, int2);
      
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage3 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertNotNull(realGrayImage3);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      
      realGrayImage2.median(1961);
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      RealGrayImage realGrayImage4 = null;
      try {
        realGrayImage4 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-891);
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) (-891);
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-891);
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) (-891);
      ROI rOI0 = null;
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray1.length);
      assertNotNull(imageProducer0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, floatArray1.length);
      assertNotNull(string0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.max((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      
      rOI0.setROI(16, (-218), 0, 16);
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(2, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(imageProducer0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(2, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(16, int0);
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        realGrayImage2.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -218
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 1961;
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      
      ROI rOI0 = new ROI(255, 255, 255, 255);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(255, int1);
      
      // Undeclared exception!
      try { 
        realGrayImage0.add(realGrayImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) (-891);
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray1.length);
      assertNotNull(imageProducer0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI(1256, 1256, (-891), (-891));
      assertNotNull(rOI0);
      assertEquals((-891), rOI0.ux());
      assertEquals((-891), rOI0.uy());
      assertEquals(2148, rOI0.Y());
      assertEquals(2148, rOI0.X());
      assertEquals(1256, rOI0.ly());
      assertEquals(1256, rOI0.lx());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      ImageProducer imageProducer1 = realGrayImage1.getJavaImage();
      assertEquals(0, floatArray1.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertNotNull(imageProducer1);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(imageProducer1, imageProducer0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.median(5855, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -891
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      float float0 = realGrayImage0.addSum();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = realGrayImage0.addSum();
      assertEquals(float1, float0, 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, float1, 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage2 = realGrayImage0.add(0.0F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      RealGrayImage realGrayImage3 = realGrayImage0.add(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage3);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      
      ROI rOI0 = new ROI((-1), 1384, 1384, (-767));
      assertNotNull(rOI0);
      assertEquals(2152, rOI0.Y());
      assertEquals((-1), rOI0.ux());
      assertEquals(1386, rOI0.X());
      assertEquals(1384, rOI0.lx());
      assertEquals(1384, rOI0.ly());
      assertEquals((-767), rOI0.uy());
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(0, 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -767
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = 2;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 6, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      RealGrayImage realGrayImage3 = realGrayImage2.add(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage3);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      
      RealGrayImage realGrayImage4 = null;
      try {
        realGrayImage4 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 3133;
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      assertNotNull(realGrayImage0);
      assertEquals(3133, realGrayImage0.Y());
      assertEquals(3133, realGrayImage0.X());
      
      Float float0 = Float.valueOf((-122.9793F));
      assertNotNull(float0);
      assertEquals((-122.9793F), (float)float0, 0.01F);
      
      int int1 = 199;
      ROI rOI0 = new ROI(199, 3133, 3133, 199);
      assertNotNull(rOI0);
      assertEquals(2935, rOI0.Y());
      assertEquals(2935, rOI0.X());
      assertEquals(199, rOI0.uy());
      assertEquals(3133, rOI0.ly());
      assertEquals(199, rOI0.ux());
      assertEquals(3133, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realGrayImage0.set(3133, 3133, float0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3332
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(imageProducer0);
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(242, int0);
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(242, int1);
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(242, int2);
      
      // Undeclared exception!
      try { 
        realGrayImage0.divide(realGrayImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.ux());
      
      rOI0.setROI(16, (-218), 0, 16);
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(17, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(2, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(imageProducer0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(2, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      int int0 = rOI0.ly();
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(17, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(16, int0);
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(17, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(0, int1);
      
      String string0 = realGrayImage2.toString();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(string0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(2, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals("2:2\n0.0 0.0 \n0.0 0.0 \n", string0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-218), rOI0.uy());
      assertEquals(16, rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(17, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(16, int2);
      
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage3 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage3);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      
      ImageProducer imageProducer1 = realGrayImage1.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertNotNull(imageProducer1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(imageProducer1, imageProducer0);
      
      // Undeclared exception!
      try { 
        realGrayImage2.median((-132), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -218
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((-2339), (-2339), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(1444, 1444, floatArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      
      int int0 = 16;
      rOI0.setROI(16, (-218), 0, 16);
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(235, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(imageProducer0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(2, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(235, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(16, int1);
      
      int int2 = 1931;
      int int3 = (-16777216);
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(realGrayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -218
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 1;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (-467.0239F);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 1256);
      assertNotNull(realGrayImage0);
      assertEquals(1, realGrayImage0.X());
      assertEquals(1256, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 1, (-467.0239F));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1, realGrayImage0.X());
      assertEquals(1256, realGrayImage0.Y());
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int2);
      
      int int3 = rOI0.X();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int3);
      
      int int4 = rOI0.Y();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        realGrayImage1.clip(1, 1380, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = (-891);
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) (-891);
      ROI rOI0 = null;
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((ImageProducer) null).when(image0).getSource();
      doReturn(0, 0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(image0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(242, rOI0.lx());
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(16, (-218), 0, 16);
      assertEquals(16, rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(2, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(1961, 0);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      
      int int0 = rOI0.ly();
      assertEquals(16, rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(16, int0);
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(16, rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(0, int1);
      
      String string0 = realGrayImage2.toString();
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(string0);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(16, rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(235, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(16, int2);
      
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage3 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertNotNull(realGrayImage3);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      
      realGrayImage2.median(1961);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      
      RealGrayImage realGrayImage4 = null;
      try {
        realGrayImage4 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(242, rOI0.uy());
      assertEquals(242, rOI0.ux());
      
      int int0 = 2;
      int int1 = 16;
      rOI0.setROI(16, (-218), 242, 16);
      assertEquals(16, rOI0.ux());
      assertEquals(242, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(227, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(235, rOI0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 1961);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(1961.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(1.5382084E7, realGrayImage1.sqrSum(), 0.01);
      assertEquals(7844.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(7844.0F, realGrayImage1.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(1961, 0);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(imageProducer0);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      int int2 = rOI0.ly();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(16, rOI0.ux());
      assertEquals(242, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(227, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(235, rOI0.Y());
      assertEquals(16, int2);
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(16, rOI0.ux());
      assertEquals(242, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(227, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(235, rOI0.Y());
      assertEquals(16, int3);
      
      String string0 = realGrayImage2.toString();
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(string0);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(1961, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      
      int int4 = rOI0.lx();
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(16, rOI0.ux());
      assertEquals(242, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(227, rOI0.X());
      assertEquals((-218), rOI0.uy());
      assertEquals(235, rOI0.Y());
      assertEquals(242, int4);
      
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage3 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage3);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      
      RealGrayImage realGrayImage4 = realGrayImage3.copy();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertNotNull(realGrayImage4);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      
      ImageProducer imageProducer1 = realGrayImage1.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertNotNull(imageProducer1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(1961.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(1961.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(1.5382084E7, realGrayImage1.sqrSum(), 0.01);
      assertEquals(7844.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(7844.0F, realGrayImage1.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(imageProducer1, imageProducer0);
      
      // Undeclared exception!
      try { 
        realGrayImage2.median((-132), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -218
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      double double0 = realGrayImage0.sqrSum();
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int0 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      assertNotSame(rOI0, rOI1);
      
      int int1 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int1);
      assertNotSame(rOI0, rOI1);
      
      int int2 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int2);
      assertNotSame(rOI0, rOI1);
      
      int int3 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage1.subtract((-852.0F), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) (-891);
      float[][] floatArray1 = new float[0][8];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray1.length);
      assertNotNull(imageProducer0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ROI rOI0 = new ROI(1256, 1256, (-891), (-891));
      assertNotNull(rOI0);
      assertEquals(2148, rOI0.Y());
      assertEquals(1256, rOI0.lx());
      assertEquals((-891), rOI0.uy());
      assertEquals(1256, rOI0.ly());
      assertEquals(2148, rOI0.X());
      assertEquals((-891), rOI0.ux());
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(255, (-351), (float) (-891), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1242
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1961, 1961);
      assertNotNull(realGrayImage0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(242, 242, 242, 242);
      assertNotNull(rOI0);
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2, 2, 16, 0, (float) 10);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(400.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(40.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(10.0F, realGrayImage1.min(), 0.01F);
      assertEquals(10.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(40.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(400.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(40.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(10.0F, realGrayImage1.min(), 0.01F);
      assertEquals(10.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(40.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(40.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(400.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(10.0F, realGrayImage2.max(), 0.01F);
      assertEquals(10.0F, realGrayImage2.min(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(2, realGrayImage2.X());
      assertEquals(40.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      ImageProducer imageProducer0 = realGrayImage2.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(imageProducer0);
      assertEquals(1961, realGrayImage0.X());
      assertEquals(1961, realGrayImage0.Y());
      assertEquals(400.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(40.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(10.0F, realGrayImage1.min(), 0.01F);
      assertEquals(10.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(40.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.X());
      assertEquals(40.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(400.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(10.0F, realGrayImage2.max(), 0.01F);
      assertEquals(10.0F, realGrayImage2.min(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(2, realGrayImage2.X());
      assertEquals(40.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      
      int int0 = rOI0.ly();
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(242, int0);
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(242, int1);
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(242, rOI0.ly());
      assertEquals(242, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(242, rOI0.ux());
      assertEquals(242, rOI0.uy());
      assertEquals(242, int2);
      
      // Undeclared exception!
      try { 
        realGrayImage2.median((-132), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 242
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      
      float float0 = realGrayImage0.addSum();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = realGrayImage0.addSum();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, float1, 0.01F);
      
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 3133;
      RealGrayImage realGrayImage0 = new RealGrayImage(3133, 3133);
      assertNotNull(realGrayImage0);
      assertEquals(3133, realGrayImage0.X());
      assertEquals(3133, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int3);
      
      int int4 = rOI0.X();
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int4);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
  }
}
