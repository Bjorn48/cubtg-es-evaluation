<?xml version="1.0"?><ts><start>s0</start><states><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s11"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s10"><transition target="s11" action="java.lang.String.substring(int)" proba="0.16666666666666666"></transition><transition target="s24" action="java.lang.String.split(java.lang.String)" proba="0.16666666666666666"></transition><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s23" action="java.lang.String.indexOf(int,int)" proba="0.16666666666666666"></transition></state><state id="s13"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s12"><transition target="s5" action="java.lang.String.startsWith(java.lang.String)" proba="0.3333333333333333"></transition><transition target="s13" action="java.lang.String.replace(char,char)" proba="0.16666666666666666"></transition><transition target="sX" action="epsilon" proba="0.16666666666666666"></transition><transition target="s8" action="java.lang.String.endsWith(java.lang.String)" proba="0.16666666666666666"></transition><transition target="s1" action="java.lang.String.contains(java.lang.CharSequence)" proba="0.16666666666666666"></transition></state><state id="s15"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s14"><transition target="s3" action="java.lang.String.equals(java.lang.Object)" proba="0.125"></transition><transition target="sX" action="epsilon" proba="0.625"></transition><transition target="s15" action="java.lang.String.addSchema(org.databene.jdbacl.model.DBSchema)" proba="0.125"></transition><transition target="s14" action="java.lang.String.equalsIgnoreCase(java.lang.String)" proba="0.125"></transition></state><state id="s17"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s16"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s16" action="java.lang.String.valueOf(boolean)" proba="0.5"></transition></state><state id="s19"><transition target="sX" action="epsilon" proba="0.4166666666666667"></transition><transition target="s19" action="java.lang.String.valueOf(java.lang.Object)" proba="0.5833333333333334"></transition></state><state id="s18"><transition target="sX" action="epsilon" proba="0.2"></transition><transition target="s18" action="java.lang.String.getCause()" proba="0.8"></transition></state><state id="s0"><transition target="s3" action="java.lang.String.equals(java.lang.Object)" proba="0.3118279569892473"></transition><transition target="s4" action="java.lang.String.trim()" proba="0.08602150537634409"></transition><transition target="s5" action="java.lang.String.startsWith(java.lang.String)" proba="0.10752688172043011"></transition><transition target="s6" action="java.lang.String.length()" proba="0.03225806451612903"></transition><transition target="s7" action="java.lang.String.toUpperCase()" proba="0.053763440860215055"></transition><transition target="s8" action="java.lang.String.endsWith(java.lang.String)" proba="0.021505376344086023"></transition><transition target="s9" action="java.lang.String.lastIndexOf(int)" proba="0.010752688172043012"></transition><transition target="s20" action="java.lang.String.indexOf(int)" proba="0.03225806451612903"></transition><transition target="s22" action="java.lang.String.valueOf(long)" proba="0.010752688172043012"></transition><transition target="s21" action="java.lang.String.valueOf(int)" proba="0.021505376344086023"></transition><transition target="s12" action="java.lang.String.toLowerCase()" proba="0.053763440860215055"></transition><transition target="s26" action="java.lang.String.charAt(int)" proba="0.010752688172043012"></transition><transition target="s14" action="java.lang.String.equalsIgnoreCase(java.lang.String)" proba="0.053763440860215055"></transition><transition target="s25" action="java.lang.String.valueOf(double)" proba="0.010752688172043012"></transition><transition target="s17" action="java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)" proba="0.03225806451612903"></transition><transition target="s16" action="java.lang.String.valueOf(boolean)" proba="0.021505376344086023"></transition><transition target="s19" action="java.lang.String.valueOf(java.lang.Object)" proba="0.053763440860215055"></transition><transition target="s1" action="java.lang.String.contains(java.lang.CharSequence)" proba="0.03225806451612903"></transition><transition target="s2" action="java.lang.String.hashCode()" proba="0.043010752688172046"></transition></state><state id="s1"><transition target="sX" action="epsilon" proba="0.8"></transition><transition target="s1" action="java.lang.String.contains(java.lang.CharSequence)" proba="0.2"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s3"><transition target="s7" action="java.lang.String.toUpperCase()" proba="0.03225806451612903"></transition><transition target="sX" action="epsilon" proba="0.9354838709677419"></transition><transition target="s14" action="java.lang.String.equalsIgnoreCase(java.lang.String)" proba="0.03225806451612903"></transition></state><state id="s4"><transition target="s3" action="java.lang.String.equals(java.lang.Object)" proba="0.07692307692307693"></transition><transition target="s4" action="java.lang.String.trim()" proba="0.23076923076923078"></transition><transition target="s5" action="java.lang.String.startsWith(java.lang.String)" proba="0.07692307692307693"></transition><transition target="s6" action="java.lang.String.length()" proba="0.23076923076923078"></transition><transition target="s12" action="java.lang.String.toLowerCase()" proba="0.07692307692307693"></transition><transition target="sX" action="epsilon" proba="0.3076923076923077"></transition></state><state id="s5"><transition target="s5" action="java.lang.String.startsWith(java.lang.String)" proba="0.06666666666666667"></transition><transition target="s6" action="java.lang.String.length()" proba="0.06666666666666667"></transition><transition target="sX" action="epsilon" proba="0.6666666666666666"></transition><transition target="s8" action="java.lang.String.endsWith(java.lang.String)" proba="0.06666666666666667"></transition><transition target="s18" action="java.lang.String.getCause()" proba="0.13333333333333333"></transition></state><state id="s6"><transition target="s4" action="java.lang.String.trim()" proba="0.25"></transition><transition target="s5" action="java.lang.String.startsWith(java.lang.String)" proba="0.125"></transition><transition target="s10" action="java.lang.String.substring(int,int)" proba="0.25"></transition><transition target="sX" action="epsilon" proba="0.375"></transition></state><state id="s7"><transition target="sX" action="epsilon" proba="0.8333333333333334"></transition><transition target="s14" action="java.lang.String.equalsIgnoreCase(java.lang.String)" proba="0.16666666666666666"></transition></state><state id="s8"><transition target="s6" action="java.lang.String.length()" proba="0.2"></transition><transition target="s8" action="java.lang.String.endsWith(java.lang.String)" proba="0.2"></transition><transition target="sX" action="epsilon" proba="0.6"></transition></state><state id="s9"><transition target="s10" action="java.lang.String.substring(int,int)" proba="1.0"></transition></state><state id="s20"><transition target="s10" action="java.lang.String.substring(int,int)" proba="0.6666666666666666"></transition><transition target="sX" action="epsilon" proba="0.3333333333333333"></transition></state><state id="s22"><transition target="s22" action="java.lang.String.valueOf(long)" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s21"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s16" action="java.lang.String.valueOf(boolean)" proba="0.5"></transition></state><state id="s24"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s23"><transition target="s10" action="java.lang.String.substring(int,int)" proba="1.0"></transition></state><state id="s26"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s25"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s25" action="java.lang.String.valueOf(double)" proba="0.5"></transition></state></states></ts>