/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 00:57:37 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DotSearchTracing_ESTest extends DotSearchTracing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("\", shape=box, color=\"gray\", style=dotted]");
      dotSearchTracing0.propagating((-2335));
      dotSearchTracing0.assuming((-2335));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DotSearchTracing<CardinalityDataStructureYanMax> dotSearchTracing0 = new DotSearchTracing<CardinalityDataStructureYanMax>("]-C#r9S*)p;&W");
      dotSearchTracing0.assuming((-2124167220));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DotSearchTracing<CardinalityDataStructureYanMax> dotSearchTracing0 = new DotSearchTracing<CardinalityDataStructureYanMax>("]-C#r9S*)p;&W");
      Lbool lbool0 = Lbool.FALSE;
      dotSearchTracing0.end(lbool0);
      dotSearchTracing0.start();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("r,10E");
      dotSearchTracing0.assuming(45);
      dotSearchTracing0.backtracking(1081);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DotSearchTracing<CardinalityDataStructureYanMax> dotSearchTracing0 = new DotSearchTracing<CardinalityDataStructureYanMax>("");
      // Undeclared exception!
      try { 
        dotSearchTracing0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("");
      int[] intArray0 = new int[8];
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      // Undeclared exception!
      try { 
        dotSearchTracing0.solutionFound(intArray0, iSolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("");
      // Undeclared exception!
      try { 
        dotSearchTracing0.propagating((-860));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("\" -- \"");
      // Undeclared exception!
      try { 
        dotSearchTracing0.learn((IConstr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("=id7/}WE/K8");
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      CBClause cBClause0 = CBClause.brandNewClause((UnitPropagationListener) null, iLits0, iVecInt0);
      // Undeclared exception!
      try { 
        dotSearchTracing0.enqueueing((-1), cBClause0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("\" [label=\"");
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-1863), 8).when(iVecInt0).get(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        dotSearchTracing0.enqueueing(1205, learntBinaryClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("");
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, eMARestarts0);
      Lbool lbool0 = solver0.truthValue(0);
      // Undeclared exception!
      try { 
        dotSearchTracing0.end(lbool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("\", shape=circle, color=blue, style=filled]");
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt();
      IConstr iConstr0 = product0.addExactly(iSolver0, vecInt0, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        dotSearchTracing0.conflictFound(iConstr0, 3414, 138);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("]-C#r9S*)p;&W");
      // Undeclared exception!
      try { 
        dotSearchTracing0.conflictFound((IConstr) null, (-2124167220), (-1312));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("");
      // Undeclared exception!
      try { 
        dotSearchTracing0.conflictFound(110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("i>:g^kjR!H");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("i>:g^kjR!H");
      // Undeclared exception!
      try { 
        dotSearchTracing0.assuming(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DotSearchTracing", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DotSearchTracing<Solver<CardinalityDataStructureYanMax>> dotSearchTracing0 = null;
      try {
        dotSearchTracing0 = new DotSearchTracing<Solver<CardinalityDataStructureYanMax>>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("|R");
      String string0 = dotSearchTracing0.map(0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("'fz?[k[4fZ6W{fku");
      dotSearchTracing0.enqueueing((-2108510591), (IConstr) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("\t\"null.3167.false\"[label=\"3167\",shape=point, color=black]");
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Constr constr0 = cardinalityDataStructureYanMin0.createUnregisteredClause(iVecInt0);
      dotSearchTracing0.enqueueing(1, constr0);
      dotSearchTracing0.propagating(30);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("~HL O{Ld~/|o6tiUnqF");
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      dotSearchTracing0.setMapping(hashMap0);
      dotSearchTracing0.propagating((-3835));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Constr constr0 = cardinalityDataStructureYanMin0.createUnregisteredClause(iVecInt0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("\t\"null.3167.false\"[label=\"3167\",shape=point, color=black]");
      dotSearchTracing0.learn(constr0);
      assertFalse(constr0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Constr constr0 = cardinalityDataStructureYanMin0.createUnregisteredClause(iVecInt0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("\t\"null.3167.false\"[label=\"3167\",shape=point, color=black]");
      dotSearchTracing0.conflictFound((IConstr) constr0, 0, (-1776));
      assertFalse(constr0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DotSearchTracing<Solver<CardinalityDataStructureYanMax>> dotSearchTracing0 = new DotSearchTracing<Solver<CardinalityDataStructureYanMax>>("~HL O{Ld~/|o6tiUnqF");
      HashMap<Integer, Solver<CardinalityDataStructureYanMax>> hashMap0 = new HashMap<Integer, Solver<CardinalityDataStructureYanMax>>();
      dotSearchTracing0.setMapping(hashMap0);
      String string0 = dotSearchTracing0.map((-2118503445));
      assertEquals("-2118503445", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("KqFEh EVK87Rd50Aill");
      dotSearchTracing0.delete((IConstr) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("r,10E");
      // Undeclared exception!
      try { 
        dotSearchTracing0.backtracking(1081);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("+a CN");
      dotSearchTracing0.adding(61);
      dotSearchTracing0.propagating((-2125137709));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DotSearchTracing<CardinalityDataStructureYanMax> dotSearchTracing0 = new DotSearchTracing<CardinalityDataStructureYanMax>("~HL O{Ld~/|o6tiUnqF");
      dotSearchTracing0.beginLoop();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("org.sat4j.core.VecInt");
      int[] intArray0 = new int[7];
      LightFactory lightFactory0 = new LightFactory();
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      dotSearchTracing0.solutionFound(intArray0, solver0);
      assertEquals(0, solver0.currentDecisionLevel());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("_6;G$WFlO7SQ8Jh5<r");
      dotSearchTracing0.conflictFound((-280));
  }
}
