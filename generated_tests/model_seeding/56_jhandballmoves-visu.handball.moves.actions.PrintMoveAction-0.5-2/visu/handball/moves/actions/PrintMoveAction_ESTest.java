/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 09:44:36 GMT 2019
 */

package visu.handball.moves.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.print.Book;
import java.awt.print.PageFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.model.HandballModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrintMoveAction_ESTest extends PrintMoveAction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      PrintMoveAction printMoveAction0 = new PrintMoveAction(handballModel0);
      Book book0 = new Book();
      PageFormat pageFormat0 = new PageFormat();
      printMoveAction0.fillBook(book0, pageFormat0);
      assertEquals(1, book0.getNumberOfPages());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PrintMoveAction printMoveAction0 = new PrintMoveAction((HandballModel) null);
      Book book0 = new Book();
      PageFormat pageFormat0 = new PageFormat();
      // Undeclared exception!
      try { 
        printMoveAction0.fillBook(book0, pageFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visu.handball.moves.actions.PrintMoveAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HandballModel handballModel0 = mock(HandballModel.class, new ViolatedAssumptionAnswer());
      doReturn(550, 550, 0).when(handballModel0).getHighestSequenceNumber();
      PrintMoveAction printMoveAction0 = new PrintMoveAction(handballModel0);
      Book book0 = mock(Book.class, new ViolatedAssumptionAnswer());
      PageFormat pageFormat0 = mock(PageFormat.class, new ViolatedAssumptionAnswer());
      printMoveAction0.fillBook(book0, pageFormat0);
  }
}
