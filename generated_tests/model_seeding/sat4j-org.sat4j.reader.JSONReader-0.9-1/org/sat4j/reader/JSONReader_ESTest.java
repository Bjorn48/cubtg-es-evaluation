/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 14:30:27 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.reader.JSONReader;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReader_ESTest extends JSONReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      JSONReader<Minimal4CardinalityModel> jSONReader0 = new JSONReader<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      int[] intArray0 = new int[9];
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      jSONReader0.decode(intArray0, printWriter0);
      assertFalse(jSONReader0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReader<SolutionCounter> jSONReader0 = new JSONReader<SolutionCounter>((SolutionCounter) null);
      IVecInt iVecInt0 = jSONReader0.getLiterals("[]");
      assertEquals(0, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      JSONReader<GateTranslator> jSONReader0 = new JSONReader<GateTranslator>(gateTranslator0);
      String string0 = jSONReader0.constraintRegexp();
      assertEquals("((\\[(-?(\\d+)(,-?(\\d+))*)?\\])|(\\[(\\[(-?(\\d+)(,-?(\\d+))*)?\\]),'[=<>]=?',-?\\d+\\]))", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, true);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0, true);
      JSONReader<MaxSatDecorator> jSONReader0 = new JSONReader<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        jSONReader0.parseString("[]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      JSONReader<GroupClauseSelectorSolver<DimacsOutputSolver>> jSONReader0 = new JSONReader<GroupClauseSelectorSolver<DimacsOutputSolver>>(groupClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.parseInstance((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReader<StatisticsSolver> jSONReader0 = new JSONReader<StatisticsSolver>((StatisticsSolver) null);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 80);
      pushbackInputStream0.close();
      try { 
        jSONReader0.parseInstance((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      JSONReader<MaxSatDecorator> jSONReader0 = new JSONReader<MaxSatDecorator>(maxSatDecorator0);
      try { 
        jSONReader0.handleCard("[Z[],'<',0]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ManyCore<MaxSatDecorator> manyCore0 = (ManyCore<MaxSatDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      JSONReader<ManyCore<MaxSatDecorator>> jSONReader0 = new JSONReader<ManyCore<MaxSatDecorator>>(manyCore0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReader<MaxSatDecorator> jSONReader0 = new JSONReader<MaxSatDecorator>((MaxSatDecorator) null);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard(" [[],'J',0u]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONReader<MaxSatDecorator> jSONReader0 = new JSONReader<MaxSatDecorator>((MaxSatDecorator) null);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard("[[]{''I0]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONReader<DimacsOutputSolver> jSONReader0 = new JSONReader<DimacsOutputSolver>((DimacsOutputSolver) null);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals("=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONReader<ModelIteratorToSATAdapter> jSONReader0 = new JSONReader<ModelIteratorToSATAdapter>((ModelIteratorToSATAdapter) null);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals("([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[([(-?(d+)(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReader<AbstractMinimalModel> jSONReader0 = new JSONReader<AbstractMinimalModel>((AbstractMinimalModel) null);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReader<ModelIterator> jSONReader0 = new JSONReader<ModelIterator>((ModelIterator) null);
      // Undeclared exception!
      try { 
        jSONReader0.decode((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReader<MaxSatDecorator> jSONReader0 = new JSONReader<MaxSatDecorator>((MaxSatDecorator) null);
      try { 
        jSONReader0.parseString("([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorWrong input ([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      JSONReader<DimacsOutputSolver> jSONReader0 = new JSONReader<DimacsOutputSolver>(dimacsOutputSolver0);
      ISolver iSolver0 = jSONReader0.parseString("[]");
      assertSame(iSolver0, dimacsOutputSolver0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      byte[] byteArray0 = new byte[5];
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      ModelIterator modelIterator0 = new ModelIterator(minOneDecorator0);
      JSONReader<ModelIterator> jSONReader0 = new JSONReader<ModelIterator>(modelIterator0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      try { 
        jSONReader0.parseInstance((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorWrong input \u0000\u0000\u0000\u0000\u0000
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReader<MaxSatDecorator> jSONReader0 = new JSONReader<MaxSatDecorator>((MaxSatDecorator) null);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard("[Z[],'<',0]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter((ISolver) null, (SolutionFoundListener) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(modelIteratorToSATAdapter0);
      JSONReader<MaxSatDecorator> jSONReader0 = new JSONReader<MaxSatDecorator>(maxSatDecorator0);
      jSONReader0.handleCard("[[],''',0]");
      assertFalse(jSONReader0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      JSONReader<DimacsOutputSolver> jSONReader0 = new JSONReader<DimacsOutputSolver>(dimacsOutputSolver0);
      jSONReader0.handleCard("org.sat4j.minisat.orders.TabuListDecorator");
      assertFalse(jSONReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONReader<SolutionCounter> jSONReader0 = new JSONReader<SolutionCounter>((SolutionCounter) null);
      IVecInt iVecInt0 = jSONReader0.getLiterals("[0]");
      assertEquals(1, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter((ISolver) null, (SolutionFoundListener) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(modelIteratorToSATAdapter0);
      JSONReader<MaxSatDecorator> jSONReader0 = new JSONReader<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        jSONReader0.parseString("[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      JSONReader<DimacsOutputSolver> jSONReader0 = new JSONReader<DimacsOutputSolver>(dimacsOutputSolver0);
      int[] intArray0 = new int[8];
      String string0 = jSONReader0.decode(intArray0);
      assertEquals("[0,0,0,0,0,0,0,0]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONReader<MaxSatDecorator> jSONReader0 = new JSONReader<MaxSatDecorator>((MaxSatDecorator) null);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      // Undeclared exception!
      try { 
        jSONReader0.decode((int[]) null, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      JSONReader<DimacsOutputSolver> jSONReader0 = new JSONReader<DimacsOutputSolver>(dimacsOutputSolver0);
      try { 
        jSONReader0.handleNotHandled((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown constraint: null
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }
}
