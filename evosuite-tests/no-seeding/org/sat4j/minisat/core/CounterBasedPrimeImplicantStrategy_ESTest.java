/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:34:47 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CounterBasedPrimeImplicantStrategy_ESTest extends CounterBasedPrimeImplicantStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, (-3353.975316684));
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(iPhaseSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      solver0.registerLiteral(3757);
      solver0.isSatisfiable(true);
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      counterBasedPrimeImplicantStrategy0.compute(solver0);
      counterBasedPrimeImplicantStrategy0.compute(solver0);
      // Undeclared exception!
      counterBasedPrimeImplicantStrategy0.compute(solver0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.compute((Solver<? extends DataStructureFactory>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, eMARestarts0);
      int[] intArray0 = new int[9];
      intArray0[3] = 769;
      solver0.fullmodel = intArray0;
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.compute(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, noRestarts0);
      solver0.isSatisfiable(false);
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      counterBasedPrimeImplicantStrategy0.compute(solver0);
      int[] intArray0 = counterBasedPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      varOrderHeap0.setPhaseSelectionStrategy(positiveLiteralSelectionStrategy0);
      solver0.registerLiteral(5);
      solver0.isSatisfiable(false);
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      int[] intArray0 = counterBasedPrimeImplicantStrategy0.compute(solver0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the compute method first!
         //
         verifyException("org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy", e);
      }
  }
}
