* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 19342
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550357519873
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.11343804537521815
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.06275579809004093
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.08533333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.03759398496240601
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.1732283464566929
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.14960629921259844
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.04365620736698499
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
[MASTER] 23:52:45.809 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 267
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.1474694589877836
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.0927694406548431
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.104
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07894736842105263
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2677165354330709
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2283464566929134
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.06821282401091405
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 336
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.15968586387434555
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1009549795361528
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.11466666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.08646616541353383
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.29133858267716534
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.07639836289222374
[MASTER] 23:52:59.800 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.core.ReadOnlyVec due to org.evosuite.ga.ConstructionFailedException: Found no variables of type class org.sat4j.minisat.constraints.cnf.Lits
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 401
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.28272251308900526
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17735334242837653
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.176
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.09774436090225563
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3464566929133858
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.29133858267716534
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.11323328785811733
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 465
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 534
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3551483420593368
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2373806275579809
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.264
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.11654135338345864
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4330708661417323
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3543307086614173
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15961800818553887
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 606
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 683
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3726003490401396
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.25375170532060026
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.27066666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19924812030075187
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5118110236220472
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1855388813096862
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 762
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 842
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.38481675392670156
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.27012278308321963
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2866666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.22180451127819548
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5748031496062992
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.23465211459754434
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 914
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 987
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.41710296684118675
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.29740791268758526
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3253333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.24436090225563908
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6535433070866141
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5433070866141733
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.26193724420190995
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1063
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1133
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1206
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1281
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.43804537521815007
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3096862210095498
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.336
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2706766917293233
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7165354330708661
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5984251968503937
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2783083219645293
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1367
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1442
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1515
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1589
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4537521815008726
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32332878581173263
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.36133333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3007518796992481
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8110236220472441
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6614173228346457
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.296043656207367
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1657
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1742
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1819
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1893
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1979
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.456369982547993
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3246930422919509
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.364
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.30451127819548873
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8346456692913385
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6771653543307087
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2987721691678035
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2058
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2135
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2211
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2295
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4650959860383944
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.330150068212824
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.376
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8661417322834646
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7007874015748031
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.3069577080491132
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2376
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2453
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2534
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2613
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.493891797556719
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3451568894952251
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.384
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.33458646616541354
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8976377952755905
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7480314960629921
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.32060027285129605
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2692
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.493891797556719
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3451568894952251
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.384
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8976377952755905
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7480314960629921
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.32060027285129605
* Search finished after 126s and 33 generations, 55616 statements, best individual has fitness: 2241.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.493891797556719
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3451568894952251
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.384
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8976377952755905
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7480314960629921
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.32060027285129605
* Minimizing test suite
[MASTER] 23:55:17.862 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 51%
* Total number of goals: 1146
* Number of covered goals: 588
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 35%
* Total number of goals: 733
* Number of covered goals: 253
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 69
* Number of covered goals: 69
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 40%
* Total number of goals: 750
* Number of covered goals: 300
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 34%
* Total number of goals: 266
* Number of covered goals: 90
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 127
* Number of covered goals: 117
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 75%
* Total number of goals: 127
* Number of covered goals: 95
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 32%
* Total number of goals: 733
* Number of covered goals: 235
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.493891797556719
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3451568894952251
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.384
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8976377952755905
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7480314960629921
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.32060027285129605
* Generated 257 tests with total length 5517
* Resulting test suite's coverage: 57% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:56:14.141 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6672% of time used, but only 50/257 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 7%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.493891797556719
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3451568894952251
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.384
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8976377952755905
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7480314960629921
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.32060027285129605
* Compiling and checking tests
[MASTER] 23:56:40.013 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 23:56:40.024 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 23:56:44.346 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 23:56:44.347 [logback-1] WARN  JUnitAnalyzer - Failing test:
 VarOrderHeap varOrderHeap0 = new VarOrderHeap();
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
LubyRestarts lubyRestarts0 = new LubyRestarts();
lubyRestarts0.onRestart();
ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(32);
VecInt vecInt0 = new VecInt(1140);
vecInt0.pop();
FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(5);
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
SearchParams searchParams0 = new SearchParams();
PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
clausalDataStructureWL0.getVocabulary();
Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0);
solver0.currentDecisionLevel();
Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, lubyRestarts0);
solver1.toString();

[MASTER] 23:56:45.511 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 23:56:45.512 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
randomWalkDecorator0.varDecayActivity();
FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
SearchParams searchParams0 = new SearchParams();
fixedPeriodRestarts0.onRestart();
FileSystemHandling.shouldAllThrowIOExceptions();
PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
clausalDataStructureWL0.getVocabulary();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log("6E.Y7r@{^IEj%]=B)8g");
Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0, mUSLauncher0);
solver0.nextFreeVarId(false);
NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0, mUSLauncher0);
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
VecInt vecInt0 = new VecInt(32, 32);
IVecInt iVecInt0 = vecInt0.pop();
ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, iLits0);
Constr constr0 = learntBinaryClause0.toConstraint();
constr0.size();
learntBinaryClause0.size();
solver1.findModel((IVecInt) vecInt0);
constr0.get(2593);
learntBinaryClause0.size();
solver1.record(constr0);

[MASTER] 23:56:47.746 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 23:56:47.747 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
SearchParams searchParams0 = new SearchParams();
NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
ILits iLits0 = cardinalityDataStructure0.getVocabulary();
iLits0.getReason(0);
iLits0.getReason(0);
iLits0.getLevel(0);
iLits0.getLevel(0);
iLits0.unassign(0);
iLits0.isUnassigned(195);
iLits0.watches(18);
FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(18);
CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
SearchParams searchParams1 = new SearchParams(18, 195, 0, 0);
PureOrder pureOrder0 = new PureOrder();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 0);
MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax1, searchParams1, tabuListDecorator0, miniSATRestarts0);
solver0.sortOnActivity();
solver0.getVocabulary();
assertEquals(2, solver0.nVars());

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
MUSLauncher mUSLauncher0 = new MUSLauncher();
Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams1, tabuListDecorator0, miniSATRestarts0, mUSLauncher0);
IVecInt iVecInt0 = solver1.createBlockingClauseForCurrentModel();
Xor xor0 = new Xor(iVecInt0, true, iLits0);
NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics1, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, miniSATRestarts0, mUSLauncher0);
MUSLauncher mUSLauncher1 = new MUSLauncher();
solver0.setRestartStrategy(miniSATRestarts0);
solver0.nVars();
PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-880));
Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams1, naturalStaticOrder0, miniSATRestarts0);
solver3.unset(0);
assertEquals(2147483, solver3.getTimeout());


[MASTER] 23:56:48.701 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 23:56:48.702 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
SearchParams searchParams0 = new SearchParams(0);
Integer integer0 = new Integer(0);
int[] intArray0 = new int[2];
intArray0[0] = (-26);
intArray0[1] = (-26);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(0);
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
solver0.simplifyDB();
MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, (RestartStrategy) null);
solver1.setLearnedConstraintsDeletionStrategy(solver0.activity_based_low_memory);

[MASTER] 23:56:51.979 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 23:56:51.980 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder();
int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, glucose21Restarts0);
solver0.expireTimeout();
solver0.toString();

[MASTER] 23:56:55.158 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 23:56:55.158 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-1824.3048));
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
int int0 = (-897);
varOrderHeap0.assignLiteral((-897));
LubyRestarts lubyRestarts0 = new LubyRestarts();
lubyRestarts0.onRestart();
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, lubyRestarts0);
solver0.reduceDB();

[MASTER] 23:56:58.251 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:56:58.266 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

SearchParams searchParams0 = new SearchParams((-141), (-141));
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-141), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

glucose21Restarts0.onRestart();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
assertFalse(boolean0);

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-141));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-141), lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-141), lubyRestarts0.getFactor());
assertEquals((-141L), lubyRestarts0.nextRestartNumberOfConflict());

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-141), lubyRestarts0.getFactor());
assertEquals((-141L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

boolean boolean1 = vecInt0.isEmpty();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);

VecInt vecInt1 = (VecInt)vecInt0.push(5);
assertFalse(vecInt1.isEmpty());
assertEquals(1, vecInt1.size());
assertEquals(5, vecInt1.last());
assertEquals(5, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertSame(vecInt1, vecInt0);
assertSame(vecInt0, vecInt1);
assertNotNull(vecInt1);

boolean boolean2 = solver0.isSatisfiable((IVecInt) vecInt0, true);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-141), lubyRestarts0.getFactor());
assertEquals((-141L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(6, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(7, solver0.newVar());
assertEquals(6, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(5, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertSame(vecInt0, vecInt1);
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

vecInt1.pushAll(vecInt0);
assertFalse(vecInt1.isEmpty());
assertEquals(5, vecInt1.last());
assertEquals(2, vecInt1.size());
assertEquals(5, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(2, vecInt0.size());
assertSame(vecInt1, vecInt0);
assertSame(vecInt0, vecInt1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(cardinalityDataStructureYanMax1);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(32);
assertEquals(32, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

Lbool lbool0 = solver0.truthValue(32);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("U", lbool0.toString());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-141), lubyRestarts0.getFactor());
assertEquals((-141L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(8, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(9, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(8, solver0.realNumberOfVariables());
assertNotNull(lbool0);

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(5);
assertEquals(0, activeLearning0.getLimit());
assertEquals(5.0, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-141), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(5.0, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-141), lubyRestarts0.getFactor());
assertEquals((-141L), lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver1);

VecInt vecInt2 = (VecInt)solver1.dimacs2internal(vecInt1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(vecInt1.isEmpty());
assertEquals(5, vecInt1.last());
assertEquals(2, vecInt1.size());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-141), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(5.0, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(6, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(6, solver1.realNumberOfVariables());
assertEquals(7, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-141), lubyRestarts0.getFactor());
assertEquals((-141L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2, vecInt2.size());
assertEquals(10, vecInt2.last());
assertFalse(vecInt2.isEmpty());
assertEquals(5, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(2, vecInt0.size());
assertNotSame(vecInt1, vecInt2);
assertSame(vecInt1, vecInt0);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt2);
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));
assertNotNull(vecInt2);

ISimplifier iSimplifier0 = solver1.getSimplifier();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-141), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(5.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(8, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(8, solver1.realNumberOfVariables());
assertEquals(9, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-141), lubyRestarts0.getFactor());
assertEquals((-141L), lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(iSimplifier0);


[MASTER] 23:56:58.567 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 23:56:58.572 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureDanielHT> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielHT>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());

lubyRestarts0.setFactor(1399);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1399, lubyRestarts0.getFactor());

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams(32, 32);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts1 = new LubyRestarts((-533));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-533), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertNotNull(lubyRestarts1);

searchParams0.setConflictBoundIncFactor(2618.0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(2618.0, searchParams0.getConflictBoundIncFactor(), 0.01);

ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("6E.Y7r@{^IEj%]=B)8g");
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1399, lubyRestarts0.getFactor());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertNotNull(solver0);

int int0 = 3249;
Vec<IVecInt> vec0 = new Vec<IVecInt>(3249);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertNotNull(vec0);

solver0.addAllClauses(vec0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1399, lubyRestarts0.getFactor());
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotSame(lubyRestarts0, lubyRestarts1);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));

solver0.model(0);

[MASTER] 23:56:58.892 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:56:58.895 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

SearchParams searchParams1 = new SearchParams();
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver0);

boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

int[] intArray0 = new int[6];
int int0 = (-944);
intArray0[0] = (-944);
intArray0[1] = 1064;
intArray0[2] = (-1180);
intArray0[3] = 1046;
intArray0[4] = 45;
intArray0[5] = 2987;
solver0.addAtMostOnTheFly(intArray0, (-1180));

[MASTER] 23:56:59.231 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:56:59.234 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, fixedPeriodRestarts0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(solver0);

solver0.unset(0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>((-1273));
assertEquals((-1273), fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL0, tabuListDecorator0, fixedPeriodRestarts0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals((-1273), fixedLengthLearning1.getMaxLength());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertNotNull(solver1);

boolean boolean0 = solver1.isDBSimplificationAllowed();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals((-1273), fixedLengthLearning1.getMaxLength());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertFalse(boolean0);


[MASTER] 23:56:59.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 23:56:59.550 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-3217));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-3217), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

SubsetVarOrder subsetVarOrder1 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));
assertNotNull(subsetVarOrder1);

searchParams0.setConflictBoundIncFactor(2618.0);
assertEquals(2618.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-3217), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("6E.Y7r@{^IEj%]=B)8g");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

LubyRestarts lubyRestarts0 = new LubyRestarts((-2127));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(boolean0);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-2127L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, tabuListDecorator0, lubyRestarts0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-2127L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(subsetVarOrder0.equals((Object)subsetVarOrder1));
assertNotNull(solver0);

Vec<IVecInt> vec0 = new Vec<IVecInt>(57);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertNotNull(vec0);

solver0.addAllClauses(vec0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-2127L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotSame(subsetVarOrder0, subsetVarOrder1);
assertFalse(subsetVarOrder0.equals((Object)subsetVarOrder1));

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(32);
assertEquals(32, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

boolean boolean1 = arminRestarts0.shouldRestart();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);

arminRestarts0.onBackjumpToRootLevel();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer((Solver<? extends DataStructureFactory>) null, 1326);
assertEquals(1326, lBDConflictTimer0.bound());
assertNotNull(lBDConflictTimer0);

Solver<? extends DataStructureFactory> solver1 = lBDConflictTimer0.getSolver();
assertEquals(1326, lBDConflictTimer0.bound());
assertNull(solver1);

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, subsetVarOrder1, arminRestarts0, mUSLauncher0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(2618.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-3217), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, percentLengthLearning0.getLimit());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));
assertNotNull(solver2);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.clone();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);

boolean boolean2 = iVecInt0.isEmpty();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2);

IVecInt iVecInt1 = iVecInt0.push(0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt1.isEmpty());
assertEquals(1, iVecInt1.size());
assertEquals(0, iVecInt1.last());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertNotSame(iVecInt0, vecInt0);
assertSame(iVecInt0, iVecInt1);
assertSame(iVecInt1, iVecInt0);
assertNotSame(iVecInt1, vecInt0);
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(iVecInt1.equals((Object)vecInt0));
assertNotNull(iVecInt1);

solver2.addParity(iVecInt1, true);

[MASTER] 23:56:59.946 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:56:59.950 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-1465));
assertEquals((-1465), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

SearchParams searchParams0 = new SearchParams(1844.661653, 0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1844.661653, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

MockPrintStream mockPrintStream0 = new MockPrintStream("[dpG");
assertNotNull(mockPrintStream0);

Locale locale0 = Locale.SIMPLIFIED_CHINESE;
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("CN", locale0.getCountry());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_CN", locale0.toString());
assertEquals("", locale0.getVariant());
assertNotNull(locale0);

Object[] objectArray0 = new Object[0];
PrintStream printStream0 = mockPrintStream0.format(locale0, "[dpG", objectArray0);
assertEquals(0, objectArray0.length);
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("CN", locale0.getCountry());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_CN", locale0.toString());
assertEquals("", locale0.getVariant());
assertSame(mockPrintStream0, printStream0);
assertSame(printStream0, mockPrintStream0);
assertNotNull(printStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
assertEquals(0, objectArray0.length);
assertNotNull(mockPrintWriter0);

byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte) (-65);
byteArray0[1] = (byte) (-62);
byteArray0[2] = (byte) (-1);
byteArray0[3] = (byte)42;
printStream0.write(byteArray0, (-294), (int) (byte) (-62));
assertArrayEquals(new byte[] {(byte) (-65), (byte) (-62), (byte) (-1), (byte)42}, byteArray0);
assertEquals(0, objectArray0.length);
assertEquals(4, byteArray0.length);
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("CN", locale0.getCountry());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_CN", locale0.toString());
assertEquals("", locale0.getVariant());
assertSame(mockPrintStream0, printStream0);
assertSame(printStream0, mockPrintStream0);

pureOrder0.printStat(mockPrintWriter0, "");
assertEquals(0, objectArray0.length);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("CN", locale0.getCountry());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_CN", locale0.toString());
assertEquals("", locale0.getVariant());
assertSame(mockPrintStream0, printStream0);
assertSame(printStream0, mockPrintStream0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(32);
assertEquals(32, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, searchParams0, pureOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1844.661653, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(32, percentLengthLearning1.getLimit());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

int[] intArray0 = new int[7];
intArray0[0] = 32;
intArray0[1] = (-1465);
intArray0[2] = 0;
intArray0[3] = 128;
intArray0[4] = 0;
intArray0[5] = (-1465);
intArray0[6] = 0;
solver0.addAtMostOnTheFly(intArray0, 2);

[MASTER] 23:57:00.209 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:00.212 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, subsetVarOrder0, glucose21Restarts0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

cardinalityDataStructureYanMin0.setUnitPropagationListener(solver0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());

solver0.backtrack(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());

String string0 = solver0.getLogPrefix();
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(string0);
assertEquals("c ", string0);


[MASTER] 23:57:00.482 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:00.483 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.pop();
assertEquals((-1), vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertFalse(iVecInt0.isEmpty());
assertEquals((-1), iVecInt0.size());
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertNotNull(iVecInt0);

solver0.discardCurrentModel();

[MASTER] 23:57:00.736 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:00.738 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

int[] intArray0 = new int[5];
intArray0[0] = 913;
intArray0[1] = 3;
intArray0[2] = (-3581);
intArray0[3] = 398;
intArray0[4] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

SearchParams searchParams0 = new SearchParams(1844.661653, 0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1844.661653, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, glucose21Restarts0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

solver0.backtrack(intArray0);

[MASTER] 23:57:01.022 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:01.023 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(57);
assertEquals(57, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
assertNull(doubleArray0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, fixedPeriodRestarts0);
assertEquals(57, fixedLengthLearning0.getMaxLength());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

solver0.cancelUntil(57);
assertEquals(57, fixedLengthLearning0.getMaxLength());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());


[MASTER] 23:57:01.346 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:01.349 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, int0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

varOrderHeap0.assignLiteral((-897));
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

boolean boolean0 = arminRestarts0.shouldRestart();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(boolean0);

arminRestarts0.onBackjumpToRootLevel();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());

int int1 = 1326;
LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer((Solver<? extends DataStructureFactory>) null, 1326);
assertEquals(1326, lBDConflictTimer0.bound());
assertNotNull(lBDConflictTimer0);

Solver<? extends DataStructureFactory> solver0 = lBDConflictTimer0.getSolver();
assertEquals(1326, lBDConflictTimer0.bound());
assertNull(solver0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(learningStrategy0, clausalDataStructureWL0, searchParams0, varOrderHeap0, arminRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertNotNull(solver1);

solver1.setLogPrefix(") exceeded");
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(") exceeded", solver1.getLogPrefix());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());

LearningStrategy<MixedDataStructureDanielWL> learningStrategy1 = (LearningStrategy<MixedDataStructureDanielWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("6E.Y7r@{^IEj%]=B)8g");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(learningStrategy1, (MixedDataStructureDanielWL) null, searchParams0, varOrderHeap0, arminRestarts0, mUSLauncher0);

[MASTER] 23:57:01.643 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:01.654 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-1));
assertEquals((-1), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams((-1.0), 2191.798389062, 0.0, (-2631));
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals((-2631), int0);

int int1 = searchParams0.getInitConflictBound();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertTrue(int1 == int0);
assertEquals((-2631), int1);

int int2 = searchParams0.getInitConflictBound();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertTrue(int2 == int1);
assertTrue(int2 == int0);
assertEquals((-2631), int2);

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(double1, double0, 0.01);
assertEquals(0.0, double1, 0.01);

int[] intArray0 = new int[5];
intArray0[0] = 913;
intArray0[1] = 3;
intArray0[2] = (-3581);
intArray0[3] = 398;
intArray0[4] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-2127));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2127), lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(boolean0);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2127), lubyRestarts0.getFactor());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("6E.Y7r@{^IEj%]=B)8g");
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, lubyRestarts0, mUSLauncher0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals((-1), percentLengthLearning0.getLimit());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver0);

boolean boolean1 = solver0.simplifyDB();
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals((-1), percentLengthLearning0.getLimit());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>(3669);
assertEquals(3669, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(3669, percentLengthLearning1.getLimit());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver1);

String string0 = solver1.getLogPrefix();
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(3669, percentLengthLearning1.getLimit());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(string0);
assertEquals("c ", string0);


[MASTER] 23:57:02.027 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:02.031 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1000.0);
assertEquals(1000.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

double[] doubleArray0 = new double[5];
doubleArray0[0] = 1000.0;
doubleArray0[1] = 1000.0;
doubleArray0[2] = 1000.0;
doubleArray0[3] = 1000.0;
doubleArray0[4] = 1000.0;
VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
assertArrayEquals(new double[] {1000.0, 1000.0, 1000.0, 1000.0, 1000.0}, doubleArray0, 0.01);
assertEquals(5, doubleArray0.length);
assertNotNull(tabuListDecorator0);

double[] doubleArray1 = tabuListDecorator0.getVariableHeuristics();
assertArrayEquals(new double[] {1000.0, 1000.0, 1000.0, 1000.0, 1000.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {1000.0, 1000.0, 1000.0, 1000.0, 1000.0}, doubleArray1, 0.01);
assertEquals(5, doubleArray0.length);
assertEquals(5, doubleArray1.length);
assertSame(doubleArray0, doubleArray1);
assertSame(doubleArray1, doubleArray0);
assertNotNull(doubleArray1);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

SearchParams searchParams0 = new SearchParams(1844.661653, 0);
assertEquals(1844.661653, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ASolverFactory<Solver<ClausalDataStructureWL>> aSolverFactory0 = (ASolverFactory<Solver<ClausalDataStructureWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
BasicLauncher<Solver<ClausalDataStructureWL>> basicLauncher0 = new BasicLauncher<Solver<ClausalDataStructureWL>>(aSolverFactory0);
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertNotNull(basicLauncher0);

basicLauncher0.log("wt;w5rC");
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, glucose21Restarts0, basicLauncher0);
assertArrayEquals(new double[] {1000.0, 1000.0, 1000.0, 1000.0, 1000.0}, doubleArray0, 0.01);
assertEquals(5, doubleArray0.length);
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(1844.661653, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(solver0);

SearchParams searchParams1 = solver0.getSearchParams();
assertArrayEquals(new double[] {1000.0, 1000.0, 1000.0, 1000.0, 1000.0}, doubleArray0, 0.01);
assertEquals(5, doubleArray0.length);
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1844.661653, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(1844.661653, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertSame(doubleArray0, doubleArray1);
assertSame(searchParams1, searchParams0);
assertSame(searchParams0, searchParams1);
assertNotNull(searchParams1);


[MASTER] 23:57:02.342 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:02.345 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("6E.Y7r@{^IEj%]=B)8g");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("org.sat4j.minisat.core.Solver");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams0 = new SearchParams(3, (-2058));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2058), searchParams0.getInitConflictBound());
assertEquals(3.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2058), searchParams0.getInitConflictBound());
assertEquals(3.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, double0, 0.01);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, glucose21Restarts0, mUSLauncher0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2058), searchParams0.getInitConflictBound());
assertEquals(3.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

solver0.primeImplicant();

[MASTER] 23:57:02.693 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:02.719 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ILits iLits0 = cardinalityDataStructure0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

Constr constr0 = iLits0.getReason(0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNull(constr0);

Constr constr1 = iLits0.getReason(0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNull(constr1);

int int0 = iLits0.getLevel(0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertEquals(0, int0);

int int1 = iLits0.getLevel(0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertTrue(int1 == int0);
assertEquals(0, int1);

iLits0.unassign(2);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

boolean boolean0 = iLits0.isUnassigned(195);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertTrue(boolean0);

IVec<Propagatable> iVec0 = iLits0.watches(18);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNull(iVec0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(18);
assertEquals(18, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(cardinalityDataStructureYanMax1);

SearchParams searchParams1 = new SearchParams(18, 195, 0, 0);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);

PureOrder pureOrder0 = new PureOrder();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 2);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(tabuListDecorator0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax1, searchParams1, tabuListDecorator0, miniSATRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(18, fixedLengthLearning0.getMaxLength());
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(solver0);

solver0.sortOnActivity();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(18, fixedLengthLearning0.getMaxLength());
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
assertNotSame(searchParams1, searchParams0);
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertFalse(searchParams1.equals((Object)searchParams0));

ILits iLits1 = solver0.getVocabulary();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.nVars());
assertEquals(5, iLits1.nVars());
assertEquals(0, iLits1.realnVars());
assertEquals(18, fixedLengthLearning0.getMaxLength());
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertNotSame(iLits1, iLits0);
assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
assertNotSame(searchParams1, searchParams0);
assertFalse(iLits1.equals((Object)iLits0));
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(iLits1);

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams1, tabuListDecorator0, miniSATRestarts0, mUSLauncher0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(solver1);

IVecInt iVecInt0 = solver1.createBlockingClauseForCurrentModel();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(iVecInt0);

Xor xor0 = new Xor(iVecInt0, true, iLits0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(5, solver1.nVars());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertFalse(xor0.learnt());
assertFalse(xor0.simplify());
assertTrue(xor0.canBeSatisfiedByCountingLiterals());
assertEquals(0, xor0.size());
assertFalse(xor0.canBePropagatedMultipleTimes());
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertFalse(iLits0.equals((Object)iLits1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(xor0);

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics1, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, miniSATRestarts0, mUSLauncher0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.nConstraints());
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver2);

UnitClauses unitClauses0 = (UnitClauses)solver2.addAtMost(iVecInt0, 0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(7, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(8, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.nConstraints());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertTrue(unitClauses0.isSatisfied());
assertFalse(unitClauses0.simplify());
assertFalse(unitClauses0.canBePropagatedMultipleTimes());
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(unitClauses0);

iLits1.watch(0, xor0);

[MASTER] 23:57:03.026 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:03.028 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

int[] intArray0 = new int[2];
intArray0[0] = (-26);
intArray0[1] = (-26);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {(-26), (-26)}, intArray0);
assertEquals(2, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {(-26), (-26)}, intArray0);
assertEquals(2, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

boolean boolean0 = vecInt0.isEmpty();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(boolean0);

IVecInt iVecInt0 = vecInt0.push(7);
assertEquals(7, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertEquals(1, iVecInt0.size());
assertEquals(7, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertNotNull(iVecInt0);

ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

RestartStrategy restartStrategy0 = null;
ASolverFactory<Solver<ClausalDataStructureWL>> aSolverFactory0 = (ASolverFactory<Solver<ClausalDataStructureWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
BasicLauncher<Solver<ClausalDataStructureWL>> basicLauncher0 = new BasicLauncher<Solver<ClausalDataStructureWL>>(aSolverFactory0);
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertNotNull(basicLauncher0);

basicLauncher0.log("wt;w5rC");
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, (RestartStrategy) null, basicLauncher0);
assertArrayEquals(new int[] {(-26), (-26)}, intArray0);
assertEquals(2, intArray0.length);
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertNotNull(solver0);

solver0.isSatisfiable((IVecInt) vecInt0, true);

[MASTER] 23:57:03.363 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:03.371 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("c ");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0, mUSLauncher0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0, mUSLauncher0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertNotNull(solver1);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

VecInt vecInt0 = new VecInt(32, 32);
assertEquals(32, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(32, vecInt0.size());
assertNotNull(vecInt0);

ILits iLits1 = mock(ILits.class, new ViolatedAssumptionAnswer());
LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits1);
assertEquals(32, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(32, vecInt0.size());
assertFalse(learntBinaryClause0.isSatisfied());
assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
assertFalse(learntBinaryClause0.simplify());
assertTrue(learntBinaryClause0.learnt());
assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
assertEquals(2, learntBinaryClause0.size());
assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(learntBinaryClause0.locked());
assertNotNull(learntBinaryClause0);

Constr constr0 = learntBinaryClause0.toConstraint();
assertEquals(32, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(32, vecInt0.size());
assertFalse(learntBinaryClause0.isSatisfied());
assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
assertFalse(learntBinaryClause0.simplify());
assertTrue(learntBinaryClause0.learnt());
assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
assertEquals(2, learntBinaryClause0.size());
assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(learntBinaryClause0.locked());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertFalse(constr0.simplify());
assertEquals(2, constr0.size());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertFalse(constr0.locked());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertTrue(constr0.learnt());
assertFalse(constr0.isSatisfied());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertSame(learntBinaryClause0, constr0);
assertSame(constr0, learntBinaryClause0);
assertNotNull(constr0);

Integer integer0 = new Integer(32);
assertNotNull(integer0);
assertEquals(32, (int)integer0);

int[] intArray0 = solver1.findModel((IVecInt) vecInt0);
assertArrayEquals(new int[] {32}, intArray0);
assertEquals(1, intArray0.length);
assertEquals(32, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(32, vecInt0.size());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(33, solver1.realNumberOfVariables());
assertEquals(34, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(33, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertNotNull(intArray0);

Integer integer1 = new Integer(32);
assertTrue(integer1.equals((Object)integer0));
assertNotNull(integer1);
assertEquals(32, (int)integer1);

solver1.record(constr0);

[MASTER] 23:57:03.639 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 23:57:03.653 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-1));
assertEquals((-1), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams((-1.0), 2191.798389062, 0.0, (-2631));
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2631), int0);

int int1 = searchParams0.getInitConflictBound();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertTrue(int1 == int0);
assertEquals((-2631), int1);

int int2 = searchParams0.getInitConflictBound();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals((-2631), int2);

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(double1, double0, 0.01);
assertEquals(0.0, double1, 0.01);

int[] intArray0 = new int[5];
intArray0[0] = 913;
intArray0[1] = 3;
intArray0[2] = (-3581);
intArray0[3] = 398;
intArray0[4] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-2127));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(boolean0);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("6E.Y7r@{^IEj%]=B)8g");
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, lubyRestarts0, mUSLauncher0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1), percentLengthLearning0.getLimit());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver0);

solver0.undertimeout = true;
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1), percentLengthLearning0.getLimit());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

boolean boolean1 = solver0.simplifyDB();
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1), percentLengthLearning0.getLimit());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);

ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver1);

IVec<Constr> iVec0 = solver1.getLearnedConstraints();
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, iVec0.size());
assertTrue(iVec0.isEmpty());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(iVec0);


[MASTER] 23:57:04.774 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:04.775 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

int[] intArray0 = new int[1];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {0}, intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {0}, intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, glucose21Restarts0);
assertArrayEquals(new int[] {0}, intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

solver0.backtrack(intArray0);

[MASTER] 23:57:05.163 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:05.167 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-1.0), 2191.798389062, 0.0, (-2631));
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), int0);

int int1 = searchParams0.getInitConflictBound();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertTrue(int1 == int0);
assertEquals((-2631), int1);

int int2 = searchParams0.getInitConflictBound();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals((-2631), int2);

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals(double1, double0, 0.01);
assertEquals(0.0, double1, 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

solver0.setLearningStrategy(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());


[MASTER] 23:57:05.475 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:05.484 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-1.0));
assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, fixedPeriodRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

int[] intArray0 = new int[1];
intArray0[0] = (-12);
UnitClause unitClause0 = (UnitClause)solver0.addClauseOnTheFly(intArray0);
assertArrayEquals(new int[] {(-12)}, intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertNotNull(unitClause0);

VecInt vecInt0 = new VecInt(5578);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

VecInt vecInt1 = (VecInt)vecInt0.pop();
assertFalse(vecInt0.isEmpty());
assertEquals((-1), vecInt0.size());
assertFalse(vecInt1.isEmpty());
assertEquals((-1), vecInt1.size());
assertSame(vecInt0, vecInt1);
assertSame(vecInt1, vecInt0);
assertNotNull(vecInt1);

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertTrue(boolean0);

int int0 = (-2127);
LubyRestarts lubyRestarts1 = new LubyRestarts((-2127));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals((-2127), lubyRestarts1.getFactor());
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertNotNull(lubyRestarts1);

boolean boolean1 = lubyRestarts1.shouldRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals((-2127), lubyRestarts1.getFactor());
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);

lubyRestarts1.onBackjumpToRootLevel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals((-2127), lubyRestarts1.getFactor());
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals((-2127), lubyRestarts1.getFactor());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertNotNull(solver1);

solver1.model();

[MASTER] 23:57:05.901 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:05.926 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(doubleArray0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, fixedPeriodRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

solver0.decayActivities();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);

solver1.setKeepSolverHot(false);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, iVecInt0.size());
assertEquals((-4), iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertNotNull(iVecInt0);

UnitClauses unitClauses0 = (UnitClauses)solver1.addAtMost(iVecInt0, 0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(7, solver0.nVars());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(4, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.nConstraints());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(4, iVecInt0.size());
assertEquals((-4), iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertFalse(unitClauses0.canBePropagatedMultipleTimes());
assertFalse(unitClauses0.simplify());
assertTrue(unitClauses0.isSatisfied());
assertNotNull(unitClauses0);

ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>();
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertNotNull(activeLearning1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2147483, solver2.getTimeout());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(solver2);

UnitClauses unitClauses1 = (UnitClauses)solver2.addAtLeast(iVecInt0, 0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(4, iVecInt0.size());
assertEquals((-4), iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(2147483, solver2.getTimeout());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertEquals(6, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nConstraints());
assertEquals(5, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(unitClauses1.simplify());
assertTrue(unitClauses1.isSatisfied());
assertFalse(unitClauses1.canBePropagatedMultipleTimes());
assertNotSame(unitClauses1, unitClauses0);
assertFalse(unitClauses1.equals((Object)unitClauses0));
assertNotNull(unitClauses1);

TabuListDecorator tabuListDecorator1 = (TabuListDecorator)solver1.getOrder();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(4, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(7, solver1.nVars());
assertEquals(1, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(8, solver1.newVar());
assertEquals(7, solver1.realNumberOfVariables());
assertSame(tabuListDecorator0, tabuListDecorator1);
assertSame(tabuListDecorator1, tabuListDecorator0);
assertNotNull(tabuListDecorator1);


[MASTER] 23:57:06.254 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:06.284 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

boolean boolean0 = arminRestarts0.shouldRestart();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(boolean0);

arminRestarts0.onBackjumpToRootLevel();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());

LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer((Solver<? extends DataStructureFactory>) null, 1326);
assertEquals(1326, lBDConflictTimer0.bound());
assertNotNull(lBDConflictTimer0);

Solver<? extends DataStructureFactory> solver0 = lBDConflictTimer0.getSolver();
assertEquals(1326, lBDConflictTimer0.bound());
assertNull(solver0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, pureOrder0, arminRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertNotNull(solver1);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

boolean boolean1 = vecInt0.isEmpty();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);

IVecInt iVecInt0 = vecInt0.push((-656));
assertEquals((-656), vecInt0.last());
assertEquals(1, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals((-656), iVecInt0.last());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertNotNull(iVecInt0);

boolean boolean2 = solver1.isSatisfiable((IVecInt) vecInt0, true);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(100L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(657, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(657, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(658, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals((-656), vecInt0.last());
assertEquals(1, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertSame(vecInt0, iVecInt0);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

Lbool lbool0 = Lbool.FALSE;
assertEquals("F", lbool0.toString());
assertNotNull(lbool0);


[MASTER] 23:57:06.593 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:06.595 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

boolean boolean0 = arminRestarts0.shouldRestart();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(boolean0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, arminRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, arminRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertNotNull(solver1);

solver1.findModel((IVecInt) null);

[MASTER] 23:57:07.172 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 23:57:07.214 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ILits iLits0 = cardinalityDataStructure0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

Constr constr0 = iLits0.getReason(0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNull(constr0);

Constr constr1 = iLits0.getReason(0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNull(constr1);

int int0 = iLits0.getLevel(0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertEquals(0, int0);

int int1 = iLits0.getLevel(0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertTrue(int1 == int0);
assertEquals(0, int1);

iLits0.unassign(2);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(18);
assertEquals(18, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(cardinalityDataStructureYanMax1);

SearchParams searchParams1 = new SearchParams(18, 195, 0, 0);
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);

PureOrder pureOrder0 = new PureOrder();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 2);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(tabuListDecorator0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertNotNull(miniSATRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax1, searchParams1, tabuListDecorator0, miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(18, fixedLengthLearning0.getMaxLength());
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(solver0);

solver0.sortOnActivity();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(18, fixedLengthLearning0.getMaxLength());
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
assertNotSame(searchParams1, searchParams0);
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertFalse(searchParams1.equals((Object)searchParams0));

ILits iLits1 = solver0.getVocabulary();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(6, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, iLits1.nVars());
assertEquals(0, iLits1.realnVars());
assertEquals(18, fixedLengthLearning0.getMaxLength());
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotSame(iLits1, iLits0);
assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
assertNotSame(searchParams1, searchParams0);
assertFalse(iLits1.equals((Object)iLits0));
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(iLits1);

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams1, tabuListDecorator0, miniSATRestarts0, mUSLauncher0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(solver1);

IVecInt iVecInt0 = solver1.createBlockingClauseForCurrentModel();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(iVecInt0);

Xor xor0 = new Xor(iVecInt0, true, iLits0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertTrue(xor0.canBeSatisfiedByCountingLiterals());
assertFalse(xor0.learnt());
assertEquals(0, xor0.size());
assertFalse(xor0.canBePropagatedMultipleTimes());
assertFalse(xor0.simplify());
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(iLits0.equals((Object)iLits1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(xor0);

iLits0.ensurePool(0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotSame(iLits0, iLits1);
assertFalse(iLits0.equals((Object)iLits1));

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics1);

iVecInt0.insertFirst(2);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(7, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(8, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(2, iVecInt0.last());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics1, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, miniSATRestarts0, mUSLauncher0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver2);

UnitClauses unitClauses0 = (UnitClauses)solver2.addAtMost(iVecInt0, 0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(195.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(18.0, searchParams1.getVarDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertEquals(9, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(10, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(9, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(2, iVecInt0.last());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals(3, solver2.nVars());
assertEquals(1, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(4, solver2.newVar());
assertFalse(unitClauses0.simplify());
assertFalse(unitClauses0.canBePropagatedMultipleTimes());
assertTrue(unitClauses0.isSatisfied());
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(unitClauses0);

NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics2 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningButHeuristics2);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver3 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics2, mixedDataStructureSingleWL0, tabuListDecorator0, miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isSolverKeptHot());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.nConstraints());
assertEquals(2, solver3.newVar());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(solver3);

MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver3.getRestartStrategy();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(4, solver3.newVar());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(3, solver3.nVars());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertSame(miniSATRestarts0, miniSATRestarts1);
assertSame(miniSATRestarts1, miniSATRestarts0);
assertNotNull(miniSATRestarts1);


[MASTER] 23:57:07.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 23:57:07.544 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

searchParams0.setConflictBoundIncFactor(2.0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(2.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, glucose21Restarts0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(2.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(2.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, subsetVarOrder0, glucose21Restarts0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertNotNull(solver1);

solver1.toString("");

[MASTER] 23:57:07.883 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:07.891 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielHT mixedDataStructureDanielHT0 = mock(MixedDataStructureDanielHT.class, new ViolatedAssumptionAnswer());
int[] intArray0 = new int[5];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0, int0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, double0, 0.01);

int int1 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertTrue(int1 == int0);
assertEquals(0, int1);

int int2 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertTrue(int2 == int1);
assertTrue(int2 == int0);
assertEquals(0, int2);

int int3 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertTrue(int3 == int2);
assertTrue(int3 == int1);
assertTrue(int3 == int0);
assertEquals(0, int3);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(5, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("6E.Y7r@{^IEj%]=B)8g");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertNotNull(mixedDataStructureDanielHT1);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT1, searchParams0, subsetVarOrder0, lubyRestarts0, mUSLauncher0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertNotNull(solver0);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);

IVecInt iVecInt1 = iVecInt0.push(0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(1, iVecInt0.size());
assertEquals(0, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(1, iVecInt1.size());
assertFalse(iVecInt1.isEmpty());
assertEquals(0, iVecInt1.last());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertSame(iVecInt0, iVecInt1);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(iVecInt1, vecInt0);
assertSame(iVecInt1, iVecInt0);
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(iVecInt1.equals((Object)vecInt0));
assertNotNull(iVecInt1);

Set<Integer> set0 = solver0.fromLastDecisionLevel(iVecInt0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(1, iVecInt0.size());
assertEquals(0, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1, set0.size());
assertFalse(set0.isEmpty());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertSame(iVecInt0, iVecInt1);
assertNotSame(iVecInt0, vecInt0);
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(vecInt0.equals((Object)iVecInt1));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertNotNull(set0);
assertTrue(set0.contains(int2));


[MASTER] 23:57:08.292 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:08.313 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(0.0, (-2631));
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), int0);

int int1 = searchParams0.getInitConflictBound();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertTrue(int1 == int0);
assertEquals((-2631), int1);

int int2 = searchParams0.getInitConflictBound();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertTrue(int2 == int1);
assertTrue(int2 == int0);
assertEquals((-2631), int2);

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(double1, double0, 0.01);
assertEquals(0.0, double1, 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn("").when(varOrderHeap0).toString();
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

boolean boolean0 = arminRestarts0.shouldRestart();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(boolean0);

arminRestarts0.onBackjumpToRootLevel();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

ASolverFactory<Solver<ClausalDataStructureWL>> aSolverFactory0 = (ASolverFactory<Solver<ClausalDataStructureWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
BasicLauncher<Solver<ClausalDataStructureWL>> basicLauncher0 = new BasicLauncher<Solver<ClausalDataStructureWL>>(aSolverFactory0);
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertNotNull(basicLauncher0);

basicLauncher0.log("wt;w5rC");
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, arminRestarts0, basicLauncher0);
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertNotNull(solver0);

solver0.decayActivities();
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(1076.5112419145);
assertEquals(1076.5112419145, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

activeLearning0.setVarActivityListener(solver0);
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.nVars());
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1076.5112419145, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, arminRestarts0, basicLauncher0);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1076.5112419145, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertNotNull(solver1);

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertNotNull(varOrderHeap1);

randomWalkDecorator0.assignLiteral((-2056));
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap1, (RestartStrategy) null);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertNotNull(solver2);

long long0 = solver2.getTimeoutMs();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(2147483647L, long0);

solver2.stop();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(5, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(5, solver2.realNumberOfVariables());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-2631));
assertEquals((-2631), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, varOrderHeap1, arminRestarts0);
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(2, solver3.newVar());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals((-2631), percentLengthLearning0.getLimit());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertNotNull(solver3);

Constr constr0 = solver3.propagate();
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(3, solver3.nVars());
assertEquals(4, solver3.newVar());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals((-2631), percentLengthLearning0.getLimit());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertNull(constr0);


[MASTER] 23:57:08.713 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:08.725 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielHT mixedDataStructureDanielHT0 = mock(MixedDataStructureDanielHT.class, new ViolatedAssumptionAnswer());
int[] intArray0 = new int[5];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, int0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

int int1 = searchParams0.getInitConflictBound();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertTrue(int1 == int0);
assertEquals(0, int1);

int int2 = searchParams0.getInitConflictBound();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertTrue(int2 == int1);
assertTrue(int2 == int0);
assertEquals(0, int2);

int int3 = searchParams0.getInitConflictBound();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertTrue(int3 == int2);
assertTrue(int3 == int0);
assertTrue(int3 == int1);
assertEquals(0, int3);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(5, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertNotNull(mixedDataStructureDanielHT1);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("6E.Y7r@{^IEj%]=B)8g");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

MixedDataStructureDanielHT mixedDataStructureDanielHT2 = new MixedDataStructureDanielHT();
assertFalse(mixedDataStructureDanielHT2.equals((Object)mixedDataStructureDanielHT0));
assertFalse(mixedDataStructureDanielHT2.equals((Object)mixedDataStructureDanielHT1));
assertNotNull(mixedDataStructureDanielHT2);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT2, searchParams0, subsetVarOrder0, lubyRestarts0, mUSLauncher0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mixedDataStructureDanielHT2.equals((Object)mixedDataStructureDanielHT0));
assertFalse(mixedDataStructureDanielHT2.equals((Object)mixedDataStructureDanielHT1));
assertNotNull(solver0);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);

boolean boolean0 = iVecInt0.isEmpty();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertTrue(boolean0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(solver1);

IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
doReturn(0).when(iVecInt1).size();
ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt1, iLits0);
assertEquals(0, originalWLClause0.size());
assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
assertFalse(originalWLClause0.learnt());
assertFalse(originalWLClause0.isSatisfied());
assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
assertFalse(originalWLClause0.simplify());
assertNotNull(originalWLClause0);

int int4 = originalWLClause0.size();
assertEquals(0, originalWLClause0.size());
assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
assertFalse(originalWLClause0.learnt());
assertFalse(originalWLClause0.isSatisfied());
assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
assertFalse(originalWLClause0.simplify());
assertTrue(int4 == int1);
assertTrue(int4 == int0);
assertTrue(int4 == int3);
assertTrue(int4 == int2);
assertEquals(0, int4);

boolean boolean1 = solver1.isSatisfiable();
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);


[MASTER] 23:57:09.093 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:09.099 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = new Integer(0);
assertEquals(0, int0);

int[] intArray0 = new int[5];
intArray0[0] = 913;
intArray0[1] = 3;
intArray0[2] = (-3581);
intArray0[3] = 398;
intArray0[4] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, (RestartStrategy) null);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

boolean boolean0 = solver0.simplifyDB();
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertTrue(boolean0);

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(solver1);

long long0 = solver1.getTimeoutMs();
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483647L, long0);

SearchListener<Solver<CardinalityDataStructure>> searchListener0 = solver1.getSearchListener();
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(5, solver1.nVars());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(searchListener0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7v509n)", "X&O)\"");

[MASTER] 23:57:09.452 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:09.458 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureDanielHT> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielHT>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
int[] intArray0 = new int[5];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());

TabuListDecorator tabuListDecorator1 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertNotNull(tabuListDecorator1);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertNotNull(lubyRestarts1);

subsetVarOrder0.setVarDecay(32);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

tabuListDecorator0.setVarDecay(1913.7848197);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotSame(tabuListDecorator0, tabuListDecorator1);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));

NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, tabuListDecorator1, lubyRestarts0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertNotNull(solver0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(cardinalityDataStructure1);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);

boolean boolean0 = iVecInt0.isEmpty();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertTrue(boolean0);

IVecInt iVecInt1 = iVecInt0.push(0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(1, iVecInt0.size());
assertEquals(0, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertFalse(iVecInt1.isEmpty());
assertEquals(0, iVecInt1.last());
assertEquals(1, iVecInt1.size());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertNotSame(iVecInt0, vecInt0);
assertSame(iVecInt0, iVecInt1);
assertSame(iVecInt1, iVecInt0);
assertNotSame(iVecInt1, vecInt0);
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(iVecInt1.equals((Object)vecInt0));
assertNotNull(iVecInt1);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertNotNull(solver1);

solver1.addAtMost(iVecInt0, 4);

[MASTER] 23:57:09.761 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:09.765 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

VecInt vecInt0 = new VecInt(1128);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append('e');
assertEquals("e", stringWriter0.toString());
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertNotNull(printWriter0);

PrintWriter printWriter1 = new PrintWriter(printWriter0);
assertEquals("e", stringWriter0.toString());
assertNotNull(printWriter1);

varOrderHeap0.printStat(printWriter1, "Expensive reason simplification specific for WL data structure");
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("eExpensive reason simplification specific for WL data structurenon guided choices\t: 0\n", stringWriter0.toString());
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

IVecInt iVecInt0 = vecInt0.pop();
assertEquals((-1), vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals((-1), iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertNotNull(iVecInt0);

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

boolean boolean0 = arminRestarts0.shouldRestart();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(boolean0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>(978);
assertEquals(978, percentLengthLearning1.getLimit());
assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
assertNotNull(percentLengthLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(cardinalityDataStructureYanMax1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax2 = new CardinalityDataStructureYanMax();
assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(cardinalityDataStructureYanMax2);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax2, (SearchParams) null, randomWalkDecorator0, arminRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(10, percentLengthLearning0.getLimit());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
assertFalse(percentLengthLearning0.equals((Object)percentLengthLearning1));
assertNotNull(solver0);

Constr constr0 = solver0.propagate();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(10, percentLengthLearning0.getLimit());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotSame(cardinalityDataStructureYanMax2, cardinalityDataStructureYanMax1);
assertNotSame(cardinalityDataStructureYanMax2, cardinalityDataStructureYanMax0);
assertNotSame(percentLengthLearning0, percentLengthLearning1);
assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
assertFalse(percentLengthLearning0.equals((Object)percentLengthLearning1));
assertNull(constr0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, (SearchParams) null, randomWalkDecorator0, arminRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(solver1);

solver1.suggestNextLiteralToBranchOn(1128);

[MASTER] 23:57:10.033 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:10.036 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-2297));
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());

ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

PureOrder pureOrder1 = new PureOrder((-2297));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
assertEquals((-2297), pureOrder1.getPeriod());
assertEquals(0, pureOrder1.numberOfInterestingVariables());
assertFalse(pureOrder1.equals((Object)pureOrder0));
assertNotNull(pureOrder1);

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, fixedPeriodRestarts0, mUSLauncher0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(pureOrder0.equals((Object)pureOrder1));
assertNotNull(solver0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 23:57:10.364 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:10.370 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, arminRestarts0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver0.fixedSize(0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(learnedConstraintsDeletionStrategy0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>(6);
assertEquals(6, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, arminRestarts0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(6, percentLengthLearning1.getLimit());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertNotNull(solver1);

int int0 = solver1.nVars();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(6, percentLengthLearning1.getLimit());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2, int0);


[MASTER] 23:57:10.639 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:10.647 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, int0);

int[] intArray0 = new int[5];
intArray0[0] = 913;
intArray0[1] = 3;
intArray0[2] = (-3581);
intArray0[3] = 398;
intArray0[4] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, (RestartStrategy) null);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

boolean boolean0 = solver0.simplifyDB();
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertTrue(boolean0);

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(solver1);

long long0 = solver1.getTimeoutMs();
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483647L, long0);

IVecInt iVecInt0 = solver1.unsatExplanation();
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(5, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(6, solver1.newVar());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNull(iVecInt0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-735));
assertEquals((-735), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, tabuListDecorator0, (RestartStrategy) null);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals((-735), fixedLengthLearning0.getMaxLength());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver2);

String string0 = "X&X*27BEP1Ovu";
String string1 = "Not implemented yet!";
File file0 = MockFile.createTempFile("Not implemented yet!", "X&X*27BEP1Ovu");
assertEquals(0L, file0.getUsableSpace());
assertFalse(file0.isHidden());
assertEquals("Not implemented yet!0X&X*27BEP1Ovu", file0.getName());
assertTrue(file0.isFile());
assertEquals("/tmp", file0.getParent());
assertTrue(file0.canRead());
assertTrue(file0.exists());
assertTrue(file0.isAbsolute());
assertTrue(file0.canExecute());
assertEquals(1392409281320L, file0.lastModified());
assertEquals(0L, file0.getTotalSpace());
assertEquals(0L, file0.length());
assertEquals(0L, file0.getFreeSpace());
assertTrue(file0.canWrite());
assertEquals("/tmp/Not implemented yet!0X&X*27BEP1Ovu", file0.toString());
assertFalse(file0.isDirectory());
assertNotNull(file0);

MockFile mockFile0 = new MockFile(file0, "Not implemented yet!");
assertFalse(mockFile0.equals((Object)file0));
assertNotNull(mockFile0);

MockFile.createTempFile("X&X*27BEP1Ovu", "Not implemented yet!", (File) mockFile0);

[MASTER] 23:57:11.062 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:11.083 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielHT mixedDataStructureDanielHT0 = mock(MixedDataStructureDanielHT.class, new ViolatedAssumptionAnswer());
int[] intArray0 = new int[5];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, int0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.5, double0, 0.01);

int int1 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertTrue(int1 == int0);
assertEquals(0, int1);

int int2 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals(0, int2);

int int3 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertTrue(int3 == int1);
assertTrue(int3 == int2);
assertTrue(int3 == int0);
assertEquals(0, int3);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(5, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertNotNull(mixedDataStructureDanielHT1);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("c ");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

MixedDataStructureDanielHT mixedDataStructureDanielHT2 = new MixedDataStructureDanielHT();
assertFalse(mixedDataStructureDanielHT2.equals((Object)mixedDataStructureDanielHT1));
assertFalse(mixedDataStructureDanielHT2.equals((Object)mixedDataStructureDanielHT0));
assertNotNull(mixedDataStructureDanielHT2);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT1, searchParams0, tabuListDecorator0, lubyRestarts0, mUSLauncher0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT2));
assertNotNull(solver0);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);

boolean boolean0 = vecInt0.isEmpty();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotSame(vecInt0, iVecInt0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(boolean0);

Set<Integer> set0 = solver0.fromLastDecisionLevel(iVecInt0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(mixedDataStructureDanielHT1, mixedDataStructureDanielHT2);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT2));
assertNotNull(set0);
assertFalse(set0.contains(int1));

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(9);
assertEquals(9, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, lubyRestarts0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(9, percentLengthLearning0.getLimit());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(solver1);

IConstr iConstr0 = solver1.addExactly(iVecInt0, 0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(9, percentLengthLearning0.getLimit());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(iConstr0.canBePropagatedMultipleTimes());
assertEquals(0.0, iConstr0.getActivity(), 0.01);
assertEquals(2, iConstr0.size());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iConstr0);

MinWatchCard minWatchCard0 = (MinWatchCard)solver1.addAtMostOnTheFly(intArray0, 541);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertFalse(MinWatchCard.ATMOST);
assertTrue(MinWatchCard.ATLEAST);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(9, percentLengthLearning0.getLimit());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(3, solver1.nConstraints());
assertEquals(5, solver1.nVars());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
assertEquals((-536), minWatchCard0.requiredNumberOfSatisfiedLiterals());
assertFalse(minWatchCard0.learnt());
assertEquals(5, minWatchCard0.size());
assertTrue(minWatchCard0.locked());
assertFalse(minWatchCard0.simplify());
assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(minWatchCard0);

MUSLauncher mUSLauncher1 = (MUSLauncher)solver0.getLogger();
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(mUSLauncher1.isSilent());
assertEquals(0L, mUSLauncher1.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertSame(mUSLauncher1, mUSLauncher0);
assertNotSame(mixedDataStructureDanielHT1, mixedDataStructureDanielHT2);
assertSame(mUSLauncher0, mUSLauncher1);
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT2));
assertNotNull(mUSLauncher1);


[MASTER] 23:57:11.400 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:11.405 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

int[] intArray0 = new int[5];
intArray0[0] = 913;
intArray0[1] = 3;
intArray0[2] = (-3581);
intArray0[3] = 398;
intArray0[4] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);

subsetVarOrder0.setVarDecay(1.0E-20);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

tabuListDecorator0.setVarDecay(0.0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, tabuListDecorator0, lubyRestarts0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(solver0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(solver1);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertArrayEquals(new int[] {913, 3, (-3581), 398, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());


[MASTER] 23:57:11.753 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:11.771 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

VecInt vecInt0 = new VecInt(1128);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.pop();
assertEquals((-1), vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals((-1), iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertNotNull(iVecInt0);

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

randomWalkDecorator0.assignLiteral((-2056));
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-2056));
assertEquals((-2056.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

SearchParams searchParams0 = new SearchParams((-1.0), 2191.798389062, 0.0, (-2631));
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), int0);

int int1 = searchParams0.getInitConflictBound();
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertTrue(int1 == int0);
assertEquals((-2631), int1);

int int2 = searchParams0.getInitConflictBound();
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertTrue(int2 == int1);
assertTrue(int2 == int0);
assertEquals((-2631), int2);

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(double1, double0, 0.01);
assertEquals(0.0, double1, 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts((-2127));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(boolean0);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals((-2056.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertNotNull(solver0);

long long0 = solver0.getTimeoutMs();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals((-2056.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
assertEquals(2147483647L, long0);

solver0.stop();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.nVars());
assertEquals((-2056.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(2191.798389062, searchParams0.getClaDecay(), 0.01);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-927));
assertEquals((-927), percentLengthLearning1.getLimit());
assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
assertNotNull(percentLengthLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(cardinalityDataStructureYanMax1);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-927), percentLengthLearning1.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
assertNotNull(solver1);

Constr constr0 = solver1.propagate();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-927), percentLengthLearning1.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
assertNotSame(percentLengthLearning1, percentLengthLearning0);
assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
assertNull(constr0);

solver0.claBumpActivity((Constr) null);

[MASTER] 23:57:12.158 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 23:57:12.160 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts((-2127));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertTrue(boolean0);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2127), lubyRestarts0.getFactor());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());


[MASTER] 23:57:12.539 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:12.564 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, (-141));
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
assertArrayEquals(new int[] {}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(0, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

SearchParams searchParams0 = new SearchParams((-141), (-141));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-141), searchParams0.getInitConflictBound());
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

glucose21Restarts0.onRestart();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, tabuListDecorator0, lubyRestarts0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

int[] intArray1 = solver0.findModel();
assertArrayEquals(new int[] {}, intArray0);
assertArrayEquals(new int[] {}, intArray1);
assertEquals(0, intArray0.length);
assertEquals(0, intArray1.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertNotSame(intArray0, intArray1);
assertNotSame(intArray1, intArray0);
assertFalse(intArray1.equals((Object)intArray0));
assertNotNull(intArray1);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(solver1);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.clone();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertTrue(iVecInt0.equals((Object)vecInt0));
assertNotNull(iVecInt0);

boolean boolean0 = vecInt0.isEmpty();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotSame(vecInt0, iVecInt0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(boolean0);

IVecInt iVecInt1 = vecInt0.push(5);
assertFalse(vecInt0.isEmpty());
assertEquals(5, vecInt0.last());
assertEquals(1, vecInt0.size());
assertEquals(5, iVecInt1.last());
assertEquals(1, iVecInt1.size());
assertFalse(iVecInt1.isEmpty());
assertSame(vecInt0, iVecInt1);
assertNotSame(vecInt0, iVecInt0);
assertSame(iVecInt1, vecInt0);
assertNotSame(iVecInt1, iVecInt0);
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(iVecInt1.equals((Object)iVecInt0));
assertNotNull(iVecInt1);

boolean boolean1 = solver1.isSatisfiable((IVecInt) vecInt0, true);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(6, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(6, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(7, solver1.newVar());
assertFalse(vecInt0.isEmpty());
assertEquals(5, vecInt0.last());
assertEquals(1, vecInt0.size());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertSame(vecInt0, iVecInt1);
assertNotSame(vecInt0, iVecInt0);
assertFalse(vecInt0.equals((Object)iVecInt0));
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(cardinalityDataStructureYanMax1);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(32);
assertEquals(32, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax1, searchParams0, tabuListDecorator0, lubyRestarts0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-141), searchParams0.getInitConflictBound());
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, percentLengthLearning0.getLimit());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(intArray0.equals((Object)intArray1));
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(solver2);

solver2.primeImplicant(821);

[MASTER] 23:57:12.908 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:12.911 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
assertNull(doubleArray0);

tabuListDecorator0.varDecayActivity();
LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(boolean0);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());

ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, pureOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());


[MASTER] 23:57:13.320 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:13.324 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertNotNull(varOrderHeap1);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap1);
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertNotNull(tabuListDecorator0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotSame(varOrderHeap1, varOrderHeap0);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap2 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
assertNotNull(varOrderHeap2);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy1 = (PhaseInLastLearnedClauseSelectionStrategy)varOrderHeap2.getPhaseSelectionStrategy();
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy1.toString());
assertNotSame(varOrderHeap1, varOrderHeap0);
assertNotSame(varOrderHeap1, varOrderHeap2);
assertSame(phaseInLastLearnedClauseSelectionStrategy0, phaseInLastLearnedClauseSelectionStrategy1);
assertNotSame(varOrderHeap2, varOrderHeap0);
assertNotSame(varOrderHeap2, varOrderHeap1);
assertSame(phaseInLastLearnedClauseSelectionStrategy1, phaseInLastLearnedClauseSelectionStrategy0);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap2));
assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
assertNotNull(phaseInLastLearnedClauseSelectionStrategy1);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap2);
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap2));
assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
assertNotNull(randomWalkDecorator0);

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

boolean boolean0 = arminRestarts0.shouldRestart();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertTrue(boolean0);

arminRestarts0.onBackjumpToRootLevel();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, varOrderHeap0, arminRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertFalse(varOrderHeap0.equals((Object)varOrderHeap2));
assertNotNull(solver0);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

boolean boolean1 = vecInt0.isEmpty();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);

VecInt vecInt1 = (VecInt)vecInt0.push((-5865));
assertEquals(1, vecInt1.size());
assertFalse(vecInt1.isEmpty());
assertEquals((-5865), vecInt1.last());
assertEquals((-5865), vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertSame(vecInt1, vecInt0);
assertSame(vecInt0, vecInt1);
assertNotNull(vecInt1);

solver0.isSatisfiable((IVecInt) vecInt0, true);

[MASTER] 23:57:13.809 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:13.818 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielHT mixedDataStructureDanielHT0 = mock(MixedDataStructureDanielHT.class, new ViolatedAssumptionAnswer());
int[] intArray0 = new int[5];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, int0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

int int1 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertTrue(int1 == int0);
assertEquals(100, int1);

int int2 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals(100, int2);

int int3 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertTrue(int3 == int0);
assertTrue(int3 == int2);
assertTrue(int3 == int1);
assertEquals(100, int3);

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(double1, double0, 0.01);
assertEquals(1.5, double1, 0.01);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 100);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(5, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());

tabuListDecorator0.setVarDecay(0.0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, subsetVarOrder0, lubyRestarts0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(solver0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(cardinalityDataStructure1);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

boolean boolean0 = arminRestarts0.shouldRestart();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(boolean0);

arminRestarts0.onBackjumpToRootLevel();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());

LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer((Solver<? extends DataStructureFactory>) null, 1326);
assertEquals(1326, lBDConflictTimer0.bound());
assertNotNull(lBDConflictTimer0);

Solver<? extends DataStructureFactory> solver1 = lBDConflictTimer0.getSolver();
assertEquals(1326, lBDConflictTimer0.bound());
assertNull(solver1);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure1, randomWalkDecorator0, arminRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(solver2);

lubyRestarts0.reset();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver2.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(3, solver2.nVars());
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));


[MASTER] 23:57:14.164 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:14.166 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

VecInt vecInt0 = new VecInt(1140);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.pop();
assertEquals((-1), vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals((-1), iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertNotNull(iVecInt0);

int int0 = 5;
boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

solver0.discardCurrentModel();

[MASTER] 23:57:14.477 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:14.480 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(32);
assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertNotNull(clauseOnlyLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning1, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertNotNull(solver1);

solver1.backtrack((int[]) null);

[MASTER] 23:57:14.842 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:14.844 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 5;
PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(5);
assertEquals(5, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(5, percentLengthLearning0.getLimit());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

int int1 = 637;
VecInt vecInt0 = new VecInt(637);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.pop();
assertEquals((-1), vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertFalse(iVecInt0.isEmpty());
assertEquals((-1), iVecInt0.size());
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertNotNull(iVecInt0);

solver0.primeImplicant(5000);

[MASTER] 23:57:15.173 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:15.200 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, fixedPeriodRestarts0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertNotNull(solver1);

solver1.setKeepSolverHot(false);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals((-2), iVecInt0.last());
assertEquals(2, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertNotNull(iVecInt0);

UnitClauses unitClauses0 = (UnitClauses)solver1.addAtMost(iVecInt0, 0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(5, solver0.nVars());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2, solver1.getPropagationLevel());
assertEquals(6, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals((-2), iVecInt0.last());
assertEquals(2, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertFalse(unitClauses0.simplify());
assertFalse(unitClauses0.canBePropagatedMultipleTimes());
assertTrue(unitClauses0.isSatisfied());
assertNotNull(unitClauses0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, pureOrder0, fixedPeriodRestarts0);
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(solver2);

SearchListener<Solver<CardinalityDataStructure>> searchListener0 = solver2.getSearchListener();
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(4, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(searchListener0);

long long0 = solver1.getTimeoutMs();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(8, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(7, solver1.nVars());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(1, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483647L, long0);


[MASTER] 23:57:15.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 23:57:15.576 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-1173.841482880508), (-3945));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-3945), searchParams0.getInitConflictBound());
assertEquals((-1173.841482880508), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-3945), searchParams0.getInitConflictBound());
assertEquals((-1173.841482880508), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.95, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-3945), searchParams0.getInitConflictBound());
assertEquals((-1173.841482880508), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(0.999, double1, 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
assertNotNull(tabuListDecorator0);

double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
assertNull(doubleArray0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, (RestartStrategy) null);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-3945), searchParams0.getInitConflictBound());
assertEquals((-1173.841482880508), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

int int0 = solver0.realNumberOfVariables();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-3945), searchParams0.getInitConflictBound());
assertEquals((-1173.841482880508), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(2, int0);


[MASTER] 23:57:15.880 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:15.883 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, glucose21Restarts0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(solver0);

solver0.backtrack(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());

String string0 = solver0.getLogPrefix();
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(string0);
assertEquals("c ", string0);

boolean boolean0 = solver0.isSatisfiable();
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(7, solver0.nVars());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertTrue(boolean0);


[MASTER] 23:57:16.258 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:16.268 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielHT mixedDataStructureDanielHT0 = mock(MixedDataStructureDanielHT.class, new ViolatedAssumptionAnswer());
int[] intArray0 = new int[5];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(solver0);

boolean boolean0 = solver0.isVerbose();
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(boolean0);

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

LubyRestarts lubyRestarts1 = new LubyRestarts((-533));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-533), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertNotNull(lubyRestarts1);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertNotNull(solver1);

solver1.setDataStructureFactory(cardinalityDataStructureYanMax0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertNotSame(lubyRestarts0, lubyRestarts1);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));

ASolverFactory<Solver<ClausalDataStructureWL>> aSolverFactory0 = (ASolverFactory<Solver<ClausalDataStructureWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
BasicLauncher<Solver<ClausalDataStructureWL>> basicLauncher0 = new BasicLauncher<Solver<ClausalDataStructureWL>>(aSolverFactory0);
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertNotNull(basicLauncher0);

basicLauncher0.log("wt;w5rC");
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, (SearchParams) null, tabuListDecorator0, (RestartStrategy) null, basicLauncher0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(solver2);

boolean boolean1 = solver2.isNeedToReduceDB();
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(4, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

solver1.forget(3611);

[MASTER] 23:57:16.637 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:16.643 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-2631));
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

Integer integer0 = new Integer((-2631));
assertNotNull(integer0);
assertEquals((-2631), (int)integer0);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2631), int0);

int int1 = searchParams0.getInitConflictBound();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertTrue(int1 == int0);
assertEquals((-2631), int1);

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(double1, double0, 0.01);
assertEquals(1.5, double1, 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);

solver0.setLearningStrategy(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());

ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertNotNull(solver1);

Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
PrintWriter printWriter0 = new PrintWriter(writer0);
assertNotNull(printWriter0);

solver1.printStat(printWriter0, "74aT29LU+)");
assertEquals((-2631), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);


[MASTER] 23:57:16.987 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:16.990 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);

solver0.varBumpActivity(0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());

NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics1 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningButHeuristics1);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(pureOrder0, 1151.299);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(1151.299, randomWalkDecorator1.getProbability(), 0.01);
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
assertNotNull(randomWalkDecorator1);

randomWalkDecorator1.varActivity(932);

[MASTER] 23:57:17.287 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:57:17.289 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureDanielHT> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielHT>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
int[] intArray0 = new int[5];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

RestartStrategy restartStrategy0 = null;
ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());

TabuListDecorator tabuListDecorator1 = new TabuListDecorator(subsetVarOrder0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertNotNull(tabuListDecorator1);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertNotNull(lubyRestarts1);

subsetVarOrder0.setVarDecay(32);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, subsetVarOrder0, (RestartStrategy) null);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

solver0.primeImplicant((-905));

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
