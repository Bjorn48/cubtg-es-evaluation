/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 15:59:03 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vec_ESTest extends Vec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Vec<String> vec1 = new Vec<String>();
      vec1.isEmpty();
      IVec<String> iVec0 = null;
      // Undeclared exception!
      try { 
        vec1.moveTo((IVec<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object> vec1 = new Vec<Object>(20, vec0);
      vec1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(16);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      Vec<String> vec1 = new Vec<String>();
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(16, vec1);
      // Undeclared exception!
      try { 
        vec2.get(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 5;
      Vec<String> vec0 = new Vec<String>(5);
      vec0.insertFirstWithShifting("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(5, vec0);
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec1.sort(5, 20, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.clear();
      vec0.toArray();
      Vec<Integer> vec1 = new Vec<Integer>(2);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2186);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1828));
      integerArray0[4] = integer4;
      vec1.copyTo(integerArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      String string0 = "{^X95{q";
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(5);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(5, (Vec<Object>) null);
      // Undeclared exception!
      try { 
        vec2.contains((Vec<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<Object> vec0 = new Vec<Object>(stringArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1082), (-1082), (-1082), (-1082), (-1082)).when(comparator0).compare(any() , any());
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(16, "E");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "E";
      objectArray0[1] = (Object) vec0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) "E";
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) "E";
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(430, vec1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      vec0.moveTo(5, 5);
      Vec<Integer> vec3 = new Vec<Integer>();
      Integer integer0 = new Integer(22);
      vec3.indexOf(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sortUnique(comparator0);
      Vec<String> vec4 = new Vec<String>(430, "org.sat4j.core.Vec");
      // Undeclared exception!
      try { 
        vec4.get(1355);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(15);
      String string0 = "org.sat4j.core.Vec";
      // Undeclared exception!
      try { 
        vec0.removeFromLast("org.sat4j.core.Vec");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.growTo((-2408), "B");
      vec0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vec<Object> vec1 = new Vec<Object>();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-3315));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      vec0.equals((Object) null);
      // Undeclared exception!
      try { 
        vec0.set((-3315), integerArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3315
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(16, (Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec0.sortUnique(comparator0);
      Integer integer0 = new Integer((-2858));
      Vec<Integer> vec1 = new Vec<Integer>(16, integer0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(2882, (-2858), comparator1);
      Integer integer1 = new Integer(16);
      vec1.indexOf(integer0);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(552, "Bkfv!>>{_UR ");
      IVec<String> iVec0 = vec0.push("org.sat4j.core.Vec");
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 4);
      Vec<String> vec1 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(readOnlyVec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(iVec0);
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(readOnlyVec0);
      readOnlyVecArray0[3] = readOnlyVec3;
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      readOnlyVec3.iterator();
      Comparator<ReadOnlyVec<String>> comparator0 = (Comparator<ReadOnlyVec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(nullable(org.sat4j.core.ReadOnlyVec.class) , nullable(org.sat4j.core.ReadOnlyVec.class));
      vec2.sortUnique(comparator0);
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>();
      vec3.clone();
      Vec<Object> vec4 = null;
      try {
        vec4 = new Vec<Object>((-4407), "org.sat4j.core.Vec");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-408));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      int int0 = (-1994);
      vec0.growTo((-1994), (Integer) null);
      // Undeclared exception!
      try { 
        vec0.insertFirst((Integer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1994
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>();
      vec0.copyTo((IVec<ReadOnlyVec<Object>>) vec1);
      int int0 = 5;
      // Undeclared exception!
      try { 
        vec0.shrink(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      vec0.iterator();
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>();
      vec0.copyTo((IVec<Vec<String>>) vec1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vec<String> vec2 = new Vec<String>(8, "org.sat4j.core.Vec");
      // Undeclared exception!
      try { 
        vec2.removeFromLast("org.sat4j.core.Vec");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object> vec1 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(16, (Object) null);
      Vec<String> vec1 = new Vec<String>(47, "");
      vec1.delete(16);
      vec0.growTo((-587), "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      Vec<String> vec2 = new Vec<String>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator1);
      Integer integer0 = new Integer(25);
      Vec<Integer> vec3 = new Vec<Integer>(25, integer0);
      vec3.isEmpty();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.sat4j.core.Vec$1";
      int int0 = 2882;
      int int1 = (-1684);
      Integer integer0 = new Integer((-1684));
      Vec<Integer> vec0 = new Vec<Integer>(2882, integer0);
      vec0.remove(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      vec0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort((-1495), (-1495), comparator0);
      Vec<String> vec1 = new Vec<String>(20, "]Sk\"");
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(20, vec1);
      vec2.indexOf(vec1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vec<String> vec0 = null;
      try {
        vec0 = new Vec<String>((-2566), "O8C'B_#Qfh");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(16, (Object) null);
      vec0.hashCode();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      // Undeclared exception!
      try { 
        vec1.remove(vec0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(304L);
      int int0 = 3;
      Vec<String> vec0 = new Vec<String>(3);
      vec0.clear();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(3);
      int int1 = (-1216);
      int int2 = 2595;
      ReadOnlyVec<Vec<Object>> readOnlyVec0 = new ReadOnlyVec<Vec<Object>>(vec1);
      // Undeclared exception!
      try { 
        vec1.moveTo((IVec<Vec<Object>>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<Object> vec1 = new Vec<Object>();
      vec1.insertFirstWithShifting(vec0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vec<Object> vec0 = new Vec<Object>(0);
      Vec<Object> vec1 = new Vec<Object>();
      int int1 = 270;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.clear();
      // Undeclared exception!
      try { 
        vec1.selectionSort((-704), 0, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Integer integer0 = new Integer(1280);
      Vec<Integer> vec1 = new Vec<Integer>(8, integer0);
      Integer[] integerArray0 = new Integer[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Vec<Integer> vec2 = new Vec<Integer>(integerArray0);
      vec1.moveTo((IVec<Integer>) vec2);
      ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 2);
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec2);
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Integer> readOnlyVec1 = new ReadOnlyVec<Integer>(readOnlyVec0);
      readOnlyVecArray0[1] = readOnlyVec1;
      Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>(readOnlyVecArray0);
      vec3.indexOf(readOnlyVec0);
      Vec<ReadOnlyVec<String>> vec4 = new Vec<ReadOnlyVec<String>>();
      Vec<ReadOnlyVec<String>> vec5 = null;
      try {
        vec5 = new Vec<ReadOnlyVec<String>>((-2932));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 4;
      int int1 = Integer.MAX_VALUE;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vec<Integer> vec0 = new Vec<Integer>(4, integer0);
      vec0.shrinkTo(Integer.MAX_VALUE);
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      // Undeclared exception!
      try { 
        readOnlyVec0.ensure(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(2957, vec0);
      Vec<Object> vec2 = new Vec<Object>(2957, vec0);
      vec1.contains(vec0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 6;
      Vec<Integer> vec0 = new Vec<Integer>(6);
      IVec<Integer> iVec0 = vec0.clone();
      vec0.moveTo(iVec0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(32, (-1489), comparator0);
      IVec<Integer> iVec1 = vec0.clone();
      vec0.copyTo(iVec1);
      System.setCurrentTimeMillis(1986L);
      Vec<Object> vec1 = new Vec<Object>();
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(6, vec1);
      // Undeclared exception!
      try { 
        vec2.unsafePush(vec1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.isEmpty();
      Vec<Object> vec1 = new Vec<Object>(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1087, "6!_Y}TU,RKS50(k)cz");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.selectionSort((-2603), 1087, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.toString();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Integer integer0 = new Integer(2128);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = new Integer(5);
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      Vec<Integer> vec1 = new Vec<Integer>(integerArray0);
      Integer integer2 = new Integer((-173));
      vec1.insertFirstWithShifting(integer2);
      vec0.insertFirst(integer0);
      Integer integer3 = new Integer(1288);
      vec1.contains(integer3);
      vec0.toArray();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Object> vec1 = new Vec<Object>(2957, vec0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      vec0.iterator();
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>();
      vec0.copyTo((IVec<Vec<String>>) vec1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vec<String> vec2 = new Vec<String>(8, "org.sat4j.core.Vec");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) vec0;
      Vec<Object> vec3 = new Vec<Object>(objectArray0);
      vec3.sortUnique((Comparator<Object>) null);
      vec3.sortUnique((Comparator<Object>) null);
      Vec<ReadOnlyVec<String>> vec4 = new Vec<ReadOnlyVec<String>>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec2);
      vec4.indexOf(readOnlyVec0);
      vec3.equals(readOnlyVec0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vec<Object> vec0 = null;
      try {
        vec0 = new Vec<Object>((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(3531);
      int int0 = 1451;
      int int1 = 7;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        vec0.sort(7, 1562, (Comparator<Vec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vec<Integer> vec0 = new Vec<Integer>(10);
      Integer integer0 = new Integer(10);
      vec0.unsafePush(integer0);
      int int0 = 7;
      vec0.delete(7);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "B! md$GgY%~_U_";
      stringArray0[1] = "B! md$GgY%~_U_";
      stringArray0[2] = "B! md$GgY%~_U_";
      stringArray0[3] = "B! md$GgY%~_U_";
      stringArray0[4] = "B! md$GgY%~_U_";
      stringArray0[5] = "B! md$GgY%~_U_";
      stringArray0[6] = "B! md$GgY%~_U_";
      stringArray0[7] = "B! md$GgY%~_U_";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec1.growTo(7, "");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec1.sortUnique(comparator0);
      vec1.insertFirst("B! md$GgY%~_U_");
      // Undeclared exception!
      try { 
        vec1.remove("no version file found!!!");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      Vec<Object> vec1 = new Vec<Object>(893, vec0);
      vec1.hashCode();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      Vec<Object> vec1 = new Vec<Object>();
      vec1.size();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-1994);
      Integer integer0 = new Integer((-1994));
      vec0.insertFirstWithShifting(integer0);
      Object[] objectArray0 = new Object[4];
      Integer integer1 = new Integer(1);
      vec0.insertFirstWithShifting(integer1);
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(4293, vec1);
      // Undeclared exception!
      try { 
        vec2.selectionSort(877, 4293, (Comparator<Vec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Vec<Integer> vec0 = new Vec<Integer>(1, integer0);
      vec0.remove(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      Vec<Object> vec1 = new Vec<Object>(1, integer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) vec1;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) vec1;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) vec0;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec1.moveTo((IVec<Object>) vec2);
      vec1.insertFirst(integer0);
      vec1.pop();
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(16);
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>(19, vec1);
      Vec<Object> vec5 = new Vec<Object>(objectArray0);
      vec4.insertFirstWithShifting(vec5);
      Vec<Object> vec6 = new Vec<Object>(16);
      vec4.removeFromLast(vec5);
      Integer integer1 = new Integer(16);
      // Undeclared exception!
      try { 
        vec0.removeFromLast(integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.insertFirstWithShifting("ax&vt");
      Vec<String> vec1 = new Vec<String>();
      vec0.indexOf(vec1);
      vec0.sortUnique((Comparator<Object>) null);
      // Undeclared exception!
      try { 
        vec1.get(128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(12);
      vec0.moveTo((IVec<Vec<String>>) vec1);
      Vec<Vec<String>> vec2 = null;
      try {
        vec2 = new Vec<Vec<String>>((Vec<String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      // Undeclared exception!
      try { 
        vec0.moveTo(3, (-1236));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1236
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<Object> vec0 = new Vec<Object>(stringArray0);
      Vec<Object> vec1 = new Vec<Object>(45);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(45, vec0);
      vec2.contains(vec1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(5);
      vec1.contains(vec0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(9, "");
      vec0.shrink(9);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sort(6, 9, comparator0);
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(50, vec0);
      vec1.indexOf(vec0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(16);
      Integer integer0 = new Integer(16);
      vec0.insertFirstWithShifting(integer0);
      Vec<String> vec1 = new Vec<String>();
      vec1.toString();
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(65535, vec1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 2;
      Vec<String> vec0 = new Vec<String>();
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2, vec0);
      vec1.indexOf(vec0);
      vec1.removeFromLast(vec0);
      vec0.indexOf("org.sat4j.core.Vec");
      Integer integer0 = new Integer(0);
      Vec<Integer> vec2 = new Vec<Integer>(2, integer0);
      vec2.shrinkTo(50);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      vec0.ensure(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        vec2.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(16, (Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(16, 47, (-587), 16, 1934).when(comparator0).compare(any() , any());
      vec0.sortUnique(comparator0);
      Vec<String> vec1 = new Vec<String>();
      vec1.toString();
      vec1.isEmpty();
      Vec<Object> vec2 = new Vec<Object>();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      // Undeclared exception!
      try { 
        vec1.sortUnique((Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(3760, (Integer) null);
      // Undeclared exception!
      try { 
        vec0.indexOf((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(4049);
      vec0.equals(",");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)20;
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Vec<Object> vec0 = new Vec<Object>(1854, (Object) null);
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>();
      Vec<String> vec2 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec1.removeFromLast(vec2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      String[] stringArray0 = new String[0];
      Vec<String> vec1 = new Vec<String>(stringArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      Vec<String> vec2 = new Vec<String>();
      Comparator<Object> comparator1 = null;
      // Undeclared exception!
      try { 
        vec1.unsafePush("?-4");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 9);
      Vec<Object> vec0 = new Vec<Object>();
      vecArray0[0] = vec0;
      int int0 = 1;
      Vec<Object> vec1 = new Vec<Object>(1);
      vecArray0[1] = vec1;
      int int1 = 1095;
      Integer integer0 = new Integer(1095);
      Vec<Object> vec2 = new Vec<Object>(1095, integer0);
      vecArray0[2] = vec2;
      Vec<Object> vec3 = new Vec<Object>(1);
      Vec<Object> vec4 = new Vec<Object>(1);
      // Undeclared exception!
      try { 
        vec0.remove(vec4);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 16;
      Vec<Object> vec0 = new Vec<Object>(16, (Object) null);
      vec0.hashCode();
      vec0.size();
      vec0.size();
      Integer integer0 = new Integer(16);
      Vec<Integer> vec1 = new Vec<Integer>(16, integer0);
      vec1.last();
      String string0 = "";
      Vec<String> vec2 = new Vec<String>(429, "");
      // Undeclared exception!
      try { 
        vec2.remove("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 429
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(16, "");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) vec0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) "";
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(430, vec1);
      vec2.clear();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      vec0.moveTo(4, 5);
      Vec<Integer> vec3 = new Vec<Integer>();
      Integer integer0 = new Integer(1326);
      vec3.indexOf(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sortUnique(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sort(comparator1);
      vec2.insertFirstWithShifting(vec1);
      vec0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(2957, vec0);
      Vec<Object> vec2 = new Vec<Object>(2957, vec0);
      // Undeclared exception!
      try { 
        vec1.removeFromLast(vec2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer((-1994));
      vec0.insertFirstWithShifting(integer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) integer0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(6, vec1);
      vec2.removeFromLast(vec1);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
      Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>(11, readOnlyVec0);
      vec3.last();
      vec1.indexOf(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.clear();
      vec0.insertFirstWithShifting((Object) null);
      vec0.remove((Object) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vec<String> vec0 = new Vec<String>(2719, "c Found solution #%d  (%.2f)s%n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(2719, 102, comparator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      vec0.shrinkTo(102);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vec0.insertFirstWithShifting("c Found solution #%d  (%.2f)s%n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      vec0.push("c Found solution #%d  (%.2f)s%n");
      vec0.shrink((-3544));
      vec0.unsafePush(" literals");
      System.setCurrentTimeMillis(102);
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>(439);
      vec1.ensure(0);
      vec1.size();
      vec1.clone();
      Integer integer0 = new Integer(0);
      Vec<Integer> vec2 = new Vec<Integer>(662, integer0);
      Integer integer1 = new Integer((-3544));
      vec2.indexOf(integer1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 1292;
      Vec<Object> vec0 = null;
      try {
        vec0 = new Vec<Object>((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer((-1994));
      vec0.insertFirstWithShifting(integer0);
      Object[] objectArray0 = new Object[4];
      Integer integer1 = new Integer(1);
      vec0.insertFirstWithShifting(integer1);
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(1, vec1);
      vec2.removeFromLast(vec1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(3531);
      int int0 = 1451;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        vec0.sort(7, 1562, (Comparator<Vec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<String> vec1 = new Vec<String>();
      vec0.indexOf(vec1);
      vec0.hashCode();
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>();
      int int0 = (-1244);
      ReadOnlyVec<ReadOnlyVec<Object>> readOnlyVec0 = new ReadOnlyVec<ReadOnlyVec<Object>>(vec2);
      // Undeclared exception!
      try { 
        vec2.moveTo((IVec<ReadOnlyVec<Object>>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.insertFirst((Object) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      int int0 = 2;
      vec0.ensure(2);
      vec0.toString();
      vec0.growTo(9, "B! md$GgY%~_U_");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, (-49), (-154), 1583, 212).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      vec0.insertFirst("");
      // Undeclared exception!
      try { 
        vec0.remove("Rs>O]y&@8|SwTp0cp");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.toString();
      vec0.isEmpty();
      Vec<Object> vec1 = new Vec<Object>();
      vec1.get(2);
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>();
      vec2.hashCode();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.toArray();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<Object> vec0 = new Vec<Object>(stringArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec0.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<String> vec1 = new Vec<String>(5, "{^X95{q");
      vec1.pop();
      Vec<Integer> vec2 = new Vec<Integer>();
      Vec<Integer> vec3 = new Vec<Integer>(5);
      Integer integer0 = new Integer(5);
      Vec<Integer> vec4 = new Vec<Integer>(5, integer0);
      Vec<Integer> vec5 = new Vec<Integer>(5);
      Vec<Integer>[] vecArray0 = (Vec<Integer>[]) Array.newInstance(Vec.class, 8);
      vecArray0[0] = vec4;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Vec<Integer> vec6 = new Vec<Integer>(integerArray0);
      vecArray0[1] = vec6;
      vecArray0[2] = vec3;
      vecArray0[3] = vec2;
      vecArray0[4] = vec4;
      vecArray0[5] = vec3;
      vecArray0[6] = vec4;
      vecArray0[7] = vec5;
      Vec<Vec<Integer>> vec7 = new Vec<Vec<Integer>>(vecArray0);
      vec7.contains(vec3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vec<Object> vec0 = new Vec<Object>(37, (Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1), (-1), 757, 757).when(comparator0).compare(any() , any());
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(37, vec0);
      Comparator<Vec<Object>> comparator1 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(757, 37, (-2529), 757, 2133).when(comparator1).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec1.sortUnique(comparator1);
      vec0.sortUnique(comparator0);
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 6);
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      vec2.ensure(2133);
      vec0.equals(vec1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.indexOf("|#/{/4L'");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(512, (ReadOnlyVec<Object>) null);
      vec0.isEmpty();
      Comparator<ReadOnlyVec<Object>> comparator0 = (Comparator<ReadOnlyVec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.sort(512, 3186, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1849
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec0.remove("{(vFI?*Z7ED~5l5e$");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(16, (Object) null);
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
      try { 
        vec0.sort((Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      Vec<Object> vec1 = new Vec<Object>();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[11];
      stringArray0[0] = "org.sat4j.core.Vec$1";
      int int0 = 2882;
      int int1 = (-1684);
      Integer integer0 = new Integer((-1684));
      Vec<Integer> vec0 = new Vec<Integer>(2882, integer0);
      vec0.remove(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2882, (-1684), (-2069), 2882, (-2069)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vec0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[10];
      Vec<Object> vec0 = new Vec<Object>(stringArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1082), 325, (-1082), (-1082), (-1082)).when(comparator0).compare(any() , any());
      vec0.sortUnique(comparator0);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(1829, readOnlyVec0);
      vec1.get(1353);
      readOnlyVec0.clone();
      Comparator<ReadOnlyVec<Object>> comparator1 = (Comparator<ReadOnlyVec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1938, 1, (-4101), 1238).when(comparator1).compare(nullable(org.sat4j.core.ReadOnlyVec.class) , nullable(org.sat4j.core.ReadOnlyVec.class));
      // Undeclared exception!
      vec1.sortUnique(comparator1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      vec0.clear();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      Vec<String> vec1 = new Vec<String>(1083);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      vec1.sort(1083, 1083, comparator1);
      vec1.equals((Object) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) vec1;
      objectArray0[1] = (Object) comparator1;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec2.last();
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>();
      vec3.set(1, vec1);
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      Vec<ReadOnlyVec<Integer>> vec4 = new Vec<ReadOnlyVec<Integer>>(1, readOnlyVec0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(697);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1083);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        vec4.copyTo(integerArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      vec0.iterator();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer(17);
      Vec<Integer> vec0 = new Vec<Integer>(17, integer0);
      vec0.size();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(5);
      int int0 = 16;
      Vec<String> vec2 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec2.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Vec<Object> vec1 = null;
      try {
        vec1 = new Vec<Object>((-946));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      int int0 = (-3173);
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-3173));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 1);
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(vecArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<String>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vec<Object> vec0 = new Vec<Object>(16, (Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(16, vec0);
      Vec<Object> vec2 = new Vec<Object>(757);
      // Undeclared exception!
      try { 
        vec1.equals(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(867, vec0);
      vec1.indexOf(vec0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(16, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(430, vec1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vec<String> vec3 = new Vec<String>();
      vec3.moveTo(4, 4);
      Vec<Integer> vec4 = new Vec<Integer>();
      Integer integer0 = new Integer(472);
      Integer integer1 = new Integer(1355);
      vec4.indexOf(integer1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec4.sortUnique(comparator0);
      Vec<Object> vec5 = new Vec<Object>(objectArray0);
      // Undeclared exception!
      try { 
        vec1.indexOf(vec5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Vec<String> vec1 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(3111, 992, comparator0);
      vec1.equals((Object) null);
      Vec<Object> vec2 = new Vec<Object>(stringArray0);
      vec2.last();
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>();
      // Undeclared exception!
      try { 
        vec3.delete(1640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1640
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.growTo(1034, (Object) null);
      vec0.hashCode();
      vec0.toArray();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.sat4j.core.Vec$1";
      stringArray0[1] = "8ywlOr)G3I.B5=Xib]";
      stringArray0[2] = "";
      stringArray0[3] = "org.sat4j.core.Vec$1";
      stringArray0[4] = "";
      stringArray0[5] = "o?b$`G";
      stringArray0[6] = "";
      stringArray0[7] = "_R>2AF'xY!^a(o[],6s";
      stringArray0[8] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.contains((String) null);
      Vec<Integer>[] vecArray0 = (Vec<Integer>[]) Array.newInstance(Vec.class, 5);
      Vec<Integer> vec1 = new Vec<Integer>(2000);
      vecArray0[0] = vec1;
      Vec<Integer> vec2 = new Vec<Integer>();
      vecArray0[1] = vec2;
      Vec<Integer> vec3 = new Vec<Integer>(2000);
      vecArray0[2] = vec3;
      Integer integer0 = new Integer(2000);
      Vec<Integer> vec4 = new Vec<Integer>(2000, integer0);
      vecArray0[3] = vec4;
      Vec<Integer> vec5 = new Vec<Integer>(1);
      vecArray0[4] = vec5;
      Vec<Vec<Integer>> vec6 = new Vec<Vec<Integer>>(vecArray0);
      vec6.contains(vec4);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      // Undeclared exception!
      try { 
        vec0.shrink(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(1534);
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1534, vec0);
      vec1.removeFromLast(vec0);
      vec1.shrinkTo(1534);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1534);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1534);
      integerArray0[2] = integer2;
      int int0 = 7;
      Integer integer3 = new Integer(7);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1534);
      integerArray0[5] = integer5;
      integerArray0[6] = integer2;
      Vec<Integer> vec2 = new Vec<Integer>(integerArray0);
      vec2.iterator();
      vec2.hashCode();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.remove((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.delete(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(2957, vec0);
      vec1.removeFromLast(vec0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      int int0 = 43;
      Integer integer0 = new Integer(43);
      vec0.insertFirstWithShifting(integer0);
      vec0.toString();
      // Undeclared exception!
      try { 
        vec0.remove((Integer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      Vec<String> vec1 = new Vec<String>(1083);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator1).toString();
      vec1.sort(1083, 1083, comparator1);
      vec1.equals((Object) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) vec1;
      objectArray0[1] = (Object) comparator1;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec2.last();
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>();
      vec3.set(1, vec1);
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      Vec<ReadOnlyVec<Integer>> vec4 = new Vec<ReadOnlyVec<Integer>>(1, readOnlyVec0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(697);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      Vec<ReadOnlyVec<String>> vec5 = new Vec<ReadOnlyVec<String>>(697);
      vec5.ensure(1083);
      vec5.size();
      vec5.clone();
      Integer integer2 = new Integer((-1722));
      Integer integer3 = new Integer(735);
      Vec<Integer> vec6 = new Vec<Integer>(662, integer3);
      Integer integer4 = new Integer(1083);
      vec0.indexOf(integer1);
      System.setCurrentTimeMillis((-2774L));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      Vec<Object> vec1 = new Vec<Object>(42);
      vec0.equals(vec1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object> vec1 = new Vec<Object>(4122);
      // Undeclared exception!
      try { 
        vec1.delete(4122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4122
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(16, "E");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "E";
      objectArray0[1] = (Object) vec0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) "E";
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) "E";
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(430, vec1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      vec0.moveTo(4, 5);
      Vec<Integer> vec3 = new Vec<Integer>();
      Integer integer0 = new Integer(4);
      vec3.insertFirst(integer0);
      Integer integer1 = new Integer(1355);
      vec3.indexOf(integer1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec3.sortUnique(comparator0);
      vec1.indexOf(vec2);
      vec1.iterator();
      // Undeclared exception!
      vec2.toString();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.shrinkTo(1252);
      // Undeclared exception!
      try { 
        vec0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.hashCode();
      vec0.shrinkTo(1440);
      boolean boolean0 = vec0.equals("WX");
      assertEquals(1440, vec0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      String[] stringArray0 = new String[0];
      Vec<String> vec1 = new Vec<String>(stringArray0);
      vec0.indexOf(vec1);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      Vec<ReadOnlyVec<String>> vec2 = null;
      try {
        vec2 = new Vec<ReadOnlyVec<String>>((-1), readOnlyVec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vec<Object> vec0 = new Vec<Object>(16, (Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1), (-1), 757, 757).when(comparator0).compare(any() , any());
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(16, vec0);
      Comparator<Vec<Object>> comparator1 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(757, 16, (-2529), 757, 2133).when(comparator1).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec1.sortUnique(comparator1);
      vec0.sortUnique(comparator0);
      vec0.hashCode();
      Vec<String> vec2 = new Vec<String>(16, "");
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec2);
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 6);
      readOnlyVecArray0[0] = readOnlyVec0;
      readOnlyVecArray0[1] = readOnlyVec0;
      readOnlyVecArray0[2] = readOnlyVec0;
      readOnlyVecArray0[0] = readOnlyVec0;
      readOnlyVecArray0[4] = readOnlyVec0;
      readOnlyVecArray0[5] = readOnlyVec0;
      Vec<ReadOnlyVec<String>> vec3 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(readOnlyVec0);
      vec3.indexOf(readOnlyVec1);
      vec0.equals(vec1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      // Undeclared exception!
      try { 
        vec0.get(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 887;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer(887);
      Vec<Integer> vec0 = new Vec<Integer>(1357, integer0);
      vec0.clone();
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vec<Integer> vec0 = new Vec<Integer>(10);
      Integer integer0 = new Integer(10);
      vec0.unsafePush(integer0);
      vec0.delete(7);
      vec0.size();
      Vec<String> vec1 = new Vec<String>();
      String string0 = "c Skipping constraint ";
      vec1.indexOf("c Skipping constraint ");
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      IVec<String> iVec0 = readOnlyVec0.clone();
      // Undeclared exception!
      try { 
        vec1.copyTo(iVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Vec<Integer> vec0 = new Vec<Integer>(1, integer0);
      vec0.remove(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      Vec<Object> vec1 = new Vec<Object>(1, integer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) vec1;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) vec1;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) vec0;
      objectArray0[8] = (Object) integer0;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      vec1.moveTo((IVec<Object>) vec2);
      vec1.insertFirst(integer0);
      vec1.pop();
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(16);
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>(19, vec1);
      Vec<Object> vec5 = new Vec<Object>(objectArray0);
      vec4.insertFirstWithShifting(vec5);
      vec3.copyTo((IVec<Vec<Object>>) vec4);
      vec3.indexOf(vec1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(102, vec0);
      Comparator<Vec<Object>> comparator0 = (Comparator<Vec<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sort(102, 1, comparator0);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer integer0 = new Integer((-1986));
      vec0.insertFirstWithShifting(integer0);
      vec0.insertFirstWithShifting(integer0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[16];
      Vec<Object> vec0 = new Vec<Object>(stringArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1069), 330, (-1069), (-1069), (-1069)).when(comparator0).compare(any() , any());
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        vec0.sortUnique(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      vec0.iterator();
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-4627), (-4627), Integer.MAX_VALUE, 5, (-4627)).when(comparator1).compare(any() , any());
      vec1.sortUnique(comparator1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(9, "");
      vec0.clone();
      vec0.insertFirst("E&< K|`7|,W5I,w");
      vec0.shrink(9);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Integer integer0 = new Integer(4);
      vec0.unsafePush(integer0);
      vec0.hashCode();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.sat4j.core.Vec$1";
      int int0 = 2882;
      Integer integer0 = new Integer((-1684));
      Vec<Integer> vec0 = new Vec<Integer>(2882, integer0);
      vec0.remove(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1684), 2882, (-1684), (-1684), 11).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      vec0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      int int0 = 2;
      vec0.ensure(2);
      vec0.toString();
      Vec<String> vec1 = new Vec<String>(2);
      vec0.moveTo((IVec<String>) vec1);
      vec0.growTo(9, "B! md$GgY%~_U_");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-954), 2, (-954), (-954), 15).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      vec0.insertFirst("");
      // Undeclared exception!
      try { 
        vec0.remove("Rs>O]y&@8|SwTp0cp");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Vec<Object> vec0 = new Vec<Object>(stringArray0);
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(7, vec0);
      boolean boolean0 = vec1.equals(vec0);
      assertEquals(7, vec1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bt~Oz{7YkWM6bC%!");
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      vec0.toString();
      Vec<Object> vec1 = new Vec<Object>();
      vec0.iterator();
      int int0 = (-1542);
      Integer integer0 = new Integer((-1542));
      vec1.insertFirstWithShifting(integer0);
      vec1.insertFirstWithShifting(vec0);
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer(534);
      Vec<Integer> vec0 = new Vec<Integer>(534, integer0);
      vec0.toString();
      assertEquals(534, vec0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      int int0 = 2;
      vec0.ensure(2);
      vec0.toString();
      vec0.growTo(9, "B! md$GgY%~_U_");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec0.sortUnique(comparator0);
      vec0.insertFirst("");
      // Undeclared exception!
      try { 
        vec0.remove("Rs>O]y&@8|SwTp0cp");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      IVec<ReadOnlyVec<String>> iVec0 = vec0.clone();
      assertEquals(0, iVec0.size());
      
      vec0.hashCode();
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 3531;
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(3531);
      // Undeclared exception!
      try { 
        vec0.delete(47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      int int0 = 99;
      // Undeclared exception!
      try { 
        vec0.moveTo(99, 1343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1343
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.remove("Armin Biere (Picosat) restarts strategy");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(3257);
      Integer integer0 = new Integer((-931));
      // Undeclared exception!
      try { 
        vec0.set(3257, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3257
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      Vec<Object> vec1 = new Vec<Object>(3526, vec0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec1.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      Vec<Object> vec1 = new Vec<Object>(42);
      // Undeclared exception!
      try { 
        vec0.removeFromLast(vec1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = (-1);
      ReadOnlyVec<Object> readOnlyVec0 = null;
      Vec<ReadOnlyVec<Object>> vec0 = null;
      try {
        vec0 = new Vec<ReadOnlyVec<Object>>((-1), (ReadOnlyVec<Object>) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }
}
