/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 23:28:57 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Room;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[10][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(10, floatArray0.length);
      assertNotNull(room0);
      
      room0.move(0.0F, (-1.0F));
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-1.0F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(10, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.containsPoint(361.843F, 2.0F, 0.0F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.isAreaCenterPointAt(1.0F, 1.0F, 1.0F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[6][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(6, room0.getPointCount());
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaYOffset(26.86734F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(26.86734F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(6, room0.getPointCount());
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = room0.isAreaCenterPointAt(604.7718F, 604.7718F, 604.7718F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(26.86734F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(6, room0.getPointCount());
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.move(4407.849F, 2486.542F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(2486.542F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(4407.849F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isAreaCenterPointAt(4407.849F, 38.76F, 38.76F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(2486.542F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(4407.849F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.move((-1.0F), 0.0F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-1.0F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isAreaCenterPointAt((-1.0F), (-1.0F), 4407.849F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-1.0F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 1305.0F;
      floatArray1[1] = (-2758.295F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals((-1379.1475F), room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(652.5F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.isNameCenterPointAt(1807.761F, (-1345.3375F), 1305.0F);
      assertEquals((-1379.1475F), room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(652.5F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameXOffset((-1189.0F));
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-1189.0F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isNameCenterPointAt(0.0F, 4.3054137F, (-1.0F));
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-1189.0F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setPoint(1.0F, 1.0F, 0);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.5F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = room0.isNameCenterPointAt(1.0774661F, (-1992.666F), (-40.0F));
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.5F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[6][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      room0.move((-40.0F), (-40.0F));
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getXCenter(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      int int0 = room0.getPointIndexAt(1398.6F, 1644.758F, 1582.496F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getXCenter(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[4][4];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (-822.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = 1376.1981F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertEquals((-411.0F), room0.getXCenter(), 0.01F);
      assertEquals(688.09906F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.isClockwise();
      assertEquals((-411.0F), room0.getXCenter(), 0.01F);
      assertEquals(688.09906F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.move(4407.849F, 2486.542F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2486.542F, room0.getYCenter(), 0.01F);
      assertEquals(4407.849F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isClockwise();
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2486.542F, room0.getYCenter(), 0.01F);
      assertEquals(4407.849F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(4, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaAngle(143.50658F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(5.2764997F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(4, floatArray0.length);
      
      room0.setAreaAngle((-3446.7966F));
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2.6721027F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.removePoint(1);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.removePoint(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      room0.setPoint(0, 0.66225445F, 0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.33112723F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.move(935.65326F, (-1.0F));
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals((-1.0F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(935.65326F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(3, floatArray0.length);
      
      room0.setPoint(1.0F, 1.0F, 0);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(468.32663F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.setPoint((-40.0F), (-40.0F), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.addPoint(0.0F, (-1.0F));
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameAngle(2.0F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setNameAngle(0.0F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameAngle((-1.0F));
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(5.2831855F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameYOffset((-1220.0F));
      assertEquals((-1220.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setName("Kcdm07cL!");
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals("Kcdm07cL!", room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(3, floatArray0.length);
      
      room0.setName("Kcdm07cL!");
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals("Kcdm07cL!", room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      float[] floatArray1 = new float[2];
      floatArray1[0] = 5.7432184F;
      floatArray1[1] = (-933.27F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = (-933.27F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[2];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (-1.0F);
      floatArray0[4] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-466.635F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2.3716092F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.isSingular();
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-466.635F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2.3716092F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setFloorVisible(false);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isFloorVisible();
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(room0);
      
      room0.setCeilingVisible(false);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = room0.isCeilingVisible();
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.intersectsRectangle(1367.42F, (-993.76F), (-993.76F), 1367.42F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setPoint(1.0F, 1.0F, 0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.5F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, floatArray0.length);
      
      float float0 = room0.getYCenter();
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.5F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.5F, float0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      float[] floatArray1 = new float[8];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getYCenter();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-0.5F), float0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1811.98F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(905.99F, room0.getXCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getXCenter();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(905.99F, room0.getXCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(905.99F, float0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-1.0F);
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-0.5F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getXCenter();
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-0.5F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-0.5F), float0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[7];
      floatArray1[1] = (-1660.6118F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals((-830.3059F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      int int0 = room0.getPointIndexAt(1027.5598F, 0.0F, 1552.3F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals((-830.3059F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(1, int0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameYOffset(0.0F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(2, floatArray0.length);
      
      float float0 = room0.getNameYOffset();
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[6][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameYOffset(1582.496F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(1582.496F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      float float0 = room0.getNameYOffset();
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(1582.496F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(1582.496F, float0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = new float[6][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameXOffset(64.901F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(64.901F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      float float0 = room0.getNameXOffset();
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(64.901F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(64.901F, float0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameXOffset((-1.0F));
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(5, floatArray0.length);
      
      float float0 = room0.getNameXOffset();
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameAngle(1577.32F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.24043418F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      float float0 = room0.getNameAngle();
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.24043418F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.24043418F, float0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[][] floatArray0 = new float[6][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      room0.setName("AREA_X_OFFSET");
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals("AREA_X_OFFSET", room0.getName());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string0 = room0.getName();
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals("AREA_X_OFFSET", room0.getName());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals("AREA_X_OFFSET", string0);
      assertEquals(6, floatArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(room0);
      
      room0.setName("");
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals("", room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(8, floatArray0.length);
      
      String string0 = room0.getName();
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals("", room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals("", string0);
      assertEquals(8, floatArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      Level level0 = new Level("{9-oXWXM:Kr_", 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("{9-oXWXM:Kr_", level0.getName());
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      room0.setLevel(level0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("{9-oXWXM:Kr_", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2, floatArray0.length);
      
      Level level1 = room0.getLevel();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("{9-oXWXM:Kr_", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(level1);
      assertSame(level1, level0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[6][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      Integer integer0 = new Integer(17);
      assertEquals(17, (int)integer0);
      assertNotNull(integer0);
      
      room0.setFloorColor(integer0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(17, (int)room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      Integer integer1 = room0.getFloorColor();
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(17, (int)room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(17, (int)integer1);
      assertEquals(6, floatArray0.length);
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      room0.setCeilingColor(integer0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, (int)room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(5, floatArray0.length);
      
      Integer integer1 = room0.getCeilingColor();
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, (int)room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(2, (int)integer1);
      assertEquals(5, floatArray0.length);
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[][] floatArray0 = new float[6][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      Integer integer0 = new Integer((-475));
      assertEquals((-475), (int)integer0);
      assertNotNull(integer0);
      
      room0.setCeilingColor(integer0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals((-475), (int)room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      Integer integer1 = room0.getCeilingColor();
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals((-475), (int)room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-475), (int)integer1);
      assertEquals(6, floatArray0.length);
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaXOffset(905.7505F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(905.7505F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, floatArray0.length);
      
      float float0 = room0.getAreaXOffset();
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(905.7505F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(905.7505F, float0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = room0.containsPoint(0.0F, 3.3421798F, 458.52527F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setFloorVisible(false);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertFalse(room1.isFloorVisible());
      assertTrue(room1.isCeilingVisible());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertFalse(room1.equals((Object)room0));
      assertEquals(2, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-797.24F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = (-797.24F);
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-398.62F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals((-398.62F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-398.62F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals((-398.62F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isClockwise());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getName());
      assertNull(room1.getFloorColor());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals((-398.62F), room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-398.62F), room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setCeilingVisible(false);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertFalse(room1.isClockwise());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertFalse(room1.equals((Object)room0));
      assertEquals(2, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaVisible(false);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertFalse(room1.isAreaVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertFalse(room1.equals((Object)room0));
      assertEquals(2, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setPoint(1.0F, 1.0F, 0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.5F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.5F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.5F, room1.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertFalse(room1.isClockwise());
      assertEquals(3, room1.getPointCount());
      assertEquals(0.5F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameYOffset(0.0F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameYOffset(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameXOffset(0.57746613F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.57746613F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.57746613F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.57746613F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertFalse(room1.equals((Object)room0));
      assertEquals(2, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameXOffset((-1.0F));
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(5, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertEquals((-1.0F), room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(5, room1.getPointCount());
      assertFalse(room1.equals((Object)room0));
      assertEquals(5, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setNameAngle(2.0F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(2.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(2.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(2.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertFalse(room1.equals((Object)room0));
      assertEquals(2, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setFloorShininess(1.0F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(1.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(1.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertFalse(room1.isClockwise());
      assertTrue(room1.isFloorVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(2, room1.getPointCount());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(1.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertFalse(room1.equals((Object)room0));
      assertEquals(2, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setFloorShininess((-2000.9772F));
      assertEquals((-2000.9772F), room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals((-2000.9772F), room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals((-2000.9772F), room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertFalse(room1.equals((Object)room0));
      assertEquals(2, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      room0.setCeilingShininess(1377.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(1377.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(5, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(1377.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(1377.0F, room1.getCeilingShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(5, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertFalse(room1.equals((Object)room0));
      assertEquals(5, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaYOffset(1.0F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(1.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(5, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(1.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertEquals(1.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(5, room1.getPointCount());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertFalse(room1.equals((Object)room0));
      assertEquals(5, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      float[][] floatArray0 = new float[10][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(10, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaYOffset((-40.0F));
      assertEquals((-40.0F), room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(10, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals((-40.0F), room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(10, room1.getPointCount());
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertFalse(room1.equals((Object)room0));
      assertEquals(10, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaXOffset(1.0F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(1.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(1.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(1.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      float[][] floatArray0 = new float[6][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaXOffset((-1467.944F));
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-1467.944F), room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-1467.944F), room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals((-1467.944F), room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(6, room1.getPointCount());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      room0.setAreaAngle((-4894.085F));
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.51639336F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.51639336F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertNull(room1.getName());
      assertNull(room1.getFloorColor());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.51639336F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertFalse(room1.isClockwise());
      assertFalse(room1.equals((Object)room0));
      assertEquals(2, floatArray0.length);
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.setPoint((-5833.458F), 0.0F, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      float[][] floatArray0 = new float[6][0];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.move(2509.058F, (-721.50586F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      float[][] floatArray0 = new float[4][0];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(4, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.isSingular();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.isNameCenterPointAt(4, (-1189.0F), 2.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      float[][] floatArray0 = new float[6][0];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(6, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.isClockwise();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      float[][] floatArray0 = new float[3][0];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.isAreaCenterPointAt((-1.0F), (-1.0F), 1973.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      float[] floatArray1 = new float[1];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.intersectsRectangle(876.0F, 2670.8914F, 2.0F, 876.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      float[] floatArray1 = new float[1];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.getYCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.getXCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.getPointIndexAt(1759.1656F, 134.0F, (-1810.21F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[0];
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.getArea();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      float[] floatArray1 = new float[1];
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        room0.containsPoint((-116), (-1437.9203F), (-40.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.setFloorVisible(true);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      float[][] floatArray0 = new float[10][9];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(10, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getYCenter();
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(10, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getXCenter();
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      room0.addPoint((float) 0, (-1137.9847F), 0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-568.9924F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(4, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(3, floatArray0.length);
      assertNotNull(room0);
      
      float[][] floatArray1 = room0.getPoints();
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      float[][] floatArray0 = new float[10][9];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(10, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getNameYOffset();
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), float0, 0.01F);
      assertEquals(10, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      float float0 = room0.getAreaXOffset();
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2, floatArray0.length);
  }
}
