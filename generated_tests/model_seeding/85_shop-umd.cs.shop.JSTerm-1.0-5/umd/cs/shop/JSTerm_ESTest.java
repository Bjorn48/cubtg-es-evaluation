/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 20:27:39 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4)y");
      StringReader stringReader1 = new StringReader("4)y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.toStr();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = (-74);
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.standarizerSubs();
      jSSubstitution0.sort(comparator0);
      JSJshopVars.colon = (-74);
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      jSSubstitution0.addElements(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(".@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("RSdWr{f81!:Fh");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%wOZ@d-g?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.makeConstant();
      jSTerm0.isGround();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CkN]g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-2682));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      jSTerm0.makeVariable();
      jSTerm0.standardizerTerm();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(1267);
      streamTokenizer0.commentChar(1267);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.addElement("RSdWr{f81!:Fh");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isGround();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals(jSTerm0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      JSJshopVars.dot = (-2220);
      jSTerm0.removeAllElements();
      jSTerm1.addElement(jSTerm0);
      JSJshopVars.apostrophe = (-2220);
      JSJshopVars.dot = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      jSTerm0.makeConstant();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeConstant();
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      
      jSTerm0.makeVariable();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.addElement(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.addElement("]+QqA5,qr@G");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")PZ:td`OPP{|F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      jSTerm1.isGround();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.isGround();
      jSTerm1.standardizerTerm();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.call();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?Y~{}Yz(Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.removeAllElements();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[[(this Collection)]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT((JSSubstitution) null);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertEquals(2, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertEquals("[[(this Collection)], [[(this Collection)]]]", jSTerm3.toString());
      assertFalse(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isFunction());
      assertNotNull(jSTerm3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.removeAllElements();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      jSTerm0.addElement(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      StreamTokenizer streamTokenizer0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("?Y~{}Yz(Z");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotNull(streamTokenizer0);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(1, jSSubstitution1.size());
      assertFalse(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSSubstitution1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeConstant();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      
      jSSubstitution1.assignFailure();
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      
      jSTerm1.removeAllElements();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      
      jSTerm1.addElement(jSSubstitution0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      
      jSTerm1.makeVariable();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isVariable());
      
      jSTerm0.makeConstant();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      boolean boolean0 = jSTerm1.isVariable();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean0);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      
      jSTerm0.add(0, (Object) jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      
      JSJshopVars.dot = (-2220);
      JSJshopVars.exclamation = (-2220);
      jSTerm0.removeAllElements();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      
      JSJshopVars.apostrophe = (-2220);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSSubstitution0.cloneS();
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      
      jSSubstitution0.assignFailure();
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSSubstitution0.replaceAll(unaryOperator0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSSubstitution3.size());
      assertTrue(jSSubstitution3.fail());
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals(10, jSSubstitution3.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution3);
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      
      boolean boolean0 = jSTerm0.containsAll(jSTerm0);
      assertTrue(boolean0);
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      
      jSTerm0.addElement(jSTerm0);
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertNotNull(jSTerm1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      jSTerm0.addElement((Object) null);
      assertEquals("[(this Collection), null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      
      jSTerm0.addElement(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[(this Collection), []]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.isEmpty();
      assertTrue(boolean0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".yie90j03K+F2%1");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      assertNotNull(streamTokenizer0);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotNull(jSTerm0);
      
      jSTerm0.print();
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[(this Collection)] ", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.removeAllElements();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      
      jSTerm0.addElement(jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      
      jSTerm0.makeEval(true);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      
      jSTerm0.addElement(jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[[], []]", jSTerm0.toString());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      assertEquals("[]", jSPredicateForm0.toString());
      assertTrue(jSPredicateForm0.isEmpty());
      assertEquals(0, jSPredicateForm0.size());
      assertEquals(10, jSPredicateForm0.capacity());
      assertNotNull(jSPredicateForm0);
      
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      
      jSTerm0.add(0, (Object) jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      
      JSJshopVars.dot = (-2220);
      jSTerm0.removeAllElements();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      
      JSJshopVars.apostrophe = (-2220);
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean0);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals("[[]]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals("[[]]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("([] )", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("?Y~{}Yz(Z");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotNull(streamTokenizer0);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = null;
      JSJshopVars.semicolon = 34;
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader(",");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotNull(streamTokenizer0);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      boolean boolean0 = jSTerm0.containsAll(jSTerm0);
      assertTrue(boolean0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      
      jSTerm0.print();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSSubstitution0.instance((JSTerm) null);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNull(jSTerm1);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSTerm2.isFunction());
      assertEquals("[[(this Collection)]]", jSTerm2.toString());
      assertTrue(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hv(/T?UN]vX%=aW");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      assertNotNull(streamTokenizer0);
      
      streamTokenizer0.ordinaryChar((-4));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSTerm0);
      
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSTerm1);
      
      JSJshopVars.leftPar = (-910);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSTerm2);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSSubstitution1);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSSubstitution2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      jSTerm1.makeVariable();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[(this Collection), []]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[(this Collection), []]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      int int0 = 0;
      jSTerm0.clear();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      
      jSTerm0.add(0, (Object) jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      
      jSTerm0.addElement((Object) null);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[[], null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.removeAllElements();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertEquals("([(this Collection)] ([(this Collection)] ))", stringBuffer0.toString());
      assertEquals(44, stringBuffer0.length());
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      jSTerm0.add(0, (Object) jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      
      jSTerm0.removeAllElements();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      
      JSJshopVars.apostrophe = (-2220);
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals("[[]]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSTerm2);
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[[], []]", jSTerm1.toString());
      
      boolean boolean1 = jSTerm1.equals(jSTerm2);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[[], []]", jSTerm1.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals("[[]]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      
      JSJshopVars.dot = (-2220);
      jSTerm0.removeAllElements();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[[]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      
      JSJshopVars.apostrophe = (-2220);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeConstant();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[[]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertEquals("[[]]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("?s:bWSx6w");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      assertNotNull(streamTokenizer0);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSSubstitution1);
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4)y");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotNull(streamTokenizer0);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=4.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[4.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotNull(jSTerm0);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("Token[n=4.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[4.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(4, stringBuffer0.length());
      assertEquals("4.0 ", stringBuffer0.toString());
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.removeAllElements();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort((Comparator) null);
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals("[[(this Collection)]]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      
      jSTerm0.add(0, (Object) jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      
      jSTerm0.removeAllElements();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      
      JSJshopVars.apostrophe = (-2220);
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[[]]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertNotNull(jSTerm2);
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[[], []]", jSTerm1.toString());
      
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D v");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      assertNotNull(streamTokenizer0);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[D]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[D]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSSubstitution1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.removeAllElements();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      Stream stream0 = jSTerm0.parallelStream();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(stream0);
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      
      jSTerm0.print();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[(this Collection)]]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSTerm2);
      
      boolean boolean1 = jSTerm2.isFunction();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[(this Collection)]]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      
      jSTerm0.removeAllElements();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      
      jSTerm0.addElement(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[(this Collection)]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      boolean boolean1 = jSSubstitution0.fail();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      
      jSTerm1.print();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[(this Collection)]", jSTerm0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[(this Collection)], [(this Collection)]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("?s:bWSx6w");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotNull(streamTokenizer0);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotNull(jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotNull(jSSubstitution1);
      
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hv(/T?UN]vX%=aW");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      assertNotNull(streamTokenizer0);
      
      streamTokenizer0.ordinaryChar((-4));
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSTerm0);
      
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSTerm1);
      
      JSJshopVars.leftPar = (-910);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSTerm2);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSSubstitution1);
      
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[%%%]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotNull(jSTerm3);
      
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm3.isFunction();
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[%%%]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      
      jSTerm0.add(0, (Object) jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      
      jSTerm0.removeAllElements();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      
      JSJshopVars.apostrophe = (-2220);
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[[]]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[], []]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      
      boolean boolean1 = jSTerm0.equals(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[], []]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[[]]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      
      boolean boolean2 = jSTerm1.isEval();
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[], []]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      
      jSTerm0.add(0, (Object) jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      
      JSJshopVars.dot = (-2220);
      jSTerm1.addElement(jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      
      JSJshopVars.apostrophe = (-2220);
      jSTerm0.makeEval(true);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.clear();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      
      jSTerm0.add(0, (Object) jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      
      JSJshopVars.dot = (-2220);
      jSTerm0.removeAllElements();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      jSTerm1.addElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      
      JSJshopVars.apostrophe = (-2220);
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean0);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
