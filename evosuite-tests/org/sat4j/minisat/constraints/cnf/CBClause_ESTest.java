/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:32:19 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CBClause_ESTest extends CBClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(446);
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      cBClause0.falsified = (-444);
      // Undeclared exception!
      try { 
        cBClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      cBClause0.undo(2944);
      String string0 = cBClause0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      cBClause0.rescaleBy(0.0);
      assertEquals(0.0, cBClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      cBClause0.undo(1262);
      cBClause0.undo(1262);
      cBClause0.setLearnt();
      // Undeclared exception!
      try { 
        cBClause0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.calcReason(0, iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      vecInt0.insertFirst(509);
      // Undeclared exception!
      try { 
        cBClause0.calcReason(1285, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(295);
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(446);
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      cBClause0.falsified = 446;
      // Undeclared exception!
      try { 
        cBClause0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      cBClause0.falsified = 446;
      cBClause0.remove();
      assertFalse(cBClause0.simplify());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.sortUnique();
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      int int0 = cBClause0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      cBClause0.setLearnt();
      boolean boolean0 = cBClause0.learnt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-2819));
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      // Undeclared exception!
      try { 
        CBClause.brandNewClause((UnitPropagationListener) null, (ILits) null, readOnlyVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CBClause.brandNewClause((UnitPropagationListener) null, (ILits) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(1617);
      // Undeclared exception!
      try { 
        CBClause.brandNewClause((UnitPropagationListener) null, (ILits) null, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(2686);
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause((IVecInt) null, (ILits) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt(43);
      IVecInt iVecInt0 = vecInt0.pop();
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause(iVecInt0, (ILits) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause(readOnlyVecInt0, (ILits) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause((IVecInt) null, (ILits) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo((-730));
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause(vecInt0, (ILits) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink((-3828));
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause(vecInt0, (ILits) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      cBClause0.register();
      assertEquals(0.0, cBClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-2819));
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      cBClause0.calcReason((-1), vecInt0);
      assertEquals(0.0, cBClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(446);
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.calcReason((-2485), vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        cBClause0.calcReason(500, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = CBClause.brandNewClause((UnitPropagationListener) null, (ILits) null, iVecInt0);
      // Undeclared exception!
      try { 
        cBClause0.calcReason((-21), iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(2);
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      boolean boolean0 = cBClause0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = CBClause.brandNewClause((UnitPropagationListener) null, (ILits) null, iVecInt0);
      // Undeclared exception!
      try { 
        cBClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.forwardActivity(3547.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.canBeSatisfiedByCountingLiterals();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      int int0 = cBClause0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.toString((VarMapper) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      cBClause0.undo(1262);
      cBClause0.setLearnt();
      cBClause0.register();
      assertTrue(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = CBClause.brandNewClause((UnitPropagationListener) null, (ILits) null, iVecInt0);
      // Undeclared exception!
      try { 
        cBClause0.get(3537);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3537
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.setActivity(1714.693965555);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = CBClause.brandNewClause((UnitPropagationListener) null, (ILits) null, iVecInt0);
      // Undeclared exception!
      try { 
        cBClause0.getAssertionLevel(iVecInt0, (-10));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.calcReasonOnTheFly((-382), iVecInt0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.propagatePI((MandatoryLiteralListener) null, 777);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.requiredNumberOfSatisfiedLiterals();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      boolean boolean0 = cBClause0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      cBClause0.incActivity((-1720.18176825676));
      assertEquals((-1720.18176825676), cBClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      cBClause0.setLearnt();
      // Undeclared exception!
      try { 
        cBClause0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      double double0 = cBClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null, false);
      // Undeclared exception!
      try { 
        cBClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.canBePropagatedMultipleTimes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = CBClause.brandNewClause((UnitPropagationListener) null, (ILits) null, iVecInt0);
      cBClause0.rescaleBy(0.999);
      assertEquals(0.0, cBClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      Constr constr0 = cBClause0.toConstraint();
      assertFalse(constr0.learnt());
  }
}
