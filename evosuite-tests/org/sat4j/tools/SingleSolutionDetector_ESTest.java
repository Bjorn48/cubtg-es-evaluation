/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:57:58 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingleSolutionDetector_ESTest extends SingleSolutionDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(1239.0, 1239.0, 1239.0, 1973);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, arminRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(2899);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, (-4425L), solutionFoundListener0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(minimal4CardinalityModel0);
      solver0.findModel((IVecInt) vecInt0);
      AbstractMinimalModel.positiveLiterals(modelIteratorToSATAdapter0);
      // Undeclared exception!
      singleSolutionDetector0.hasASingleSolution(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(156);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution((IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector((ISolver) null);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      NegationDecorator<ManyCore<MinOneDecorator>> negationDecorator0 = new NegationDecorator<ManyCore<MinOneDecorator>>(manyCore0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(negationDecorator0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution(iVecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(1239.0, 1239.0, 1239.0, 1973);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, glucose21Restarts0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(solver0);
      VecInt vecInt0 = new VecInt(1973);
      IVecInt iVecInt0 = vecInt0.push(1973);
      IVecInt iVecInt1 = solver0.dimacs2internal(iVecInt0);
      singleSolutionDetector0.isSatisfiable(iVecInt1);
      // Undeclared exception!
      singleSolutionDetector0.hasASingleSolution();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector((ISolver) null);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(subModelIteratorArray0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(manyCore0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(1239.0, 1239.0, 1239.0, 1973);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, glucose21Restarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      solver0.isSatisfiable();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0, (-3298L));
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(subModelIterator0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LexicoDecorator<SingleSolutionDetector> lexicoDecorator0 = new LexicoDecorator<SingleSolutionDetector>((SingleSolutionDetector) null);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(lexicoDecorator0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(subModelIteratorArray0);
      manyCore0.winnerId = (-1375);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(manyCore0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(1239.0, 1239.0, 1239.0, 1973);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, arminRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1973);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(iSolver0);
      solver0.findModel((IVecInt) vecInt0);
      boolean boolean0 = singleSolutionDetector0.hasASingleSolution((IVecInt) vecInt0);
      assertEquals(1973, iSolver0.realNumberOfVariables());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(1239.0, 1239.0, 1239.0, 1973);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, arminRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(2899);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(minimal4CardinalityModel0);
      solver0.findModel((IVecInt) vecInt0);
      boolean boolean0 = singleSolutionDetector0.hasASingleSolution(iVecInt0);
      assertEquals(2899, iSolver0.nVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(1239.0, 1239.0, 1239.0, 1973);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, arminRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      VecInt vecInt0 = new VecInt();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(minimal4CardinalityModel0);
      singleSolutionDetector0.isSatisfiable();
      boolean boolean0 = singleSolutionDetector0.hasASingleSolution((IVecInt) vecInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(1239.0, 1239.0, 1239.0, 1973);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, glucose21Restarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      solver0.isSatisfiable();
      VecInt vecInt0 = new VecInt(1973);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0, 4L);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(subModelIterator0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      boolean boolean0 = singleSolutionDetector0.hasASingleSolution();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(1239.0, 1239.0, 1239.0, 1973);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, arminRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1973);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(iSolver0);
      solver0.findModel((IVecInt) vecInt0);
      boolean boolean0 = singleSolutionDetector0.hasASingleSolution();
      assertEquals(1973, iSolver0.nVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, solutionFoundListener0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution((IVecInt) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams(1973, 1973, 1973, 1973);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, glucose21Restarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(iSolver0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }
}
