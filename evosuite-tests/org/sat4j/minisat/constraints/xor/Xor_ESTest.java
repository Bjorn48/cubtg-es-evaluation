/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:01:49 GMT 2019
 */

package org.sat4j.minisat.constraints.xor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.xor.Xor;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Xor_ESTest extends Xor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      xor0.calcReason(999, vecInt0);
      assertFalse(xor0.simplify());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      mixedDataStructureSingleWL0.createClause(vecInt0);
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, true, lits0);
      xor0.remove((UnitPropagationListener) null);
      assertEquals(2, xor0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, lits0);
      xor0.remove((UnitPropagationListener) null);
      assertFalse(xor0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = new Xor(vecInt0, false, lits0);
      xor0.register();
      assertFalse(xor0.simplify());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      Xor xor0 = new Xor(vecInt0, false, (ILits) null);
      int int0 = xor0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      int int0 = xor0.get(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = new Xor(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, false, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, false, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.get((-925));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -925
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        Xor.createParityConstraint(vecInt0, true, (ILits) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        Xor.createParityConstraint(vecInt0, true, (ILits) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, true, lits0);
      lits0.satisfies(1);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        xor0.calcReason((-1512), readOnlyVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.calcReason(11, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[3];
      intArray0[1] = (-2127);
      VecInt vecInt1 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      vecInt1.moveTo2(vecInt0);
      Xor xor0 = new Xor(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.calcReason(1770, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2127
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Xor xor0 = null;
      try {
        xor0 = new Xor((IVecInt) null, true, (ILits) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      Xor xor0 = null;
      try {
        xor0 = new Xor(vecInt0, false, (ILits) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(4955);
      Xor xor0 = null;
      try {
        xor0 = new Xor(vecInt0, false, (ILits) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.pushAll(vecInt0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, lits0);
      lits0.satisfies(0);
      xor0.calcReason(0, vecInt0);
      assertEquals(7, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.calcReason((-1), vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.pushAll(vecInt0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, lits0);
      xor0.propagate((UnitPropagationListener) null, 0);
      lits0.satisfies(1);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.pushAll(vecInt0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, lits0);
      xor0.propagate((UnitPropagationListener) null, 0);
      lits0.satisfies(1);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, (-1298));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1298
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, true, lits0);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Xor xor0 = new Xor(iVecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1683));
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      Xor xor0 = new Xor(iVecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.getActivity();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      boolean boolean0 = xor0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      int int0 = lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, true, lits0);
      int int1 = xor0.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.locked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, false, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.calcReasonOnTheFly(5000, vecInt0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      boolean boolean0 = xor0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      DotSearchTracing<DimacsStringSolver> dotSearchTracing0 = new DotSearchTracing<DimacsStringSolver>("Explanation (MUS) enabled solver");
      // Undeclared exception!
      try { 
        xor0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.requiredNumberOfSatisfiedLiterals();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.forwardActivity(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      Xor xor0 = new Xor(iVecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.incActivity(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      Constr constr0 = xor0.toConstraint();
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      int int0 = xor0.get(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.setActivity(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, false, (ILits) null);
      boolean boolean0 = xor0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      Xor xor0 = Xor.createParityConstraint(vecInt0, true, lits0);
      boolean boolean0 = xor0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, false, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(vecInt0, false, lits0);
      // Undeclared exception!
      try { 
        xor0.rescaleBy((-3106.5523169));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        Xor.createParityConstraint(vecInt0, true, lits0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.getAssertionLevel(vecInt0, (-18));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Lits lits0 = new Lits();
      Xor xor0 = new Xor(iVecInt0, false, lits0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      // Undeclared exception!
      try { 
        xor0.propagatePI(watcherBasedPrimeImplicantStrategy0, 9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }
}
