/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:48:30 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.ExitCode;
import org.sat4j.MUSLauncher;
import org.sat4j.specs.ISolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MUSLauncher_ESTest extends MUSLauncher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        MUSLauncher.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.prime = true;
      // Undeclared exception!
      try { 
        mUSLauncher0.createReader((ISolver) null, "ap&%H]{mL,#AU");
       //  fail("Expecting exception: IllegalAccessError");
       // Unstable assertion
      } catch(IllegalAccessError e) {
         //
         // tried to access field org.sat4j.AbstractLauncher.silent from class org.sat4j.MUSLauncher
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.displayResult();
      assertEquals(0L, mUSLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[5];
      stringArray0[4] = "c ";
      String string0 = mUSLauncher0.getInstanceName(stringArray0);
      assertEquals("c ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[8];
      stringArray0[7] = "";
      String string0 = mUSLauncher0.getInstanceName(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c ";
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
       //  fail("Expecting exception: IllegalAccessError");
       // Unstable assertion
      } catch(IllegalAccessError e) {
         //
         // tried to access field org.sat4j.AbstractLauncher.silent from class org.sat4j.MUSLauncher
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.getInstanceName((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.configureSolver(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c ";
      // Undeclared exception!
      try { 
        mUSLauncher0.configureSolver(stringArray0);
       //  fail("Expecting exception: IllegalAccessError");
       // Unstable assertion
      } catch(IllegalAccessError e) {
         //
         // tried to access field org.sat4j.AbstractLauncher.silent from class org.sat4j.MUSLauncher
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        mUSLauncher0.configureSolver(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.usage();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MUSLauncher.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String string0 = mUSLauncher0.getInstanceName(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      MUSLauncher.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }
}
