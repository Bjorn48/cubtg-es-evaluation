/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:25:34 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SolutionCounter_ESTest extends SolutionCounter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsOutputSolver0);
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-929);
      intArray0[1] = (-929);
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, false).when(singleSolutionDetector0).isSatisfiable(anyBoolean());
      doReturn(intArray0).when(singleSolutionDetector0).model();
      doReturn(1, (-929)).when(singleSolutionDetector0).nVars();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(singleSolutionDetector0, solutionFoundListener0);
      SolutionCounter solutionCounter0 = new SolutionCounter(abstractMinimalModel0);
      long long0 = solutionCounter0.countSolutions();
      assertEquals(1, solutionCounter0.lowerBound());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SolutionCounter solutionCounter0 = new SolutionCounter((ISolver) null);
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-1);
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(singleSolutionDetector0).isSatisfiable(anyBoolean());
      doReturn(intArray0).when(singleSolutionDetector0).model();
      doReturn(1, 1, 1).when(singleSolutionDetector0).nVars();
      doReturn(0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = new NegationDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(negationDecorator0, solutionFoundListener0);
      SolutionCounter solutionCounter0 = new SolutionCounter(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[3];
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(singleSolutionDetector0).isSatisfiable(anyBoolean());
      doReturn(intArray0).when(singleSolutionDetector0).model();
      doReturn(1, 1, 1).when(singleSolutionDetector0).nVars();
      doReturn(1, 0, 1, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = new NegationDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(negationDecorator0, solutionFoundListener0);
      SolutionCounter solutionCounter0 = new SolutionCounter(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(groupClauseSelectorSolver0);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      SolutionCounter solutionCounter0 = new SolutionCounter(fullClauseSelectorSolver0);
      long long0 = solutionCounter0.countSolutions();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounter0.countSolutions();
      int int0 = solutionCounter0.lowerBound();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      int int0 = solutionCounter0.lowerBound();
      assertEquals(0, int0);
  }
}
