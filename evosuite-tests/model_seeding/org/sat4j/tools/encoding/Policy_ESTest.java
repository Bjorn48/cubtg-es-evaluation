/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:19:19 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.EncodingStrategy;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Policy;
import org.sat4j.tools.encoding.Sequential;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Policy_ESTest extends Policy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      policy0.setExactlyOneEncoding(encodingStrategyAdapter0);
      EncodingStrategyAdapter encodingStrategyAdapter1 = policy0.getExactlyOneEncoding();
      assertSame(encodingStrategyAdapter1, encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      policy0.setExactlyKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      Policy policy0 = new Policy();
      policy0.setAtMostOneEncoding(encodingStrategyAdapter0);
      EncodingStrategyAdapter encodingStrategyAdapter1 = policy0.getAtMostOneEncoding();
      assertSame(encodingStrategyAdapter1, encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Policy policy0 = new Policy();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addExactly(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(0, 15, 15, 57, 6).when(solutionCounter0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solutionCounter0);
      IConstr iConstr0 = policy0.addExactly(solutionCounter0, iVecInt0, (-2355));
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Policy policy0 = new Policy();
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[8];
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(solutionCounter0).addExactly(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(0, 0).when(solutionCounter0).nVars();
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounter0;
      solutionCounterArray0[2] = solutionCounter0;
      solutionCounterArray0[3] = solutionCounter0;
      solutionCounterArray0[4] = solutionCounter0;
      solutionCounterArray0[5] = solutionCounter0;
      solutionCounterArray0[6] = solutionCounter0;
      solutionCounterArray0[7] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(true, solutionCounterArray0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solutionCounter0);
      IConstr iConstr0 = policy0.addExactly(manyCore0, iVecInt0, 78);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Policy policy0 = new Policy();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(0, 15, 15, 0).when(solutionCounter0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solutionCounter0);
      IConstr iConstr0 = policy0.addAtMost(solutionCounter0, iVecInt0, 7);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Policy policy0 = new Policy();
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[8];
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(solutionCounter0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(0, 0).when(solutionCounter0).nVars();
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounter0;
      solutionCounterArray0[2] = solutionCounter0;
      solutionCounterArray0[3] = solutionCounter0;
      solutionCounterArray0[4] = solutionCounter0;
      solutionCounterArray0[5] = solutionCounter0;
      solutionCounterArray0[6] = solutionCounter0;
      solutionCounterArray0[7] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(true, solutionCounterArray0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solutionCounter0);
      SolutionCounter solutionCounter1 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(manyCore0).when(solutionCounter1).getSolvingEngine();
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter1);
      ISolver iSolver0 = clausalCardinalitiesDecorator0.getSolvingEngine();
      IConstr iConstr0 = policy0.addAtLeast(iSolver0, iVecInt0, 0);
      assertEquals(8, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      VecInt vecInt0 = new VecInt(1236, 1357);
      policy0.setExactlyKEncoding(encodingStrategy0);
      // Undeclared exception!
      policy0.addExactly((ISolver) null, vecInt0, 1357);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addExactly((ISolver) null, (IVecInt) null, 2841);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addExactly((ISolver) null, vecInt0, 4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(1236, 1357);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.unsafePush(1236);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addExactly((ISolver) null, iVecInt0, 1236);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(1236, 1236);
      // Undeclared exception!
      policy0.addAtMost((ISolver) null, vecInt0, 4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setAtMostKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(32, 406);
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(1236, 1236);
      // Undeclared exception!
      policy0.addAtLeast((ISolver) null, vecInt0, 1422);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setAtMostKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(1236, 1236);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, vecInt0, 1236);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(1236, 1357);
      vecInt0.shrink(1236);
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(policy0);
      assertEquals(EncodingStrategy.NATIVE, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      EncodingStrategy encodingStrategy1 = Policy.getEncodingTypeFromAdapter(encodingStrategyAdapter0);
      assertEquals(EncodingStrategy.LADDER, encodingStrategy1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      EncodingStrategy encodingStrategy1 = Policy.getEncodingTypeFromAdapter(encodingStrategyAdapter0);
      assertEquals(EncodingStrategy.SEQUENTIAL, encodingStrategy1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(1356);
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, vecInt0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(1357, 1);
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, vecInt0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      VecInt vecInt0 = new VecInt(3, 406);
      policy0.setExactlyKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Policy policy0 = new Policy();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(statisticsSolver0);
      VecInt vecInt0 = new VecInt(1236, 1236);
      // Undeclared exception!
      try { 
        policy0.addExactly(singleSolutionDetector0, vecInt0, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(32, 32);
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binomial", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      VecInt vecInt0 = new VecInt(32, 406);
      policy0.setAtMostOneEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binomial", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Policy policy0 = new Policy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      VecInt vecInt0 = new VecInt(5, 0);
      IConstr iConstr0 = policy0.addAtLeast(solutionCounter0, vecInt0, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, vecInt0, 15);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(1, 1);
      vecInt0.pop();
      vecInt0.unsafePush(3362);
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, 3362);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      EncodingStrategy encodingStrategy1 = Policy.getEncodingTypeFromAdapter(encodingStrategyAdapter0);
      assertEquals(EncodingStrategy.PRODUCT, encodingStrategy1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      policy0.setAtMostKEncoding(encodingStrategy0);
      String string0 = policy0.toString();
      assertEquals("Policy = [At most K: Ladder, at most 1: Native, exactly K: Native, exactly 1: Native]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      EncodingStrategy encodingStrategy1 = Policy.getEncodingTypeFromAdapter(encodingStrategyAdapter0);
      assertEquals(EncodingStrategy.COMMANDER, encodingStrategy1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      EncodingStrategy encodingStrategy1 = Policy.getEncodingTypeFromAdapter(encodingStrategyAdapter0);
      assertEquals(EncodingStrategy.BINOMIAL, encodingStrategy1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      EncodingStrategy encodingStrategy1 = Policy.getEncodingTypeFromAdapter(encodingStrategyAdapter0);
      assertEquals(EncodingStrategy.BINARY, encodingStrategy1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(1236, 1236);
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, vecInt0, 1236);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setExactlyOneEncoding(encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(1236, 1236);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      Policy policy0 = new Policy();
      policy0.setAtLeastOneEncoding((EncodingStrategyAdapter) sequential0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      Policy policy0 = new Policy();
      policy0.setExactlyKEncoding(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Policy policy0 = new Policy();
      policy0.setAtLeastKEncoding((EncodingStrategyAdapter) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Policy policy0 = new Policy();
      policy0.setAtMostKEncoding((EncodingStrategyAdapter) null);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(3, 406);
      IConstr iConstr0 = policy0.addAtMost((ISolver) null, vecInt0, (-1));
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }
}
