/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:13:07 GMT 2019
 */

package org.ow2.proactive.scripting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.Serializable;
import java.net.URL;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.script.Bindings;
import javax.script.ScriptEngine;
import javax.script.SimpleBindings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.ow2.proactive.scripting.ForkEnvironmentScript;
import org.ow2.proactive.scripting.Script;
import org.ow2.proactive.scripting.ScriptResult;
import org.ow2.proactive.scripting.ScriptTest;
import org.ow2.proactive.scripting.SelectionScript;
import org.ow2.proactive.scripting.SimpleScript;
import org.ow2.proactive.scripting.TaskScript;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Script_ESTest extends Script_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("xh>0LbY}\"|T^Ohl:B<x", ":$e:BB+h|icTJf");
      assertEquals("xh>0LbY}\"|T^Ohl:B<x", selectionScript0.getScript());
      
      selectionScript0.setScript(":$e:BB+h|icTJf");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(selectionScript0);
      String string0 = forkEnvironmentScript0.display();
      assertEquals(" { \nScript 'SelectionScript'\n\tscriptEngineLookupName = ':$e:BB+h|icTJf'\n\tscript = \n:$e:BB+h|icTJf\n\tid = \nxh>0LbY}\"|T^Ohl:B<x\n\tparameters = null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[5];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "Script could not be fetched", serializableArray0);
      String string0 = simpleScript0.getEngineName();
      assertNotNull(string0);
      assertEquals("Script could not be fetched", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      selectionScript0.id = "~i5?n>a6eu8/k7'6$v";
      SimpleScript simpleScript0 = new SimpleScript("http", "http");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(selectionScript0);
      boolean boolean0 = simpleScript0.equals(forkEnvironmentScript0);
      assertFalse(boolean0);
      assertEquals("~i5?n>a6eu8/k7'6$v", forkEnvironmentScript0.getId());
      assertEquals("SimpleScript", simpleScript0.getScriptName());
      assertEquals("http", simpleScript0.getEngineName());
      assertEquals("http", simpleScript0.getScript());
      assertEquals("http", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URL uRL0 = MockURL.getFtpExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = null;
      try {
        scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "org.apache.log4j.Appender", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("", "");
      assertEquals("", scriptTest_ScriptForTests0.getId());
      
      scriptTest_ScriptForTests0.id = "Bad option value [";
      TaskScript taskScript0 = new TaskScript(scriptTest_ScriptForTests0);
      String string0 = taskScript0.fetchScriptWithExceptionHandling();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("org.apache.http.conn.ssl.BrowserCompatHostnameVerifier", "org.apache.http.conn.ssl.BrowserCompatHostnameVerifier");
      boolean boolean0 = simpleScript0.equals(simpleScript0);
      assertEquals("org.apache.http.conn.ssl.BrowserCompatHostnameVerifier", simpleScript0.getEngineName());
      assertEquals("org.apache.http.conn.ssl.BrowserCompatHostnameVerifier", simpleScript0.getId());
      assertTrue(boolean0);
      assertEquals("org.apache.http.conn.ssl.BrowserCompatHostnameVerifier", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = new File(" { ");
      Serializable[] serializableArray0 = new Serializable[1];
      SimpleScript simpleScript0 = null;
      try {
        simpleScript0 = new SimpleScript(file0, serializableArray0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to read script : /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/ { 
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("", "");
      String string0 = scriptTest_ScriptForTests0.toString();
      assertEquals("", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("", scriptTest_ScriptForTests0.getScript());
      assertEquals("TestScript", string0);
      assertEquals("", scriptTest_ScriptForTests0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = new File("X^+}J/7z{Ujx.YvM\"=");
      File file1 = MockFile.createTempFile("X^+}J/7z{Ujx.YvM\"=", "X^+}J/7z{Ujx.YvM\"=", file0);
      String string0 = Script.readFile(file1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[2];
      SimpleScript simpleScript0 = new SimpleScript("H", "H", serializableArray0);
      String string0 = simpleScript0.getScriptName();
      assertEquals("SimpleScript", string0);
      assertEquals("H", simpleScript0.getEngineName());
      assertEquals("H", simpleScript0.getScript());
      assertEquals("H", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      String string0 = simpleScript0.getScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Script<SimpleScript> script0 = (Script<SimpleScript>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      forkEnvironmentScript0.script = "\tscriptenginelookupname = '";
      forkEnvironmentScript0.getReader();
      assertEquals("\tscriptenginelookupname = '", forkEnvironmentScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("args", (String) null);
      simpleScript0.getParameters();
      assertEquals("args", simpleScript0.getId());
      assertEquals("args", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("nashorn");
      URL uRL0 = mockFile0.toURL();
      Serializable[] serializableArray0 = new Serializable[2];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      Serializable[] serializableArray1 = simpleScript0.getParameters();
      assertEquals(2, serializableArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, "MD5", (Serializable[]) null);
      String string0 = simpleScript0.getId();
      assertNull(string0);
      assertEquals("MD5", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("`fIjxRS", "`fIjxRS");
      Serializable[] serializableArray0 = new Serializable[6];
      SimpleScript simpleScript0 = new SimpleScript(file0, serializableArray0);
      String string0 = simpleScript0.getId();
      assertEquals("/tmp/`fIjxRS0`fIjxRS", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("", "Cannot invoke a null operation in ");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(selectionScript0);
      String string0 = forkEnvironmentScript0.fetchScript();
      assertEquals("SelectionScript", forkEnvironmentScript0.getScriptName());
      assertEquals("Cannot invoke a null operation in ", forkEnvironmentScript0.getEngineName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", forkEnvironmentScript0.getId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      ScriptEngine scriptEngine0 = selectionScript0.createScriptEngine();
      assertNull(scriptEngine0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.readFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("args");
      try { 
        Script.readFile(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      // Undeclared exception!
      try { 
        selectionScript0.overrideDefaultScriptName("args");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      // Undeclared exception!
      forkEnvironmentScript0.fetchUrlIfNeeded();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("nashorn");
      URL uRL0 = mockFile0.toURL();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      // Undeclared exception!
      try { 
        simpleScript0.fetchUrlIfNeeded();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (Serializable[]) null);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      // Undeclared exception!
      forkEnvironmentScript0.fetchScriptWithExceptionHandling();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.digest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("ERC[W", "");
      selectionScript0.execute((Map<String, Object>) null, (PrintStream) null, (PrintStream) null);
      assertEquals("ERC[W", selectionScript0.getId());
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertEquals("ERC[W", selectionScript0.getScript());
      assertEquals("", selectionScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("javascript", "javascript");
      assertEquals("SimpleScript", simpleScript0.getScriptName());
      
      simpleScript0.overrideDefaultScriptName("javascript");
      assertEquals("javascript", simpleScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("`t", "`t");
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      taskScript0.overrideDefaultScriptName("MD5");
      assertEquals("`t", taskScript0.getId());
      assertEquals("`t", taskScript0.getScript());
      assertEquals("`t", taskScript0.getEngineName());
      assertEquals("SimpleScript", taskScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("0c8]vf|{cs8t&", "0c8]vf|{cs8t&");
      Script<ScriptTest.ScriptForTests> script0 = (Script<ScriptTest.ScriptForTests>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript1 = new SimpleScript(script0);
      boolean boolean0 = simpleScript1.equals(simpleScript0);
      assertEquals("SimpleScript", simpleScript0.getScriptName());
      assertEquals("0c8]vf|{cs8t&", simpleScript0.getEngineName());
      assertEquals("0c8]vf|{cs8t&", simpleScript0.getId());
      assertFalse(boolean0);
      assertEquals("0c8]vf|{cs8t&", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      SimpleScript simpleScript0 = new SimpleScript(selectionScript0);
      boolean boolean0 = simpleScript0.equals(selectionScript0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      SimpleScript simpleScript0 = new SimpleScript(forkEnvironmentScript0);
      boolean boolean0 = simpleScript0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("na GGVaz=\"(l.g.-vB", "na GGVaz=\"(l.g.-vB");
      ScriptResult<Object> scriptResult0 = simpleScript0.execute();
      boolean boolean0 = simpleScript0.equals(scriptResult0);
      assertEquals("na GGVaz=\"(l.g.-vB", simpleScript0.getEngineName());
      assertEquals("na GGVaz=\"(l.g.-vB", simpleScript0.getId());
      assertFalse(boolean0);
      assertEquals("na GGVaz=\"(l.g.-vB", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      simpleScript0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      simpleScript0.id = "MD5";
      simpleScript0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      File file0 = new File("X^+}J/7z{Ujx.YvM\"=");
      File file1 = MockFile.createTempFile("X^+}J/7z{Ujx.YvM\"=", "X^+}J/7z{Ujx.YvM\"=", file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Script.readFile(file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      File file0 = new File("args");
      File file1 = MockFile.createTempFile("Erq'Z", "Erq'Z", file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("args/Erq'Z0Erq'Z");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "!}^}f-");
      String string0 = Script.readFile(file1);
      assertEquals("!}^}f-\n", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      Serializable[] serializableArray0 = new Serializable[1];
      taskScript0.parameters = serializableArray0;
      // Undeclared exception!
      try { 
        taskScript0.prepareBindings((Bindings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleBindings simpleBindings0 = new SimpleBindings();
      SelectionScript selectionScript0 = new SelectionScript();
      selectionScript0.prepareBindings(simpleBindings0);
      assertNull(selectionScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SimpleScript simpleScript0 = new SimpleScript("javascript", "javascript");
          TaskScript taskScript0 = new TaskScript(simpleScript0);
          // Undeclared exception!
          try { 
            taskScript0.execute();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"nashorn.createContext\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:492)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:463)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:129)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:125)
             // java.security.AccessController.doPrivileged(Native Method)
             // jdk.nashorn.api.scripting.NashornScriptEngine.<init>(NashornScriptEngine.java:125)
             // jdk.nashorn.api.scripting.NashornScriptEngineFactory.getScriptEngine(NashornScriptEngineFactory.java:148)
             // org.ow2.proactive.scripting.Script.findScriptEngineCandidates(Script.java:545)
             // org.ow2.proactive.scripting.Script.createScriptEngine(Script.java:521)
             // org.ow2.proactive.scripting.Script.execute(Script.java:375)
             // org.ow2.proactive.scripting.Script.execute(Script.java:352)
             // sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("@Ha<Yl)", "@Ha<Yl)");
      selectionScript0.fetchUrlIfNeeded();
      assertEquals("@Ha<Yl)", selectionScript0.getEngineName());
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertEquals("@Ha<Yl)", selectionScript0.getScript());
      assertEquals("@Ha<Yl)", selectionScript0.getId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      ScriptResult<Object> scriptResult0 = simpleScript0.execute();
      assertTrue(scriptResult0.errorOccured());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      URL uRL0 = MockURL.getFileExample();
      selectionScript0.url = uRL0;
      TaskScript taskScript0 = new TaskScript(selectionScript0);
      ScriptResult<Serializable> scriptResult0 = taskScript0.execute();
      assertTrue(scriptResult0.errorOccured());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ecmascript");
      URL uRL0 = mockFile0.toURL();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (Serializable[]) null);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      // Undeclared exception!
      try { 
        forkEnvironmentScript0.fetchScriptWithExceptionHandling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      String string0 = selectionScript0.fetchScriptWithExceptionHandling();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("MD5", "MD5");
      String string0 = selectionScript0.fetchScriptWithExceptionHandling();
      assertEquals("MD5", selectionScript0.getId());
      assertEquals("MD5", string0);
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertNotNull(string0);
      assertEquals("MD5", selectionScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/args");
      URL uRL0 = mockFile0.toURL();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      String string0 = forkEnvironmentScript0.fetchScript();
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/args", forkEnvironmentScript0.getScriptName());
      assertNull(string0);
      assertEquals("file:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/args", forkEnvironmentScript0.getId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      String string0 = forkEnvironmentScript0.fetchScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      forkEnvironmentScript0.script = "MD5";
      String string0 = forkEnvironmentScript0.fetchScript();
      assertNotNull(string0);
      assertEquals("MD5", string0);
      assertEquals("MD5", forkEnvironmentScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = Script.digest("@Ha<Yl)");
      assertEquals("\uFFFDim\u001B\uFFFD\uFFFD'\uFFFDt3\uFFFD\uFFFD5/\uFFFD ", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("args", "c(h%x(9BU");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      boolean boolean0 = simpleScript0.equals(forkEnvironmentScript0);
      assertEquals("c(h%x(9BU", forkEnvironmentScript0.getEngineName());
      assertEquals("args", forkEnvironmentScript0.getScript());
      assertEquals("SimpleScript", forkEnvironmentScript0.getScriptName());
      assertTrue(boolean0);
      assertEquals("args", forkEnvironmentScript0.getId());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Script<SimpleScript> script0 = (Script<SimpleScript>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      URL uRL0 = simpleScript0.getScriptUrl();
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      File file0 = new File("tbAHM/T");
      File file1 = MockFile.createTempFile("_OJDGrYW{=`6(Xm", "Could not fetch script at ", file0);
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(file1);
      assertEquals("", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "args", false);
      assertEquals("args", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      // Undeclared exception!
      try { 
        forkEnvironmentScript0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      ScriptResult<Serializable> scriptResult0 = taskScript0.execute();
      assertNull(scriptResult0.getOutput());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Script<SimpleScript> script0 = (Script<SimpleScript>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      String string0 = simpleScript0.toString();
      assertNull(string0);
  }
}
