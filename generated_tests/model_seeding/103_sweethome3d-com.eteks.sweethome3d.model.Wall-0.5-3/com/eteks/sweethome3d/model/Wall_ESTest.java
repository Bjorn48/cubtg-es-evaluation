/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 11:32:01 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(11.030554F, 11.030554F, 11.030554F, 11.030554F, 11.030554F, 11.030554F);
      Float float0 = new Float(11.030554F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall(1259.701F, 1259.701F, (-2070.0667F), 1259.701F, 1259.701F);
      wall0.getLength();
      Integer integer0 = new Integer((-2736));
      Integer.compareUnsigned((-3447), (-2736));
      Integer.toUnsignedLong(0);
      wall0.setLeftSideColor(integer0);
      wall0.move(1467.8845F, 802.2F);
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>(linkedList0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      List<Wall> list1 = Wall.clone(list0);
      Wall.clone(list1);
      wall0.setPattern((TextureImage) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall((-1258.136F), (-172.99158F), (-172.99158F), 1.0F, (-2896.9F));
      wall0.setYStart((-2896.9F));
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall((-84.334F), 0.0F, (-84.334F), (-84.334F), 0.0F);
      Float.compare((-84.334F), 0.0F);
      Float float0 = new Float((float) (-1));
      Float.min((-84.334F), (-1));
      Float float1 = new Float((-84.334F));
      Wall wall1 = wall0.clone();
      Integer integer0 = Integer.valueOf((-1));
      wall1.setRightSideColor(integer0);
      Wall wall2 = wall1.clone();
      wall2.clone();
      Float float2 = new Float((float) (-1));
      wall0.setRightSideColor(integer0);
      wall2.getHeight();
      Wall.Property.values();
      wall0.getRightSideColor();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(1016.5F, 1.0F, (-1081.0F), (-1769.8744F), (-711.21906F));
      Wall wall1 = new Wall(741.4153F, 2534.62F, 1599.5F, (-5492.43F), (-1081.0F));
      wall1.getXEnd();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getXArcCircleCenter();
      Float.compare(0.0F, 8.117286F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.move(0.0F, (-38));
      wall0.getThickness();
      wall0.getLeftSideColor();
      Wall wall1 = wall0.clone();
      wall1.setRightSideShininess((-1));
      wall0.setWallAtEnd(wall1);
      wall0.containsWallStartAt(8.117286F, 0.0F, 1220.77F);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setYEnd((-3051.418F));
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall(2139.1917F, 2139.1917F, 2139.1917F, 2139.1917F, 2139.1917F);
      Float.min(234.0F, 2614.982F);
      Float.isFinite(0.08726647F);
      Float float0 = new Float(1395.7253F);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(0.023166921F, 0.023166921F, 1174.481F, (-1033.0F), 2614.982F);
      wall1.setWallAtStart(wall0);
      Float.min(234.0F, (-762.02966F));
      wall1.setWallAtEnd(wall0);
      wall0.intersectsRectangle(2139.1917F, (-1377.6166F), 0.105179824F, 0.08726647F);
      wall0.setYEnd(0.08726647F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall1.getPoints();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      Integer integer0 = Integer.valueOf(2678);
      wall0.setRightSideColor(integer0);
      Integer.valueOf(1196);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1552.3634F), 0.0F);
      Float float0 = wall1.getHeight();
      wall1.setHeight(float0);
      wall1.getLeftSideColor();
      Float float1 = new Float((-1552.3634F));
      wall1.setHeightAtEnd(float1);
      wall0.getRightSideShininess();
      wall1.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-784.0F));
      wall0.getRightSideShininess();
      Integer integer0 = Integer.valueOf(1196);
      wall0.setRightSideColor(integer0);
      Float float0 = new Float((-2866.0424834));
      Float.min(0.0F, 0.0F);
      float0.equals("1`EX");
      wall0.setHeightAtEnd(float0);
      wall0.getLeftSideColor();
      wall0.setHeightAtEnd(float0);
      wall0.containsWallStartAt(199.7F, (-784.0F), (-1444.5F));
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.01F, 0.01F, 0.0F, 0.0F);
      wall0.containsPoint(0.01F, 0.0F, 0.01F);
      Float.floatToIntBits((-731.65F));
      Float float0 = new Float(0.0);
      float0.floatValue();
      Wall wall1 = new Wall((-1590.997F), 0.0F, 0.01F, 0.0F, (-2011.0F));
      wall0.setXEnd((-1003034214));
      wall1.setRightSideShininess(0.0F);
      wall0.getWallAtEnd();
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Level level0 = new Level("]9(ZW7MDXEyj3H*", 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall(846.2F, 846.2F, 846.2F, 846.2F, 846.2F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(93.0F, 93.0F, 93.0F, 0.0F, 0.0F);
      Float.compare((-1145.5768F), 0.0F);
      wall0.getRightSideTexture();
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setLeftSideShininess((-1));
      wall0.setThickness(1.0F);
      wall0.setRightSideColor((Integer) null);
      wall0.isTrapezoidal();
      wall0.getLength();
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall((-2678.2F), (-2678.2F), 0.0F, (-2678.2F), 0.0F);
      wall0.setArcExtent((Float) 12.781F);
      wall0.getPoints();
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall((-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall((-2678.2F), (-2678.2F), 0.0F, 2299.015F, (-30.3F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setThickness(674.0306F);
      wall0.setXEnd(2299.015F);
      wall0.setXStart(2299.015F);
      wall0.setRightSideShininess((-504.141F));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setHeightAtEnd((Float) null);
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      wall0.getRightSideShininess();
      Integer integer0 = Integer.valueOf(2678);
      wall0.setRightSideColor(integer0);
      Integer.valueOf(1196);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1552.3634F), 0.0F);
      Wall wall2 = wall0.clone();
      wall1.getHeight();
      wall1.setRightSideColor(integer0);
      wall1.containsPoint(0.0F, 0.0F, 1268.8F);
      wall2.setLeftSideShininess((-21.0F));
      Wall wall3 = wall2.clone();
      wall2.setWallAtStart(wall3);
      wall2.getHeightAtEnd();
      Float float0 = new Float(0.0F);
      wall0.setHeightAtEnd(float0);
      Wall wall4 = wall3.clone();
      wall4.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall((-303.53348F), (-303.53348F), (-303.53348F), (-303.53348F), (-303.53348F), (-303.53348F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-303.53348F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYStart(), 0.01F);
      assertEquals((-303.53348F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-303.53348F), wall0.getXEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-303.53348F), wall0.getHeight(), 0.01F);
      assertEquals((-303.53348F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float((-303.53348F));
      assertNotNull(float0);
      assertEquals((-303.53348F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-303.53348F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-303.53348F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYStart(), 0.01F);
      assertEquals((-303.53348F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-303.53348F), wall0.getXEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-303.53348F), wall0.getHeight(), 0.01F);
      assertEquals((-303.53348F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-303.53348F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-303.53348F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYStart(), 0.01F);
      assertEquals((-303.53348F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-303.53348F), wall0.getXEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-303.53348F), wall0.getHeight(), 0.01F);
      assertEquals((-303.53348F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-303.53348F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-303.53348F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYStart(), 0.01F);
      assertEquals((-303.53348F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-303.53348F), wall0.getXEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-303.53348F), wall0.getHeight(), 0.01F);
      assertEquals((-303.53348F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-303.53348F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-303.53348F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYStart(), 0.01F);
      assertEquals((-303.53348F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-303.53348F), wall0.getXEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-303.53348F), wall0.getHeight(), 0.01F);
      assertEquals((-303.53348F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(1964.71F, 3279.0F, (-1163.1F), 365.24F, (-975.12F));
      wall0.getLength();
      Integer integer0 = new Integer(5);
      Integer.compareUnsigned(5, 0);
      Integer.toUnsignedLong(2146549965);
      Integer integer1 = new Integer(1);
      Integer.max(5, 46);
      wall0.setLeftSideColor(integer1);
      wall0.move((-504.141F), 0.0F);
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList2 = new LinkedList<Wall>(linkedList1);
      linkedList2.add(wall0);
      Wall.clone((List<Wall>) linkedList1);
      Wall.clone((List<Wall>) linkedList2);
      Wall.clone((List<Wall>) linkedList1);
      wall0.setPattern((TextureImage) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getWallAtEnd();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 160.3049F, 0.0F, 0.0F);
      wall0.getLeftSideTexture();
      wall0.getYArcCircleCenter();
      wall0.getLeftSideColor();
      Float float0 = new Float(1.0E-10);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(74.52672F, 74.52672F, 74.52672F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, (-3082.04F), (-1.0F), (-80.0F), (-80.0F), 1995.261F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      wall1.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall((-303.0F), (-303.0F), (-303.0F), (-303.0F), (-303.0F), (-303.0F));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F));
      wall0.getXArcCircleCenter();
      Float.compare((-0.5F), 0);
      Float.compare(0.0F, 0.01F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Integer.valueOf((-514));
      wall0.setYEnd(0.1F);
      Integer.valueOf((-514));
      Integer.sum((-1), 2146969865);
      wall0.setThickness(3203.0F);
      Level level0 = new Level("", 0.04968393F, 0.0F, 0.0F);
      Level level1 = level0.clone();
      level1.setName("PATTERN");
      wall0.isAtLevel(level1);
      wall0.containsWallEndAt(1.0F, (-679.48474F), 2830.6F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall(74.52672F, 74.52672F, 74.52672F, 0.0F, 0.0F);
      Float float0 = new Float((-1594.1241F));
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(4451.117F, 974.51886F, (-1594.1241F), (-3740.9F), 974.51886F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.intersectsRectangle(2633.157F, (-2219.0F), 0.105179824F, (-2219.0F));
      wall1.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Float float1 = new Float(888.023F);
      Float float2 = new Float((double) 2419.259F);
      Float.sum(790.01025F, 2633.157F);
      wall1.setArcExtent(float2);
      Float float3 = new Float(1.0F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((-1424.7065103567));
      wall0.setArcExtent(float0);
      wall0.setYEnd((-3051.418F));
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall((-2678.2F), (-2678.2F), 0.0F, (-2678.2F), (-30.3F));
      wall0.setXEnd((-2678.2F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall((-1633.0F), (-2533.0F), 846.2F, (-2533.0F), (-1633.0F), (-2533.0F));
      wall0.setXEnd((-2070.0667F));
      Float.floatToIntBits((-2070.0667F));
      Float.floatToIntBits((-2070.0667F));
      Float float0 = new Float(846.2F);
      wall0.setArcExtent(float0);
      wall0.getXArcCircleCenter();
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall((-2678.2F), (-2678.2F), 0.0F, 2299.015F, (-30.3F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setXEnd(2299.015F);
      wall0.setRightSideShininess((-504.141F));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setXStart(0.0F);
      Level level0 = new Level("]9(ZW7MDXEyj3H*", (-1.0F), (-1.0F), (-303.53348F));
      wall0.isAtLevel(level0);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(2.14675686E9F, (-1.0F), 2.14675686E9F, 2.14675686E9F, 2.14675686E9F);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float.floatToIntBits((-22.304764F));
      Float float0 = new Float(2.7546666F);
      Float float1 = new Float((-1051.0));
      Wall wall0 = new Wall(2.7546666F, (-1.0865462F), (-22.304764F), (-22.304764F), 2.7546666F, (-2798.4885F));
      wall0.setArcExtent(float1);
      wall0.setYEnd((-2367.2969F));
      wall0.getXArcCircleCenter();
      Wall wall1 = new Wall(0.0F, 0.0F, (-1040.6956F), 268.6562F, 662.3969F);
      wall1.setHeightAtEnd(float0);
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.0F, 3782.0288F, (-1498.4F), 3782.0288F, 3782.0288F);
      wall0.getYArcCircleCenter();
      wall0.getYArcCircleCenter();
      Integer integer0 = Integer.valueOf(2678);
      wall0.setRightSideColor(integer0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      Float.compare(1.158346F, 1.158346F);
      Float float0 = new Float(1.158346F);
      Float.min(0, (-1462.7063F));
      Float.isFinite(1.158346F);
      Float float1 = new Float((float) 0);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(4451.117F, 0, 1.158346F, 0, 4451.117F);
      wall0.setWallAtStart(wall1);
      Float.min(4451.117F, 0.105179824F);
      wall1.setWallAtEnd(wall0);
      wall1.intersectsRectangle(0.105179824F, 0.105179824F, 1.158346F, 1.158346F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Float float2 = new Float(0.01346914F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall(0.5932012F, 0.5932012F, 0.5932012F, 0.5932012F, 0.5932012F, 0.5932012F);
      Integer integer0 = new Integer(12);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall((-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F));
      Float float0 = new Float((-302.59738F));
      Float.min((-636.0F), (-843.05286F));
      Float float1 = new Float((-843.05286F));
      Wall wall1 = new Wall(2864.0F, (-1.0F), 0.0F, Float.POSITIVE_INFINITY, (-1.0F), 2864.0F);
      wall1.setWallAtStart(wall0);
      Float.max(0.0F, (-843.05286F));
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      Float.compare(1.158346F, 1.158346F);
      Float float0 = new Float(1.158346F);
      Float.min(0, 0);
      Float.isFinite(1.158346F);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(0, 0, 1.158346F, 0, 0);
      wall1.setWallAtEnd(wall0);
      wall1.intersectsRectangle(0.0F, 0, 1.158346F, 1.158346F);
      wall1.setYEnd(1.158346F);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-784.0F));
      wall0.getRightSideShininess();
      Integer integer0 = Integer.valueOf(1196);
      wall0.setRightSideColor(integer0);
      wall0.getRightSideColor();
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0.0F);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1930.7521F);
      float1.floatValue();
      Float float2 = new Float(0.0F);
      float2.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      wall0.setYEnd((-1595.0F));
      wall0.getXArcCircleCenter();
      wall0.setArcExtent(float1);
      wall0.getPoints();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.01F, 0.01F, 0.0F, 0.0F);
      wall0.containsPoint(0.01F, 0.0F, 0.01F);
      Float.floatToIntBits((-731.65F));
      Float float0 = new Float(0.0);
      float0.floatValue();
      Wall wall1 = new Wall((-1590.997F), 0.0F, 0.01F, 0.0F, (-2011.0F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setXEnd((-1003034214));
      wall1.setRightSideShininess(0.0F);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F));
      wall0.getXArcCircleCenter();
      Float.compare((-0.5F), (-38));
      Float.compare(0.0F, 8.117286F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Integer integer0 = new Integer(1);
      wall0.setLeftSideColor(integer0);
      Integer integer1 = new Integer(12);
      wall0.setRightSideColor(integer1);
      Float float0 = new Float((double) 1);
      Float.min(12, (-38));
      float0.equals("1l`EX");
      Float float1 = new Float((-1.0));
      Object object0 = new Object();
      float1.equals(object0);
      wall0.setHeightAtEnd(float1);
      wall0.getLeftSideColor();
      wall0.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall((-1633.0F), 846.2F, 846.2F, 846.2F, (-1633.0F), 846.2F);
      Wall wall1 = new Wall(846.2F, (-857.3F), (-0.7524371F), (-1185.6586F), (-885.36475F));
      wall1.setWallAtStart(wall0);
      Float.min(0.105179824F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.intersectsRectangle(2379.3372F, 1.1466125F, 2379.3372F, (-3421.451F));
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall0.getPoints();
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.0F, 0.0F, (-1498.4F), 0.0F, 0.0F);
      wall0.getYArcCircleCenter();
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      wall0.setYEnd(1.158346F);
      Float.compare(1.158346F, 1.158346F);
      Float float0 = new Float(1.158346F);
      Float.min(0, (-1462.7063F));
      Float.isFinite(1.158346F);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(0, 0, 1.158346F, 0, 0);
      wall0.setWallAtStart(wall1);
      Float.min(1.158346F, 0.105179824F);
      wall1.setWallAtEnd(wall0);
      wall1.intersectsRectangle(0.105179824F, 0.105179824F, 1.158346F, 1.158346F);
      wall1.setYEnd(1.158346F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.getPoints();
      wall0.getPoints();
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F));
      wall0.getXArcCircleCenter();
      Float.compare((-0.5F), (-38));
      Float.compare(0.0F, 8.117286F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Integer integer0 = new Integer(1);
      wall0.setLeftSideColor(integer0);
      wall0.move(2953.0F, (-38));
      wall0.setLeftSideColor(integer0);
      wall0.setThickness(34.1306F);
      wall0.getYStart();
      wall0.getYArcCircleCenter();
      Integer integer1 = Integer.valueOf(1);
      Float float0 = new Float((double) (-38));
      wall0.setArcExtent(float0);
      wall0.setLeftSideColor(integer1);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall((-84.334F), (-3345.128F), (-84.334F), (-84.334F), 0.0F);
      Float.compare((-84.334F), 0.0F);
      Float float0 = new Float((float) (-1));
      Float.min((-3345.128F), (-1));
      Float.isFinite((-3039.531F));
      Float float1 = new Float((-3345.128F));
      Wall wall1 = wall0.clone();
      wall1.setArcExtent(float0);
      Wall wall2 = new Wall(380.688F, (-84.334F), (-1), 0.0F, (-3242.0F));
      Float.min((-3345.128F), 0.0F);
      wall1.setWallAtEnd(wall2);
      wall1.intersectsRectangle(0.0F, 380.688F, (-84.334F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.containsWallStartAt((-3039.6038F), 1.0F, (-0.117543004F));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall((-1633.0F), (-2533.0F), 846.2F, (-2533.0F), (-1633.0F), (-2533.0F));
      wall0.setXEnd((-2070.0667F));
      wall0.setXStart((-1.00124346E9F));
      Float.floatToIntBits((-2070.0667F));
      Float float0 = new Float((float) (-989765359));
      wall0.setArcExtent(float0);
      // Undeclared exception!
      try { 
        wall0.getPoints();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1652474620
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(790.01025F, 790.01025F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall0.setThickness(790.01025F);
      Float.compare(790.01025F, (-2469.0F));
      Float float0 = new Float(790.01025F);
      wall0.getThickness();
      wall0.getLeftSideColor();
      wall1.setWallAtEnd(wall0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 790.01025F, 0.0F, 1.0F);
      Wall wall1 = wall0.clone();
      wall0.setThickness(0.0F);
      wall1.setThickness(0.0F);
      wall1.setHeight((Float) null);
      Float float0 = new Float(0.0F);
      Float.max(0.0F, (-3681.2612F));
      wall1.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall((-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 790.01025F, 0.0F, 1.0F);
      Wall wall1 = wall0.clone();
      wall0.setThickness(0.0F);
      Float.min(3721.7527F, (-1444.5F));
      Float float0 = new Float(2928.99F);
      wall0.setArcExtent(float0);
      wall0.containsPoint(175.0965F, 0.0F, 1338.6686F);
      wall1.setLeftSideShininess((-1345.9448F));
      Wall wall2 = new Wall((-1345.9448F), 3721.7527F, 2.0F, 3721.7527F, 2928.99F);
      wall2.isTrapezoidal();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("si<ke\"@", "''<nG8l^7-1-", 16, "", uRLStreamHandler0);
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("si<ke\"@", uRLContent0, 790.01025F, 0.0F);
      wall0.setPattern(catalogTexture0);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(2645.7568F, 2.0F, 2.0F, 2.0F, 2.0F);
      Integer integer0 = new Integer(0);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 3319.7122F, 0.0F, (-784.0F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3319.7122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3319.7122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-784.0F), wall0.getHeight(), 0.01F);
      assertEquals(1659.8561F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3319.7122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3319.7122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3319.7122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-784.0F), wall0.getHeight(), 0.01F);
      assertEquals(1659.8561F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3319.7122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Integer integer0 = Integer.valueOf(1196);
      assertNotNull(integer0);
      assertEquals(1196, (int)integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3319.7122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3319.7122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-784.0F), wall0.getHeight(), 0.01F);
      assertEquals(1659.8561F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1196, (int)wall0.getRightSideColor());
      assertEquals(3319.7122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Float float1 = new Float((-2866.0424834));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2866.0425F), (float)float1, 0.01F);
      
      float float2 = Float.min(3319.7122F, 0.0F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      boolean boolean0 = float1.equals("1l`EX");
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3319.7122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2866.0425F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3319.7122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-784.0F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1659.8561F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1196, (int)wall0.getRightSideColor());
      assertEquals(3319.7122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer1 = wall0.getLeftSideColor();
      assertNull(integer1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3319.7122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2866.0425F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3319.7122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-784.0F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1659.8561F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1196, (int)wall0.getRightSideColor());
      assertEquals(3319.7122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3319.7122F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2866.0425F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3319.7122F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-784.0F), wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1659.8561F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1196, (int)wall0.getRightSideColor());
      assertEquals(3319.7122F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall((-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F));
      wall0.getLeftSideTexture();
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall((-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F));
      Float float0 = wall0.getHeight();
      wall0.getPoints();
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(2.1544733F, 2.1544733F, 2.1544733F, 2.1544733F, 2.1544733F, 2.1544733F);
      Wall wall1 = wall0.clone();
      Float float0 = wall1.getHeight();
      wall1.setPattern((TextureImage) null);
      wall1.setHeight(float0);
      wall1.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      wall0.setYStart(1259.7009F);
      Float.compare(0.0F, 1259.7009F);
      Float.compare((-473.7879F), (-129.39F));
      Float.compare((-562.474F), 1259.701F);
      Float.valueOf((-129.39F));
      Wall wall1 = new Wall((-473.7879F), (-129.39F), 1259.701F, 2602.8977F, 3782.0288F);
      Float float0 = new Float((-1.0));
      wall1.setHeight(float0);
      Float float1 = new Float(164.15517F);
      Float.floatToIntBits(1247.5559F);
      wall0.setArcExtent((Float) null);
      wall1.getThickness();
      wall1.setRightSideShininess(0.0F);
      wall0.getLeftSideColor();
      wall0.setWallAtEnd(wall1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      Float.compare(1.158346F, 1.158346F);
      Float float0 = new Float(1.158346F);
      Float.min(0, (-1462.7063F));
      Float.isFinite(1.158346F);
      Float float1 = new Float((float) 0);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(4451.117F, 0, 1.158346F, 0, 4451.117F);
      wall0.setWallAtStart(wall1);
      Float.min(4451.117F, 0.105179824F);
      wall1.setWallAtEnd(wall0);
      wall1.intersectsRectangle(0.105179824F, 0.105179824F, 1.158346F, 1.158346F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Float float2 = new Float((-33.0F));
      wall0.setArcExtent(float2);
      Float float3 = new Float((-1.0F));
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.01F, 0.0F, (-235.87389F));
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F));
      wall0.getXArcCircleCenter();
      Float.compare((-0.5F), 0);
      Float.compare(0.0F, 0.01F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Integer integer0 = new Integer((-1));
      wall0.setLeftSideColor(integer0);
      wall0.move(2953.0F, 0);
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList2 = new LinkedList<Wall>(linkedList1);
      linkedList1.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      Wall.clone(list0);
      wall0.setPattern((TextureImage) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setRightSideShininess((-0.5F));
      wall0.getLeftSideColor();
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall(1.2877777F, 93.0F, 1.2877777F, 93.0F, 93.0F, 93.0F);
      Float.compare(93.0F, 93.0F);
      Float float0 = new Float(1220.77F);
      Float.sum(1.2877777F, 1.2877777F);
      wall0.setArcExtent(float0);
      wall0.containsPoint(1220.77F, 1995.011F, 1995.011F);
      wall0.setLeftSideShininess(0.1F);
      wall0.isTrapezoidal();
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall1.containsWallStartAt(1325.0F, 1.2877777F, (-1024.404F));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall(0.5932012F, 0.5932012F, 0.5932012F, 0.5932012F, 0.5932012F, 0.5932012F);
      wall0.getWallAtEnd();
      wall0.setWallAtStart((Wall) null);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-968.2384F), (-2256.6238F), 74.52672F, 17.0F);
      Integer integer0 = new Integer(829);
      wall0.setLeftSideColor(integer0);
      Wall wall1 = new Wall(829, (-2256.6238F), 0.0F, (-1.0F), (-1.0F), (-1.0F));
      wall1.setWallAtStart(wall0);
      wall1.setWallAtStart(wall0);
      Wall wall2 = wall1.getWallAtStart();
      wall2.getPoints();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall(0.7753392F, 0.7753392F, 0.7753392F, 0.7753392F, 0.7753392F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.offerFirst(wall0);
      Wall wall1 = new Wall(0.7753392F, (-4306.3F), 0.7753392F, 0.7753392F, 0.7753392F, (-1617.9042F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.getPoints();
      wall1.getPoints();
      Integer integer0 = new Integer((-246));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-784.0F));
      wall0.getRightSideShininess();
      Integer integer0 = Integer.valueOf(1196);
      wall0.setRightSideColor(integer0);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall1);
      wall0.getRightSideColor();
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0.0F);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1930.7521F);
      float1.floatValue();
      float1.floatValue();
      wall0.setArcExtent((Float) 1930.7521F);
      wall0.setYEnd((-1595.0F));
      wall0.getXArcCircleCenter();
      wall0.setArcExtent(float1);
      wall0.getPoints();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = (-1.0F);
      Wall wall0 = new Wall(0.0F, 2830.6F, 2830.6F, (-1.0F), 0.0F);
      wall0.setXEnd((-679.48474F));
      wall0.getLevel();
      Level level0 = new Level("_w#\"d\"4X-V", 2830.6F, (-1926.8F), 0.0F);
      level0.setFloorThickness((-710.71F));
      level0.setVisible(false);
      Float float1 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      Integer integer0 = new Integer(0);
      float1.equals(integer0);
      wall0.setHeight(float1);
      wall0.setLevel(level0);
      wall0.isTrapezoidal();
      wall0.getRightSideTexture();
      wall0.getWallAtEnd();
      try { 
        Float.valueOf("_w#\"d\"4X-V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall((-303.53348F), (-303.53348F), (-303.53348F), (-303.53348F), (-303.53348F), (-303.53348F));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall((-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F));
      Integer integer0 = Integer.valueOf(6128);
      wall0.setLeftSideColor(integer0);
      wall0.setLeftSideColor(integer0);
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall(1259.701F, 1259.701F, 1259.701F, 1259.701F, 1259.701F);
      wall0.getLength();
      Integer integer0 = new Integer((-2736));
      Integer.compareUnsigned((-3447), (-2736));
      Integer.toUnsignedLong(0);
      Float.compare(178.54F, 1969.6F);
      Float.compare(0.0F, (-1));
      Float.compare(0L, (-3447));
      Float float0 = new Float((-1.0));
      Object object0 = new Object();
      float0.equals(object0);
      wall0.setHeight(float0);
      Float float1 = new Float(1259.701F);
      Float float2 = new Float(0.0);
      float2.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      wall0.containsPoint((-1.0F), 873.4024F, (-465.6F));
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      Float.compare(1.158346F, 1.158346F);
      Float float0 = new Float(1.158346F);
      Float.min(0, (-1462.7063F));
      Float.isFinite(1.158346F);
      Float float1 = new Float((float) 0);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(4451.117F, 0, 1.158346F, 0, 4451.117F);
      wall0.setWallAtStart(wall1);
      Float.min(4451.117F, 0.105179824F);
      wall1.setWallAtEnd(wall0);
      wall1.intersectsRectangle(0.105179824F, 0.105179824F, 1.158346F, 1.158346F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.containsWallStartAt((-1.0F), (-1.0F), 1.0F);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall1.getRightSideColor();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      wall0.setYEnd(1.158346F);
      Float.compare(1.158346F, 1.158346F);
      Float.isFinite(1.158346F);
      Wall wall1 = new Wall(0, 0, 1.158346F, 0, 0);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      Integer integer0 = new Integer(0);
      wall0.setLeftSideColor(integer0);
      wall0.getRightSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      Wall.Property.values();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F));
      wall0.getXArcCircleCenter();
      float float1 = 0.01F;
      Integer integer0 = new Integer(0);
      String string0 = "";
      int int0 = 0;
      Integer.min(0, 0);
      try { 
        Integer.parseUnsignedInt("~UFN0*v-DhD5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~UFN0*v-DhD5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Level level0 = new Level("]9(ZW7GDXEyj^H*", 0.0F, 0.0F, 0.0F);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall((-612.97424F), 0.65023434F, (-612.97424F), 13.971089F, 13.971089F, (-612.97424F));
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("Invalid URL base for JAR entry", "Invalid URL base for JAR entry", uRLContent0, 438.0763F, (-3901.7F), "Invalid URL base for JAR entry");
      catalogTexture0.getName();
      wall0.setPattern(catalogTexture0);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall(2107.9238F, 0.0F, 0.0F, 2107.9238F, 0.0F, 0.0F);
      wall0.setXEnd(0.0F);
      wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 1104.53F);
      wall0.getRightSideColor();
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0.0F);
      wall0.setArcExtent((Float) 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setYEnd(0.0F);
      wall1.getPoints();
      wall1.setYStart(0.0F);
      Float.compare(0.0F, (-1732.25F));
      Wall wall2 = wall1.clone();
      wall2.setYEnd(0.0F);
      wall1.setYEnd(1073.0F);
      wall1.getHeight();
      wall1.getXArcCircleCenter();
      wall1.getPattern();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-1514.1199F), (-5492.43F), (-858.4937F), 796.2F, (-1514.1199F));
      Float.compare((-1514.1199F), 0.01F);
      Float.compare(0.1F, (-1407.0156F));
      Float float0 = new Float((-1.0F));
      wall0.setHeightAtEnd(float0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("$ <v.ZuIsQ'am,hcCLl", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall((-22.304764F), (-22.304764F), (-22.304764F), 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setWallAtEnd((Wall) null);
      wall0.containsWallStartAt((-821.875F), 0.07479983F, (-821.875F));
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall(790.01025F, 0.0F, 21.063618F, 790.01025F, 0.0F, 790.01025F);
      wall0.getRightSideColor();
      Float.floatToIntBits((-840.9477F));
      Float.max(21.063618F, 790.01025F);
      wall0.clone();
      wall0.setWallAtStart(wall0);
      Float float0 = new Float(6047.0F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F));
      wall0.getXArcCircleCenter();
      Float.compare((-0.5F), 0);
      Float.compare(0.0F, 0.01F);
      wall0.getRightSideTexture();
      wall0.setYEnd(2.0F);
      Wall wall1 = wall0.clone();
      wall1.setYEnd(1.0F);
      wall1.getHeight();
      wall1.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall((-3409.13F), (-3409.13F), (-504.68478F), (-3409.13F), (-3409.13F));
      Wall wall1 = wall0.clone();
      wall0.setYEnd((-3409.13F));
      wall0.getPoints();
      Wall wall2 = wall0.clone();
      wall2.setYStart((-504.68478F));
      Float.compare(2602.8977F, (-2531.444F));
      Float.compare((-3409.13F), (-2531.444F));
      Float.compare(3782.0288F, 0.0F);
      Float float0 = Float.valueOf(3563.8416F);
      wall1.setHeight(float0);
      Float float1 = new Float((-1065.4F));
      Float.floatToIntBits(2758.1F);
      wall0.setArcExtent((Float) 2758.1F);
      wall2.getThickness();
      wall1.setRightSideShininess(1160536474);
      wall0.getLeftSideColor();
      wall2.setWallAtEnd(wall1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.01F, 0.01F, 0.0F, 0.0F);
      Integer integer0 = new Integer((-2035));
      wall0.setLeftSideColor(integer0);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(2107.9238F, 0.0F, 0.0F, 2107.9238F, 0.0F, 0.0F);
      wall0.setXEnd(0.0F);
      wall0.getRightSideColor();
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0.0F);
      wall0.setThickness((-1640.3188F));
      wall0.getYStart();
      Level level0 = new Level("zK~)[yN", (-3185.4583F), (-387.0F), 1193.48F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(2107.9238F, 0.0F, 0.0F, 2107.9238F, 0.0F, 0.0F);
      wall0.setXEnd(0.0F);
      wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 1104.53F);
      wall0.getRightSideColor();
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0.0F);
      wall0.setArcExtent((Float) 0.0F);
      Float.compare(1104.53F, (-1749.1738F));
      Float.compare((-1667.9843F), (-1648.0535F));
      Float.floatToIntBits(1150.2231F);
      wall0.setHeight((Float) 1150.2231F);
      Float float0 = new Float((float) 0);
      wall0.setArcExtent(float0);
      wall0.containsPoint(0.0F, 0.0F, 1150273316);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall((-420.0F), (-1.0F), (-420.0F), (-1.0F), (-420.0F));
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall(2107.9238F, 0.0F, 0.0F, 2107.9238F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 1104.53F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits(0.0F);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2981.0544F, wall1.getLength(), 0.01F);
      assertEquals((-1.7212504E19F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.7212504E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd((-3409.13F));
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.783766E19F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4008.1804F, wall1.getLength(), 0.01F);
      assertEquals((-1.7212505E19F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(4008.1804F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(0);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.7212504E19F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(3.0559997E-5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.7212504E19F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(3.0559997E-5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3.0559997E-5F, float1, 0.01F);
      
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F));
      wall0.getXArcCircleCenter();
      Integer.toUnsignedLong(1227);
      Integer integer0 = new Integer(1996);
      Integer.max(12, 1996);
      Integer integer1 = Integer.getInteger((String) null, 1996);
      wall0.setLeftSideColor(integer1);
      wall0.move((-504.141F), (-1.0F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList2 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList3 = new LinkedList<Wall>(linkedList2);
      wall0.containsWallStartAt((-504.141F), 1227, (-1.0F));
      Wall.clone((List<Wall>) linkedList3);
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone((List<Wall>) linkedList1);
      wall0.setPattern((TextureImage) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getWallAtEnd();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      Float float0 = new Float(0.0F);
      Integer integer0 = Integer.valueOf(2575);
      wall0.setRightSideColor(integer0);
      Wall wall1 = wall0.clone();
      wall0.clone();
      Float float1 = new Float((float) float0);
      wall1.setWallAtEnd(wall0);
      Wall wall2 = wall1.getWallAtEnd();
      wall2.containsWallStartAt(0.0F, 0.117542975F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 846.2F, 846.2F, 846.2F, 2.0F, (-1255.424F));
      Wall wall1 = new Wall((-1.0F), (-1081.0F), 846.2F, 0.01F, 846.2F, 846.2F);
      Float.compare((-1.0F), 3366.66F);
      Float.compare(2753.0764F, 1.0F);
      wall1.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(38.55F, 51.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      Wall wall1 = wall0.clone();
      wall1.setRightSideTexture((HomeTexture) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.CatalogTexture", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall1.getYStart();
      wall1.setLevel((Level) null);
      Float float0 = new Float(1.0F);
      wall1.setHeightAtEnd(float0);
      Integer integer0 = new Integer(0);
      wall1.setRightSideColor(integer0);
      wall1.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Level level0 = new Level("]9(ZW7MDXEyj3H*", 0.0F, 3, 0.0F);
      wall0.containsWallEndAt(3, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall(2107.9238F, 0.0F, 0.0F, 2107.9238F, 0.0F, 0.0F);
      wall0.setXEnd(0.0F);
      wall0.getRightSideColor();
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0.0F);
      wall0.setArcExtent((Float) 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setYEnd((-3409.13F));
      wall0.getHeight();
      wall1.getXArcCircleCenter();
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float.min(0.0F, (-1552.3634F));
      Float.max(0.0F, 0.0F);
      Wall wall0 = new Wall((-1552.3634F), (-1552.3634F), (-1.0F), (-3423.0F), (-1.0F));
      Wall wall1 = wall0.clone();
      Wall wall2 = wall1.clone();
      wall0.setRightSideShininess(846.2F);
      wall0.clone();
      wall2.setWallAtStart(wall1);
      Float float0 = new Float((-1552.3634F));
      wall2.getPoints();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(2.1544733F, 2.1544733F, 2.1544733F, 2.1544733F, 2.1544733F, 2.1544733F);
      wall0.getRightSideShininess();
      Float float0 = new Float((double) 0.0F);
      wall0.setHeightAtEnd(float0);
      Float.max(2496.0F, 4889.354F);
      Wall wall1 = wall0.clone();
      wall0.clone();
      wall1.setWallAtStart(wall0);
      Float float1 = new Float(2496.0F);
      Wall wall2 = wall1.getWallAtStart();
      wall2.getPoints();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall((-2678.2F), (-2678.2F), 0.0F, 2299.015F, (-30.3F));
      wall0.setRightSideTexture((HomeTexture) null);
      Float float0 = new Float((-16.0434F));
      wall0.setArcExtent(float0);
      wall0.setThickness(674.0306F);
      wall0.setXStart(2299.015F);
      wall0.setRightSideShininess((-504.141F));
      wall0.getLeftSideColor();
      wall0.getXEnd();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall((-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F));
      wall0.move((-302.254F), (-302.254F));
      wall0.getHeight();
      Float float0 = Float.valueOf((-302.254F));
      wall0.setHeight(float0);
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("]9(ZW7MDXEyj3H*", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      Level level0 = new Level("]9(ZW7MDXEyj3H*", 0.0F, 0.0F, 0.0F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Level level0 = new Level("]9(ZW7MDXEyj3H*", 0.0F, 0.0F, 0.0F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(2138.4434F, 2138.4434F, 2138.4434F, 2138.4434F, 2138.4434F);
      wall0.setXStart((-2073.5F));
      Float float0 = new Float(2138.4434F);
      wall0.setHeightAtEnd(float0);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 74.52672F, 0.0F, 74.52672F, 74.52672F, 74.52672F);
      Integer integer0 = new Integer(2146756673);
      wall0.setLeftSideColor(integer0);
      Wall wall1 = new Wall(74.52672F, 855.0142F, 855.0142F, (-1166.8364F), (-1.0F), 0.0F);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtStart((Wall) null);
      wall0.getPoints();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      wall0.setYEnd(1.158346F);
      Float.compare(1.158346F, 1.158346F);
      Float float0 = new Float(1.158346F);
      Float.min(0, (-1462.7063F));
      Float.isFinite(1.158346F);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(0, 0, 1.158346F, 0, 0);
      wall0.setWallAtStart(wall1);
      Float.min(2319.337F, 0);
      Wall wall2 = wall0.clone();
      wall2.intersectsRectangle((-0.22606869F), 0.0F, 2319.337F, (-1462.7063F));
      wall2.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall2);
      Float float1 = new Float(2.0F);
      wall2.setArcExtent(float1);
      wall2.getPoints();
      wall1.getPoints();
      wall0.getRightSideTexture();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float((-636.0F));
      Wall wall0 = new Wall((-636.0F), (-879.2F), Float.POSITIVE_INFINITY, 2864.0F, 2138.4434F, (-1.0F));
      Wall wall1 = new Wall(612.7F, 1.0F, (-984.49F), (-1.0F), (-984.49F));
      wall0.setWallAtStart(wall1);
      Float.max((-1534.62F), 612.7F);
      wall1.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(846.2F, 846.2F, 846.2F, 846.2F, 846.2F, 846.2F);
      wall0.getLeftSideTexture();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall((-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F));
      Integer.valueOf((-958));
      Wall wall1 = new Wall(1.7375189F, 1.7375189F, 2236.3F, (-958), (-958));
      wall0.setWallAtEnd(wall1);
      wall1.intersectsRectangle(1.7375189F, 1.0F, 2236.3F, (-1.0F));
      wall1.setYEnd(2236.3F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      assertNotNull(wall0);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setYEnd(1.158346F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      int int0 = Float.compare(1.158346F, 1.158346F);
      assertEquals(0, int0);
      
      boolean boolean0 = Float.isFinite(1.158346F);
      assertTrue(boolean0);
      
      Wall wall1 = new Wall(0, 0, 1.158346F, 0, 0);
      assertNotNull(wall1);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall1.intersectsRectangle(0.105179824F, 0, 1.158346F, 1.158346F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall1.setYEnd(1.158346F);
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(0.105179824F);
      assertNotNull(float0);
      assertEquals(0.105179824F, (float)float0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean2 = float0.equals(object0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[][] floatArray2 = wall0.getPoints();
      assertEquals(4, floatArray2.length);
      assertNotNull(floatArray2);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall((-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F));
      Float float0 = new Float((-302.59738F));
      wall0.getLeftSideColor();
      Wall wall1 = wall0.clone();
      wall1.setYStart(239.0F);
      wall0.setWallAtEnd(wall1);
      wall0.containsWallStartAt((-302.59738F), (-3645.0872F), (-302.59738F));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall((-1633.0F), (-1633.0F), 846.2F, (-1633.0F), (-1633.0F), (-1633.0F));
      Float.floatToIntBits((-2070.0667F));
      Float.floatToIntBits((-2070.0667F));
      Float float0 = new Float((double) 846.2F);
      wall0.getLeftSideColor();
      wall0.setHeightAtEnd(float0);
      wall0.isTrapezoidal();
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall((-1633.0F), 846.2F, 846.2F, (-2533.0F), (-1633.0F), (-2533.0F));
      Float.min(3287.58F, (-2533.0F));
      wall0.getLeftSideColor();
      wall0.setWallAtEnd(wall0);
      wall0.containsWallStartAt((-2560.2463F), (-2533.0F), (-2560.2463F));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall((-3409.13F), (-3409.13F), (-504.68478F), (-3409.13F), (-3409.13F));
      Wall wall1 = wall0.clone();
      wall0.setYEnd((-3345.128F));
      wall1.setYEnd(3279.0F);
      wall1.getHeight();
      wall1.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          float float0 = (-2070.0667F);
          int int0 = Float.floatToIntBits((-2070.0667F));
          Float float1 = new Float(846.2F);
          Float float2 = new Float(4.861187934875488);
          Wall wall0 = new Wall((-989765359), 745.7F, 2.0F, 745.7F, (-2147.45F));
          wall0.setArcExtent(float2);
          float float3 = 3677.45F;
          // Undeclared exception!
          wall0.containsWallStartAt(int0, float3, float0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F));
      wall0.getXArcCircleCenter();
      Float.compare((-0.5F), (-38));
      Float.compare(0.0F, 8.117286F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Integer integer0 = new Integer(1);
      wall0.setLeftSideColor(integer0);
      wall0.move(2953.0F, (-38));
      wall0.setLeftSideColor(integer0);
      wall0.setThickness(34.1306F);
      wall0.getYStart();
      Float float0 = new Float(1.0F);
      Float.min(34.1306F, (-378.5703F));
      Float.compare(0.0F, 0.0F);
      Float.compare(0.0F, 0.0F);
      wall0.setArcExtent((Float) 0.0F);
      wall0.containsPoint(0.0F, (-444.0F), 0.0F);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setRightSideColor((Integer) null);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(13.971089F, (-612.97424F), 1.158346F, (-612.97424F), (-612.97424F));
      Float float0 = Float.valueOf((-612.97424F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
      Float float1 = new Float(1.158346F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall((-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F));
      Float float0 = new Float((-302.59738F));
      Float float1 = new Float((-302.59738F));
      Wall wall1 = new Wall(2864.0F, (-1.0F), 0.0F, Float.POSITIVE_INFINITY, (-1.0F), 2864.0F);
      wall1.setWallAtStart(wall0);
      Float.max(0.0F, (-636.0F));
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(790.01025F, 0.0F, 21.063618F, 790.01025F, 0.0F, 790.01025F);
      Wall wall1 = wall0.clone();
      wall0.setThickness(0.0F);
      wall1.setThickness(790.01025F);
      wall1.setHeight((Float) null);
      wall1.getArcExtent();
      Float.max(790.01025F, (-3681.2612F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setWallAtStart(wall1);
      Float float0 = new Float((-3681.2612F));
      Float.max((-2760.1F), (-1.0F));
      wall0.setHeightAtEnd(float0);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 846.2F, 846.2F, 846.2F, 2.0F, (-1255.424F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getLength(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYEnd(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.move(0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(845.2F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getLength(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(845.2F, wall1.getYStart(), 0.01F);
      assertEquals(845.2F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart((-1.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1196.7075F, wall1.getLength(), 0.01F);
      assertEquals(845.2F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(1196.7075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(422.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, 846.2F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1196.7075F, wall1.getLength(), 0.01F);
      assertEquals(845.2F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(1196.7075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(422.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float1 = wall0.getArcExtent();
      assertNull(float1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean1 = wall1.intersectsRectangle(2.0F, 4568.341F, (-1.0F), 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1196.7075F, wall1.getLength(), 0.01F);
      assertEquals(845.2F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(1196.7075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(422.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1196.7075F, wall1.getLength(), 0.01F);
      assertEquals(845.2F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(1196.7075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(422.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall1.getRightSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1196.7075F, wall1.getLength(), 0.01F);
      assertEquals(845.2F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(1196.7075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(422.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1196.7075F, wall1.getLength(), 0.01F);
      assertEquals(845.2F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(1196.7075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(422.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setXStart(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1196.7075F, wall1.getLength(), 0.01F);
      assertEquals(845.2F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(1196.7075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(422.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-107.226494F), 16.9F, 21.064F, (-107.226494F), 16.9F, (-107.226494F));
      assertNotNull(wall0);
      assertEquals(178.51004F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(178.51004F, wall0.getLength(), 0.01F);
      assertEquals((-107.226494F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-43.081245F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.226494F), wall0.getXStart(), 0.01F);
      assertEquals(16.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-45.163246F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(21.064F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-107.226494F), wall0.getHeight(), 0.01F);
      assertEquals(16.9F, wall0.getYStart(), 0.01F);
      
      float float0 = Float.max(21.064F, (-107.226494F));
      assertEquals(21.064F, float0, 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(178.51004F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(178.51004F, wall0.getLength(), 0.01F);
      assertEquals((-107.226494F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-43.081245F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.226494F), wall0.getXStart(), 0.01F);
      assertEquals(16.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-45.163246F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(21.064F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-107.226494F), wall0.getHeight(), 0.01F);
      assertEquals(16.9F, wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(178.51004F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(178.51004F, wall0.getLength(), 0.01F);
      assertEquals((-107.226494F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-43.081245F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.226494F), wall0.getXStart(), 0.01F);
      assertEquals(16.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-45.163246F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(21.064F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-107.226494F), wall0.getHeight(), 0.01F);
      assertEquals(16.9F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNotNull(wall1);
      assertEquals(178.51004F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(178.51004F, wall0.getLength(), 0.01F);
      assertEquals((-107.226494F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-43.081245F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.226494F), wall0.getXStart(), 0.01F);
      assertEquals(16.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-45.163246F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(21.064F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-107.226494F), wall0.getHeight(), 0.01F);
      assertEquals(16.9F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(16.9F, wall1.getYStart(), 0.01F);
      assertEquals(21.064F, wall1.getXEnd(), 0.01F);
      assertEquals(16.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-107.226494F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(178.51004F, wall1.getLength(), 0.01F);
      assertEquals((-45.163246F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-43.081245F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.226494F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(178.51004F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-107.226494F), wall1.getYEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsWallStartAt(21.064F, 0.0F, (-2739.4546F));
      assertEquals(178.51004F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(178.51004F, wall0.getLength(), 0.01F);
      assertEquals((-107.226494F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-43.081245F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.226494F), wall0.getXStart(), 0.01F);
      assertEquals(16.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-45.163246F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(21.064F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-107.226494F), wall0.getHeight(), 0.01F);
      assertEquals(16.9F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(16.9F, wall1.getYStart(), 0.01F);
      assertEquals(21.064F, wall1.getXEnd(), 0.01F);
      assertEquals(16.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-107.226494F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(178.51004F, wall1.getLength(), 0.01F);
      assertEquals((-45.163246F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-43.081245F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.226494F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(178.51004F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-107.226494F), wall1.getYEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 846.2F, 846.2F, 846.2F, 2.0F, 2.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-1633.0F), (-2533.0F), 1046.753F, (-2533.0F), 2239.6F, (-2533.0F));
      assertNotNull(wall1);
      assertEquals((-2533.0F), wall1.getYStart(), 0.01F);
      assertEquals(2239.6F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2533.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1046.753F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2679.753F, wall1.getLength(), 0.01F);
      assertEquals(2679.753F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1633.0F), wall1.getXStart(), 0.01F);
      assertEquals((-293.12347F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2533.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2533.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setXEnd((-2070.0667F));
      assertEquals((-2533.0F), wall1.getYStart(), 0.01F);
      assertEquals(2239.6F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2533.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(437.06665F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(437.06665F, wall1.getLength(), 0.01F);
      assertEquals((-2070.0667F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1633.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2533.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1851.5333F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2533.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      int int0 = Float.floatToIntBits((-2070.0667F));
      assertEquals((-989765359), int0);
      
      int int1 = Float.floatToIntBits((-2070.0667F));
      assertTrue(int1 == int0);
      assertEquals((-989765359), int1);
      
      Float float0 = new Float(2.0F);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      wall1.setArcExtent(float0);
      assertEquals((-2533.0F), wall1.getYStart(), 0.01F);
      assertEquals(2239.6F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(437.06665F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(519.40784F, wall1.getLength(), 0.01F);
      assertEquals((-2070.0667F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2673.3186F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1633.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2533.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1851.5333F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2533.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(846.2F, wall2.getYEnd(), 0.01F);
      assertEquals(846.2F, wall2.getXEnd(), 0.01F);
      assertEquals(846.2F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(846.2F, wall2.getYStart(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(423.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(846.2F, wall2.getLength(), 0.01F);
      assertEquals(846.2F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setYEnd((-2070.0667F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(846.2F, wall2.getXEnd(), 0.01F);
      assertEquals(3036.555F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(846.2F, wall2.getYStart(), 0.01F);
      assertEquals((-2070.0667F), wall2.getYEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(423.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(3036.555F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-611.93335F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float1 = wall1.getHeight();
      assertNotNull(float1);
      assertEquals((-2533.0F), wall1.getYStart(), 0.01F);
      assertEquals(2239.6F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(437.06665F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(519.40784F, wall1.getLength(), 0.01F);
      assertEquals((-2070.0667F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2673.3186F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1633.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2533.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1851.5333F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2533.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2533.0F), (float)float1, 0.01F);
      
      float float2 = wall1.getXArcCircleCenter();
      assertEquals((-2533.0F), wall1.getYStart(), 0.01F);
      assertEquals(2239.6F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(437.06665F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(519.40784F, wall1.getLength(), 0.01F);
      assertEquals((-2070.0667F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2673.3186F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1633.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2533.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1851.5333F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2533.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1851.5333F), float2, 0.01F);
      
      float float3 = wall0.getLength();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(846.2F, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall((-22.304764F), (-22.304764F), (-22.304764F), 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(22.304764F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-22.304764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-22.304764F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-22.304764F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.152382F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(22.304764F, wall0.getLength(), 0.01F);
      assertEquals((-22.304764F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(22.304764F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-22.304764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-22.304764F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-22.304764F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.152382F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(22.304764F, wall0.getLength(), 0.01F);
      assertEquals((-22.304764F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(22.304764F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-22.304764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-22.304764F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-22.304764F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.152382F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(22.304764F, wall0.getLength(), 0.01F);
      assertEquals((-22.304764F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(846.2F, 846.2F, 846.2F, 846.2F, 846.2F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(846.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(846.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getXStart(), 0.01F);
      assertEquals(846.2F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.getWallAtStart();
      assertNull(wall2);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(846.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(boolean0);
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall((-303.53348F), (-303.53348F), (-303.53348F), (-303.53348F), (-303.53348F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-303.53348F), wall0.getXStart(), 0.01F);
      assertEquals((-303.53348F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-303.53348F), wall0.getYEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getXEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-303.53348F), wall0.getXStart(), 0.01F);
      assertEquals((-303.53348F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-303.53348F), wall0.getYEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getXEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-303.53348F), wall0.getXStart(), 0.01F);
      assertEquals((-303.53348F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-303.53348F), wall0.getYEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getXEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-303.53348F), wall0.getXStart(), 0.01F);
      assertEquals((-303.53348F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-303.53348F), wall0.getYEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getXEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-303.53348F), wall0.getXStart(), 0.01F);
      assertEquals((-303.53348F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-303.53348F), wall0.getYEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getXEnd(), 0.01F);
      assertEquals((-303.53348F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-303.53348F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      boolean boolean0 = wall0.containsPoint(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(boolean0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = float0.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = new Wall(692.8923F, 0.0F, 692.8923F, 0.6189469F, 636.89F);
      assertNotNull(wall1);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.6189469F, wall1.getLength(), 0.01F);
      assertEquals(0.6189469F, wall1.getYEnd(), 0.01F);
      assertEquals(692.8923F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.30947345F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(692.8923F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(636.89F, wall1.getThickness(), 0.01F);
      assertEquals(0.6189469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(692.8923F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.6189469F, wall1.getLength(), 0.01F);
      assertEquals(0.6189469F, wall1.getYEnd(), 0.01F);
      assertEquals(692.8923F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.30947345F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(692.8923F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(636.89F, wall1.getThickness(), 0.01F);
      assertEquals(0.6189469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(692.8923F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = Float.min((-566.2F), 636.89F);
      assertEquals((-566.2F), float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.6189469F, wall1.getLength(), 0.01F);
      assertEquals(0.6189469F, wall1.getYEnd(), 0.01F);
      assertEquals(692.8923F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.30947345F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(692.8923F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(636.89F, wall1.getThickness(), 0.01F);
      assertEquals(0.6189469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(692.8923F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean2 = wall1.intersectsRectangle((-2635.901F), (-566.2F), 0.0F, (-566.2F));
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.6189469F, wall1.getLength(), 0.01F);
      assertEquals(0.6189469F, wall1.getYEnd(), 0.01F);
      assertEquals(692.8923F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.30947345F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(692.8923F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(636.89F, wall1.getThickness(), 0.01F);
      assertEquals(0.6189469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(692.8923F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.6189469F, wall1.getLength(), 0.01F);
      assertEquals(0.6189469F, wall1.getYEnd(), 0.01F);
      assertEquals(692.8923F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.30947345F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(692.8923F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(636.89F, wall1.getThickness(), 0.01F);
      assertEquals(0.6189469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(692.8923F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotNull(wall2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(692.8923F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.6189469F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(692.8923F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(636.89F, wall2.getThickness(), 0.01F);
      assertEquals(0.30947345F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(692.8923F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.6189469F, wall2.getYEnd(), 0.01F);
      assertEquals(0.6189469F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(692.8923F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.6189469F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(692.8923F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(636.89F, wall2.getThickness(), 0.01F);
      assertEquals(0.30947345F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(692.8923F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.6189469F, wall2.getYEnd(), 0.01F);
      assertEquals(0.6189469F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.6189469F, wall1.getLength(), 0.01F);
      assertEquals(0.6189469F, wall1.getYEnd(), 0.01F);
      assertEquals(692.8923F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.30947345F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(692.8923F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(636.89F, wall1.getThickness(), 0.01F);
      assertEquals(0.6189469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(692.8923F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(692.8923F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.6189469F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(692.8923F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(636.89F, wall2.getThickness(), 0.01F);
      assertEquals(0.30947345F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(692.8923F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.6189469F, wall2.getYEnd(), 0.01F);
      assertEquals(0.6189469F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.6189469F, wall1.getLength(), 0.01F);
      assertEquals(0.6189469F, wall1.getYEnd(), 0.01F);
      assertEquals(692.8923F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.30947345F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(692.8923F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(636.89F, wall1.getThickness(), 0.01F);
      assertEquals(0.6189469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(692.8923F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.6189469F, wall1.getLength(), 0.01F);
      assertEquals(0.6189469F, wall1.getYEnd(), 0.01F);
      assertEquals(692.8923F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.30947345F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(692.8923F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(636.89F, wall1.getThickness(), 0.01F);
      assertEquals(0.6189469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(692.8923F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = wall1.getLength();
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.6189469F, wall1.getLength(), 0.01F);
      assertEquals(0.6189469F, wall1.getYEnd(), 0.01F);
      assertEquals(692.8923F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.30947345F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(692.8923F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(636.89F, wall1.getThickness(), 0.01F);
      assertEquals(0.6189469F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(692.8923F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertNotEquals(float2, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.6189469F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-2070.0667F), (-1.0F), (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2069.0667F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1035.5333F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2070.0667F), wall0.getXEnd(), 0.01F);
      assertEquals(2069.0667F, wall0.getLength(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2069.0667F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1035.5333F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2070.0667F), wall0.getXEnd(), 0.01F);
      assertEquals(2069.0667F, wall0.getLength(), 0.01F);
      assertEquals(2069.0667F, float0, 0.01F);
      
      Integer integer0 = new Integer((-2736));
      assertNotNull(integer0);
      assertEquals((-2736), (int)integer0);
      
      int int0 = Integer.compareUnsigned((-3447), (-2736));
      assertEquals((-1), int0);
      
      long long0 = Integer.toUnsignedLong((-2736));
      assertEquals(4294964560L, long0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2736), (int)wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2069.0667F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1035.5333F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2070.0667F), wall0.getXEnd(), 0.01F);
      assertEquals(2069.0667F, wall0.getLength(), 0.01F);
      assertFalse(integer0.equals((Object)int0));
      
      wall0.move((-2736), 802.2F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-2736), (int)wall0.getLeftSideColor());
      assertEquals((-3771.5332F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2737.0F), wall0.getXStart(), 0.01F);
      assertEquals(2069.0664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4806.0664F), wall0.getXEnd(), 0.01F);
      assertEquals(801.2F, wall0.getYStart(), 0.01F);
      assertEquals(801.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(801.2F, wall0.getYEnd(), 0.01F);
      assertEquals(2069.0664F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-2736), (int)wall0.getLeftSideColor());
      assertEquals((-3771.5332F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2737.0F), wall0.getXStart(), 0.01F);
      assertEquals(2069.0664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4806.0664F), wall0.getXEnd(), 0.01F);
      assertEquals(801.2F, wall0.getYStart(), 0.01F);
      assertEquals(801.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(801.2F, wall0.getYEnd(), 0.01F);
      assertEquals(2069.0664F, wall0.getLength(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-2736), (int)wall0.getLeftSideColor());
      assertEquals((-3771.5332F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2737.0F), wall0.getXStart(), 0.01F);
      assertEquals(2069.0664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4806.0664F), wall0.getXEnd(), 0.01F);
      assertEquals(801.2F, wall0.getYStart(), 0.01F);
      assertEquals(801.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(801.2F, wall0.getYEnd(), 0.01F);
      assertEquals(2069.0664F, wall0.getLength(), 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      
      Float float3 = new Float(517.9665904046619);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(517.9666F, (float)float3, 0.01F);
      
      float float4 = float3.floatValue();
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(517.9666F, float4, 0.01F);
      
      float float5 = float3.floatValue();
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertEquals(float5, float4, 0.01F);
      assertEquals(517.9666F, float5, 0.01F);
      
      float float6 = ((Float)517.9666F).floatValue();
      assertNotEquals(float6, float0, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertEquals(float6, float4, 0.01F);
      assertEquals(float6, float5, 0.01F);
      assertEquals(517.9666F, float6, 0.01F);
      
      int int1 = Float.floatToIntBits(1150.2231F);
      assertFalse(int1 == int0);
      assertEquals(1150273316, int1);
      
      wall0.setHeight((Float) 1150.2231F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-2736), (int)wall0.getLeftSideColor());
      assertEquals((-3771.5332F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1150.2231F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2737.0F), wall0.getXStart(), 0.01F);
      assertEquals(2069.0664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4806.0664F), wall0.getXEnd(), 0.01F);
      assertEquals(801.2F, wall0.getYStart(), 0.01F);
      assertEquals(801.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(801.2F, wall0.getYEnd(), 0.01F);
      assertEquals(2069.0664F, wall0.getLength(), 0.01F);
      
      Float float7 = new Float(1814.4199F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals(1814.4199F, (float)float7, 0.01F);
      
      wall0.setArcExtent(float3);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-2736), (int)wall0.getLeftSideColor());
      assertEquals(593.5493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3771.5332F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1150.2231F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2737.0F), wall0.getXStart(), 0.01F);
      assertEquals(2069.0664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4806.0664F), wall0.getXEnd(), 0.01F);
      assertEquals(801.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(546541.3F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(801.2F, wall0.getYEnd(), 0.01F);
      assertEquals(517.9666F, wall0.getArcExtent(), 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float6, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float7, 0.01F);
      assertEquals((float)float3, (float)float5, 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1582.0562F), (-1046.0F), 2.0F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-2736), (int)wall0.getLeftSideColor());
      assertEquals(593.5493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3771.5332F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1150.2231F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2737.0F), wall0.getXStart(), 0.01F);
      assertEquals(2069.0664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4806.0664F), wall0.getXEnd(), 0.01F);
      assertEquals(801.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(546541.3F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(801.2F, wall0.getYEnd(), 0.01F);
      assertEquals(517.9666F, wall0.getArcExtent(), 0.01F);
      assertFalse(boolean0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall1);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-2736), (int)wall0.getLeftSideColor());
      assertEquals(593.5493F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3771.5332F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1150.2231F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2737.0F), wall0.getXStart(), 0.01F);
      assertEquals(2069.0664F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4806.0664F), wall0.getXEnd(), 0.01F);
      assertEquals(801.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(546541.3F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(801.2F, wall0.getYEnd(), 0.01F);
      assertEquals(517.9666F, wall0.getArcExtent(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(2107.9238F, 0.0F, 0.0F, 2107.9238F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      int int0 = Float.floatToIntBits((-114.84307F));
      assertEquals((-1025134681), int0);
      
      int int1 = Float.floatToIntBits((-1508.8F));
      assertFalse(int1 == int0);
      assertEquals((-994272870), int1);
      
      Float float0 = new Float((double) 2107.9238F);
      assertNotNull(float0);
      assertEquals(2107.9238F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getArcExtent(), 0.01F);
      assertEquals(3144747.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1009.22473F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1009.22473F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getArcExtent(), 0.01F);
      assertEquals(3144747.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1009.22473F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1009.22473F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1009.22473F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1009.22473F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2107.9238F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2107.9238F, wall1.getArcExtent(), 0.01F);
      assertEquals(3144747.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getArcExtent(), 0.01F);
      assertEquals(3144747.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1009.22473F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1009.22473F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2223672.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1053.9619F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-44.737186F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2107.9238F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getArcExtent(), 0.01F);
      assertEquals(3144747.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1009.22473F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1009.22473F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2223672.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1053.9619F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-44.737186F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2107.9238F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall0.getHeight();
      assertNotNull(float1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getArcExtent(), 0.01F);
      assertEquals(3144747.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1009.22473F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1009.22473F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getArcExtent(), 0.01F);
      assertEquals(3144747.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1009.22473F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1009.22473F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1009.22473F, float2, 0.01F);
      
      float float3 = wall0.getLength();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getArcExtent(), 0.01F);
      assertEquals(3144747.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1009.22473F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1009.22473F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(3144747.0F, float3, 0.01F);
      
      Float float4 = wall1.getArcExtent();
      assertNotNull(float4);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getArcExtent(), 0.01F);
      assertEquals(3144747.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1009.22473F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1009.22473F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2223672.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1053.9619F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-44.737186F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2107.9238F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(2107.9238F, (float)float4, 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getArcExtent(), 0.01F);
      assertEquals(3144747.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1009.22473F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1009.22473F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.01F, 0.01F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.014142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.014142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(0.01F, 0.0F, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.014142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.014142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertTrue(boolean0);
      
      int int0 = Float.floatToIntBits((-731.65F));
      assertEquals((-1003034214), int0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals(0.0F, float1, 0.01F);
      
      Float float2 = new Float((-1.0F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      float float3 = float2.floatValue();
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-1.0F), float3, 0.01F);
      
      Float float4 = new Float((double) 0.0F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      float float5 = float4.floatValue();
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(float5, float1, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      
      wall0.setHeight((Float) 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.014142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.014142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      int int1 = Float.floatToIntBits((-1377.6166F));
      assertFalse(int1 == int0);
      assertEquals((-995347525), int1);
      
      int int2 = Float.floatToIntBits((-1003034214));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-831576998), int2);
      
      wall0.setArcExtent((Float) (-1377.6166F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(13.585969F, wall0.getLength(), 0.01F);
      assertEquals(0.014142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.3904151E-4F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.009860958F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1377.6166F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(13.585969F, wall0.getLength(), 0.01F);
      assertEquals(0.014142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.3904151E-4F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.009860958F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1377.6166F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setYStart(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(13.585969F, wall0.getLength(), 0.01F);
      assertEquals(0.014142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.3904151E-4F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.009860958F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1377.6166F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall((-107.08248F), 0.0F, 21.064F, (-107.08248F), 0.0F, (-107.08248F));
      assertNotNull(wall0);
      assertEquals((-43.00924F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.08248F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(21.064F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(166.99754F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-53.54124F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-107.08248F), wall0.getYEnd(), 0.01F);
      assertEquals(166.99754F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-107.08248F), wall0.getXStart(), 0.01F);
      
      float float0 = Float.max(21.064F, (-107.08248F));
      assertEquals(21.064F, float0, 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-43.00924F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.08248F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(21.064F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(166.99754F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-53.54124F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-107.08248F), wall0.getYEnd(), 0.01F);
      assertEquals(166.99754F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-107.08248F), wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals((-43.00924F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.08248F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(21.064F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(166.99754F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-53.54124F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-107.08248F), wall0.getYEnd(), 0.01F);
      assertEquals(166.99754F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-107.08248F), wall0.getXStart(), 0.01F);
      
      Float float1 = wall0.getHeightAtEnd();
      assertNull(float1);
      assertEquals((-43.00924F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-107.08248F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(21.064F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(166.99754F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-53.54124F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-107.08248F), wall0.getYEnd(), 0.01F);
      assertEquals(166.99754F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-107.08248F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall((-22.304764F), (-22.304764F), (-22.304764F), 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-22.304764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(22.304764F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-22.304764F), wall0.getXStart(), 0.01F);
      assertEquals((-22.304764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.152382F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.304764F), wall0.getXEnd(), 0.01F);
      assertEquals(22.304764F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-22.304764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(22.304764F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-22.304764F), wall0.getXStart(), 0.01F);
      assertEquals((-22.304764F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.152382F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.304764F), wall0.getXEnd(), 0.01F);
      assertEquals(22.304764F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-22.304764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(22.304764F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-22.304764F), wall0.getXStart(), 0.01F);
      assertEquals((-22.304764F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.152382F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.304764F), wall0.getXEnd(), 0.01F);
      assertEquals(22.304764F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.82132211E17F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.304764F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-22.304764F), wall0.getXStart(), 0.01F);
      assertEquals((-22.304764F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.152382F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.304764F), wall0.getXEnd(), 0.01F);
      assertEquals(22.304764F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float1 = wall0.getHeightAtEnd();
      assertNotNull(float1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.82132211E17F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.304764F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-22.304764F), wall0.getXStart(), 0.01F);
      assertEquals((-22.304764F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.152382F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.304764F), wall0.getXEnd(), 0.01F);
      assertEquals(22.304764F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall((-1633.0F), (-2533.0F), 846.2F, (-2533.0F), (-1633.0F), (-2533.0F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2533.0F), wall0.getHeight(), 0.01F);
      assertEquals((-2533.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals((-2533.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2533.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals(2479.2F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = Float.min(3287.58F, (-2533.0F));
      assertEquals((-2533.0F), float0, 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2533.0F), wall0.getHeight(), 0.01F);
      assertEquals((-2533.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals((-2533.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2533.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals(2479.2F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2533.0F), wall0.getHeight(), 0.01F);
      assertEquals((-2533.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals((-2533.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2533.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals(2479.2F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.containsWallStartAt((-2560.2463F), (-2533.0F), (-2560.2463F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2533.0F), wall0.getHeight(), 0.01F);
      assertEquals((-2533.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals((-2533.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2533.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals(2479.2F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.compare(1752.475F, 0.0F);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.setLeftSideShininess(1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall((-1633.0F), 846.2F, 846.2F, 846.2F, (-1633.0F), 846.2F);
      assertNotNull(wall0);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2479.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setXEnd(846.2F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2479.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      
      int int0 = Float.floatToIntBits((-1633.0F));
      assertEquals((-993255424), int0);
      
      Float float0 = new Float(846.2F);
      assertNotNull(float0);
      assertEquals(846.2F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(76.2771F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1234811.2F, wall0.getLength(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(76.2771F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1234811.2F, wall0.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1478, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(76.2771F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1234811.2F, wall0.getLength(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(76.2771F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1234811.2F, wall0.getLength(), 0.01F);
      
      Float float1 = wall0.getHeightAtEnd();
      assertNotNull(float1);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(2479.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(76.2771F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1633.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1234811.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall((-1633.0F), (-1633.0F), 846.2F, 846.2F, 846.2F);
      assertNotNull(wall0);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals((-393.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(3506.1182F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1633.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3506.1182F, wall0.getLength(), 0.01F);
      
      wall0.setXEnd((-2070.0667F));
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(2517.4312F, wall0.getLength(), 0.01F);
      assertEquals((-393.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2517.4312F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2070.0667F), wall0.getXEnd(), 0.01F);
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1633.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1851.5333F), wall0.getXArcCircleCenter(), 0.01F);
      
      int int0 = Float.floatToIntBits((-2070.0667F));
      assertEquals((-989765359), int0);
      
      Float float0 = wall0.getHeight();
      assertNull(float0);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(2517.4312F, wall0.getLength(), 0.01F);
      assertEquals((-393.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2517.4312F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2070.0667F), wall0.getXEnd(), 0.01F);
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1633.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1851.5333F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(2517.4312F, wall0.getLength(), 0.01F);
      assertEquals((-393.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2517.4312F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2070.0667F), wall0.getXEnd(), 0.01F);
      assertEquals((-1633.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1633.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1851.5333F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      assertNotNull(wall0);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-504.141F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-504.141F), (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals((-504.141F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals((-504.141F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(93.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(93.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-504.141F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(93.0F, wall1.getYStart(), 0.01F);
      assertEquals(93.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd((-504.141F));
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals((-504.141F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-324.97134F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(222480.3F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(597.141F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-205.5705F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-504.141F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-504.141F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(93.0F, wall1.getYStart(), 0.01F);
      assertEquals(93.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = wall0.getHeight();
      assertNotNull(float2);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals((-504.141F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(93.0F, (float)float2, 0.01F);
      
      float float3 = wall0.getXArcCircleCenter();
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals((-504.141F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float3, 0.01F);
      
      float float4 = wall1.getLength();
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals((-504.141F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-324.97134F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(222480.3F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(597.141F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-205.5705F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-504.141F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-504.141F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(93.0F, wall1.getYStart(), 0.01F);
      assertEquals(93.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(222480.3F, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean0 = linkedList0.offerFirst(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(2107.9238F, 0.0F, 0.0F, 2107.9238F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      
      wall0.setYEnd((-1.0F));
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 1104.53F);
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits(0.0F);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = Float.compare(0.0F, 3502.235F);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setLeftSideShininess((-1668.0F));
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1668.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setThickness(0);
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1668.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("A[~+H5=RK=kObd/Y5", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("A[~+H5=RK=kObd/Y5", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1668.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals("A[~+H5=RK=kObd/Y5", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1668.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1668.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2107.924F, float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(2107.924F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1668.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Integer integer0 = Integer.valueOf(2678);
      assertNotNull(integer0);
      assertEquals(2678, (int)integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2678, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-1552.3634F), 0.0F);
      assertNotNull(wall1);
      assertEquals((-1552.3634F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2678, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2678, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Float float1 = wall2.getHeight();
      assertNotNull(float1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2678, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2678, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      wall2.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2678, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2678, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      boolean boolean0 = wall2.containsPoint(877.472F, 2678, 2678);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2678, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2678, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(boolean0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2678, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      wall2.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2678, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2678, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Float float2 = wall1.getHeightAtEnd();
      assertNull(float2);
      assertEquals((-1552.3634F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float3 = new Float(0.0F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      wall0.setHeightAtEnd(float3);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2678, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall((-84.334F), (-3345.128F), (-84.334F), (-84.334F), 0.0F);
      assertNotNull(wall0);
      assertEquals(3260.794F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-84.334F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-84.334F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3260.794F, wall0.getLength(), 0.01F);
      assertEquals((-1714.731F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3345.128F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-84.334F), wall0.getXEnd(), 0.01F);
      assertEquals((-84.334F), wall0.getYEnd(), 0.01F);
      
      int int0 = Float.compare((-84.334F), 0.0F);
      assertEquals((-1), int0);
      
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      float float1 = Float.min((-3345.128F), (-1));
      assertEquals((-3345.128F), float1, 0.01F);
      
      boolean boolean0 = Float.isFinite((-84.334F));
      assertTrue(boolean0);
      
      Float float2 = new Float((-3345.128F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-3345.128F), (float)float2, 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-1), (-3345.128F), 1.0F, 0.0F, 2.0F);
      assertNotNull(wall1);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3345.128F), wall1.getXEnd(), 0.01F);
      assertEquals(3345.1284F, wall1.getLength(), 0.01F);
      assertEquals(3345.1284F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1672.564F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(3260.794F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-84.334F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-84.334F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3260.794F, wall0.getLength(), 0.01F);
      assertEquals((-1714.731F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3345.128F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-84.334F), wall0.getXEnd(), 0.01F);
      assertEquals((-84.334F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3345.128F), wall1.getXEnd(), 0.01F);
      assertEquals(3345.1284F, wall1.getLength(), 0.01F);
      assertEquals(3345.1284F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1672.564F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = Float.max(1416.8673F, 526.652F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(1416.8673F, float3, 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertEquals(3260.794F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-84.334F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-84.334F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3260.794F, wall0.getLength(), 0.01F);
      assertEquals((-1714.731F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3345.128F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-84.334F), wall0.getXEnd(), 0.01F);
      assertEquals((-84.334F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3345.128F), wall1.getXEnd(), 0.01F);
      assertEquals(3345.1284F, wall1.getLength(), 0.01F);
      assertEquals(3345.1284F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1672.564F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(3260.794F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-84.334F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-84.334F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3260.794F, wall0.getLength(), 0.01F);
      assertEquals((-1714.731F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3345.128F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-84.334F), wall0.getXEnd(), 0.01F);
      assertEquals((-84.334F), wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float4 = new Float(0.0F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall(0.7753392F, 0.7753392F, 0.7753392F, 0.7753392F, 0.7753392F);
      assertNotNull(wall0);
      assertEquals(0.7753392F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.7753392F, wall0.getYEnd(), 0.01F);
      assertEquals(0.7753392F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.7753392F, wall0.getXStart(), 0.01F);
      assertEquals(0.7753392F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.7753392F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.7753392F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertEquals(0.7753392F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.7753392F, wall0.getYEnd(), 0.01F);
      assertEquals(0.7753392F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.7753392F, wall0.getXStart(), 0.01F);
      assertEquals(0.7753392F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.7753392F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.7753392F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall(333.86884F, 333.86884F, 333.86884F, 333.86884F, 333.86884F, (-1.0F));
      assertNotNull(wall0);
      assertEquals(333.86884F, wall0.getXEnd(), 0.01F);
      assertEquals(333.86884F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(333.86884F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(333.86884F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(333.86884F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(333.86884F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(333.86884F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertEquals(333.86884F, wall0.getXEnd(), 0.01F);
      assertEquals(333.86884F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(333.86884F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(333.86884F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(333.86884F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(333.86884F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(333.86884F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall(2139.1917F, 2139.1917F, 2139.1917F, 2139.1917F, 2139.1917F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2139.1917F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2139.1917F, wall0.getYEnd(), 0.01F);
      assertEquals(2139.1917F, wall0.getXEnd(), 0.01F);
      assertEquals(2139.1917F, wall0.getYStart(), 0.01F);
      assertEquals(2139.1917F, wall0.getXStart(), 0.01F);
      assertEquals(2139.1917F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2139.1917F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float(2139.1917F);
      assertNotNull(float0);
      assertEquals(2139.1917F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.1917F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2139.1917F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2139.1917F, wall0.getYEnd(), 0.01F);
      assertEquals(2139.1917F, wall0.getXEnd(), 0.01F);
      assertEquals(2139.1917F, wall0.getYStart(), 0.01F);
      assertEquals(2139.1917F, wall0.getXStart(), 0.01F);
      assertEquals(2139.1917F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2139.1917F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall((-19.325207F), (-19.325207F), (-19.325207F), (-19.325207F), (-19.325207F), (-19.325207F));
      assertNotNull(wall0);
      assertEquals((-19.325207F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.325207F), wall0.getXStart(), 0.01F);
      assertEquals((-19.325207F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-19.325207F), wall0.getYStart(), 0.01F);
      assertEquals((-19.325207F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.325207F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-19.325207F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.325207F), wall0.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals((-19.325207F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.325207F), wall0.getXStart(), 0.01F);
      assertEquals((-19.325207F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-19.325207F), wall0.getYStart(), 0.01F);
      assertEquals((-19.325207F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.325207F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-19.325207F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.325207F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(2107.9238F, 2107.9238F, 0.0F, 2107.9238F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setXEnd(2107.9238F);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 2107.9238F, 2107.9238F, 1104.53F);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(boolean0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits(0.0F);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2107.9238F, wall1.getYEnd(), 0.01F);
      assertEquals(2107.9238F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2107.9238F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2107.9238F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(0.0F);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1053.9618F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2107.9238F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(1.7212504E19F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1053.9618F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2107.9238F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(1.7212504E19F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart(2107.9238F);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1053.9618F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2107.9238F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(1.7212504E19F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      int int2 = Float.compare(0.0F, (-1732.25F));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = Float.compare(1633.286F, (-465.6F));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      int int4 = Float.compare(1, 1562.6064F);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals((-1), int4);
      
      wall0.setHeight((Float) 1562.6064F);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float0 = new Float((-465.6F));
      assertNotNull(float0);
      assertEquals((-465.6F), (float)float0, 0.01F);
      
      wall1.setArcExtent(float0);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1053.9619F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2107.9238F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2107.9238F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-465.6F), wall1.getArcExtent(), 0.01F);
      assertEquals(1549965.9F, wall1.getLength(), 0.01F);
      assertEquals((-1049.7917F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setThickness(0.0F);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall0.getThickness();
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setRightSideShininess(2107.9238F);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer1 = wall0.getLeftSideColor();
      assertNull(integer1);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1053.9619F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2107.9238F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2107.9238F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-465.6F), wall1.getArcExtent(), 0.01F);
      assertEquals(1549965.9F, wall1.getLength(), 0.01F);
      assertEquals((-1049.7917F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(2107.9238F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2107.9238F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1053.9619F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2107.9238F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2107.9238F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-465.6F), wall1.getArcExtent(), 0.01F);
      assertEquals(1549965.9F, wall1.getLength(), 0.01F);
      assertEquals((-1049.7917F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.15245779F, 790.01025F, 1.6344668F, 0.15245779F);
      assertNotNull(wall0);
      assertEquals(1.6344668F, wall0.getYEnd(), 0.01F);
      assertEquals(0.8934623F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(395.01013F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.15245779F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(790.00165F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(790.00165F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.15245779F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Level level0 = new Level("", 2905.078F, 1.0F, 0.01F);
      assertNotNull(level0);
      assertEquals(2905.078F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      
      wall0.setLevel(level0);
      assertEquals(1.6344668F, wall0.getYEnd(), 0.01F);
      assertEquals(0.8934623F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(395.01013F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.15245779F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(790.00165F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(790.00165F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.15245779F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2905.078F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertEquals(1.6344668F, wall0.getYEnd(), 0.01F);
      assertEquals(0.8934623F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(395.01013F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.15245779F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(790.00165F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(790.00165F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.15245779F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertNull(wall1);
      assertEquals(1.6344668F, wall0.getYEnd(), 0.01F);
      assertEquals(0.8934623F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(395.01013F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.15245779F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(790.00165F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(790.00165F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.15245779F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall((-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.59738F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.59738F), wall0.getHeight(), 0.01F);
      assertEquals((-302.59738F), wall0.getYEnd(), 0.01F);
      assertEquals((-302.59738F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-302.59738F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.59738F), wall0.getYStart(), 0.01F);
      assertEquals((-302.59738F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-302.59738F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = new Float((-302.59738F));
      assertNotNull(float0);
      assertEquals((-302.59738F), (float)float0, 0.01F);
      
      float float1 = Float.min((-636.0F), (-843.05286F));
      assertEquals((-843.05286F), float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(1654.23F);
      assertTrue(boolean0);
      
      Float float2 = new Float((-843.05286F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-843.05286F), (float)float2, 0.01F);
      
      Wall wall1 = new Wall(2864.0F, (-1.0F), 0.0F, Float.POSITIVE_INFINITY, (-1.0F), 2864.0F);
      assertNotNull(wall1);
      assertEquals(1432.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(2864.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(Float.POSITIVE_INFINITY, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2864.0F, wall1.getXStart(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.59738F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.59738F), wall0.getHeight(), 0.01F);
      assertEquals((-302.59738F), wall0.getYEnd(), 0.01F);
      assertEquals((-302.59738F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-302.59738F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.59738F), wall0.getYStart(), 0.01F);
      assertEquals((-302.59738F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-302.59738F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1432.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(2864.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(Float.POSITIVE_INFINITY, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2864.0F, wall1.getXStart(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = Float.max(0.0F, (-843.05286F));
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.59738F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.59738F), wall0.getHeight(), 0.01F);
      assertEquals((-302.59738F), wall0.getYEnd(), 0.01F);
      assertEquals((-302.59738F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-302.59738F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.59738F), wall0.getYStart(), 0.01F);
      assertEquals((-302.59738F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-302.59738F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1432.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(2864.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(Float.POSITIVE_INFINITY, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2864.0F, wall1.getXStart(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(1432.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(2864.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(Float.POSITIVE_INFINITY, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2864.0F, wall1.getXStart(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = new Float((-636.0F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-636.0F), (float)float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(74.52672F, 74.52672F, 74.52672F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(74.52672F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(74.52672F, wall0.getLength(), 0.01F);
      assertEquals(37.26336F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float0.equals(object0);
      assertFalse(boolean0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-37.263355F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertEquals(6.085568E17F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(74.52672F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall(4451.117F, 0.0F, 4451.117F, (-2643.08F), (-2643.08F));
      assertNotNull(wall1);
      assertEquals(4451.117F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2643.08F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4451.117F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-2643.08F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2643.08F, wall1.getLength(), 0.01F);
      assertEquals((-1321.54F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2643.08F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-37.263355F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertEquals(6.085568E17F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(74.52672F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4451.117F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2643.08F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4451.117F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-2643.08F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2643.08F, wall1.getLength(), 0.01F);
      assertEquals((-1321.54F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2643.08F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = Float.min(74.52672F, 0.105179824F);
      assertEquals(0.105179824F, float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-37.263355F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertEquals(6.085568E17F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(74.52672F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4451.117F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2643.08F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4451.117F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-2643.08F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2643.08F, wall1.getLength(), 0.01F);
      assertEquals((-1321.54F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2643.08F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall0.intersectsRectangle((-499.841F), 2226.1377F, 98.046F, 74.52672F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-37.263355F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertEquals(6.085568E17F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(74.52672F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-37.263355F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertEquals(6.085568E17F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(74.52672F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4451.117F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2643.08F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4451.117F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-2643.08F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2643.08F, wall1.getLength(), 0.01F);
      assertEquals((-1321.54F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2643.08F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-37.263355F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertEquals(6.085568E17F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(74.52672F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4451.117F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2643.08F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4451.117F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-2643.08F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2643.08F, wall1.getLength(), 0.01F);
      assertEquals((-1321.54F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2643.08F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean2 = wall1.containsWallStartAt((-499.841F), 0.105179824F, (-2149.2024F));
      assertEquals(4451.117F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2643.08F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4451.117F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-2643.08F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2643.08F, wall1.getLength(), 0.01F);
      assertEquals((-1321.54F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2643.08F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-37.263355F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertEquals(6.085568E17F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(74.52672F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      
      Integer integer0 = wall1.getRightSideColor();
      assertNull(integer0);
      assertEquals(4451.117F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2643.08F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4451.117F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-2643.08F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2643.08F, wall1.getLength(), 0.01F);
      assertEquals((-1321.54F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2643.08F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float((-680.0157F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-680.0157F), (float)float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall((-3409.13F), (-3409.13F), (-504.68478F), (-3409.13F), (-3409.13F));
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getYEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(2904.445F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall2.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall2.getXStart(), 0.01F);
      assertEquals(2904.445F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall2.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2904.445F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-504.68478F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-3409.13F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-3409.13F), wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getYEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(2904.445F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getYEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals(6, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(2904.445F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      wall1.setThickness((-504.68478F));
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getYEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals(6, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-504.68478F), wall1.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(2904.445F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      float float0 = wall2.getYStart();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall2.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall2.getXStart(), 0.01F);
      assertEquals(2904.445F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall2.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2904.445F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-504.68478F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-3409.13F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-3409.13F), wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-3409.13F), float0, 0.01F);
      
      Level level0 = new Level("ELEVATION", 14.95F, 1307.3177F, 1428.9043F);
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals(1307.3177F, level0.getFloorThickness(), 0.01F);
      assertEquals("ELEVATION", level0.getName());
      assertEquals(1428.9043F, level0.getHeight(), 0.01F);
      assertEquals(14.95F, level0.getElevation(), 0.01F);
      
      boolean boolean0 = wall1.isAtLevel(level0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getYEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals(6, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-504.68478F), wall1.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(2904.445F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertTrue(level0.isVisible());
      assertEquals(1307.3177F, level0.getFloorThickness(), 0.01F);
      assertEquals("ELEVATION", level0.getName());
      assertEquals(1428.9043F, level0.getHeight(), 0.01F);
      assertEquals(14.95F, level0.getElevation(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(boolean0);
      
      Level level1 = wall1.getLevel();
      assertNull(level1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getYEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals(6, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-504.68478F), wall1.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(2904.445F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      assertNotNull(wall0);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      
      wall0.setYEnd(1.158346F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      
      int int0 = Float.compare(1.158346F, 1.158346F);
      assertEquals(0, int0);
      
      Float float0 = new Float(1.158346F);
      assertNotNull(float0);
      assertEquals(1.158346F, (float)float0, 0.01F);
      
      float float1 = Float.min(0, (-1462.7063F));
      assertEquals((-1462.7063F), float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(1.158346F);
      assertTrue(boolean0);
      
      wall0.setArcExtent(float0);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Wall wall1 = new Wall(0, 0, 1.158346F, 0, 0);
      assertNotNull(wall1);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall1.intersectsRectangle(0.105179824F, 0, 1.158346F, 1.158346F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall1.setYEnd(1.158346F);
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float((-129.57892F));
      assertNotNull(float0);
      assertEquals((-129.57892F), (float)float0, 0.01F);
      
      float float1 = Float.min((-22.304764F), 21.943192F);
      assertEquals((-22.304764F), float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(21.943192F);
      assertTrue(boolean0);
      
      Wall wall0 = new Wall((-2418.4F), 1.0F, (-1.0F), 1.0F, (-1679.5F), (-614.62F));
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2417.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-614.62F), wall0.getHeight(), 0.01F);
      assertEquals((-2418.4F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2417.4F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1679.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1209.7F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2417.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-614.62F), wall0.getHeight(), 0.01F);
      assertEquals(493.34045F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2418.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-129.57892F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1679.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(169116.86F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1209.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Wall wall1 = new Wall((-614.62F), 0.0F, (-1679.5F), (-2605.0054F), (-1679.5F));
      assertNotNull(wall1);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1302.5027F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1679.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1679.5F), wall1.getXEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-614.62F), wall1.getXStart(), 0.01F);
      assertEquals((-1147.06F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2605.0054F), wall1.getYEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2417.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-614.62F), wall0.getHeight(), 0.01F);
      assertEquals(493.34045F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2418.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-129.57892F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1679.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(169116.86F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1209.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1302.5027F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1679.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1679.5F), wall1.getXEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-614.62F), wall1.getXStart(), 0.01F);
      assertEquals((-1147.06F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2605.0054F), wall1.getYEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = Float.min((-1.9178813F), (-2605.0054F));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-2605.0054F), float2, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2417.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-614.62F), wall0.getHeight(), 0.01F);
      assertEquals(493.34045F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2418.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-129.57892F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1679.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(169116.86F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1209.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1302.5027F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1679.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1679.5F), wall1.getXEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-614.62F), wall1.getXStart(), 0.01F);
      assertEquals((-1147.06F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2605.0054F), wall1.getYEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall1.intersectsRectangle(0.0F, 1773.69F, (-1462.7063F), 1773.69F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1302.5027F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1679.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1679.5F), wall1.getXEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-614.62F), wall1.getXStart(), 0.01F);
      assertEquals((-1147.06F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2605.0054F), wall1.getYEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setYEnd(3832.7588F);
      assertEquals(4530.5845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(3832.7588F, wall0.getYEnd(), 0.01F);
      assertEquals((-614.62F), wall0.getHeight(), 0.01F);
      assertEquals((-1990.0962F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2418.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-129.57892F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1679.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2409.2197F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(316951.38F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(4530.5845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(3832.7588F, wall0.getYEnd(), 0.01F);
      assertEquals((-614.62F), wall0.getHeight(), 0.01F);
      assertEquals((-1990.0962F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2418.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-129.57892F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1679.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2409.2197F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(316951.38F, wall0.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1302.5027F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1679.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1679.5F), wall1.getXEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-614.62F), wall1.getXStart(), 0.01F);
      assertEquals((-1147.06F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2605.0054F), wall1.getYEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(916, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(4530.5845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(3832.7588F, wall0.getYEnd(), 0.01F);
      assertEquals((-614.62F), wall0.getHeight(), 0.01F);
      assertEquals((-1990.0962F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2418.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-129.57892F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1679.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2409.2197F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(316951.38F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1302.5027F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1679.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1679.5F), wall1.getXEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-614.62F), wall1.getXStart(), 0.01F);
      assertEquals((-1147.06F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2605.0054F), wall1.getYEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Integer integer0 = new Integer(593);
      assertNotNull(integer0);
      assertEquals(593, (int)integer0);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertNull(homeTexture0);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1302.5027F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1679.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1679.5F), wall1.getXEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-614.62F), wall1.getXStart(), 0.01F);
      assertEquals((-1147.06F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2605.0054F), wall1.getYEnd(), 0.01F);
      assertEquals(2814.2534F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertEquals(4530.5845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(3832.7588F, wall0.getYEnd(), 0.01F);
      assertEquals((-614.62F), wall0.getHeight(), 0.01F);
      assertEquals((-1990.0962F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2418.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-129.57892F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1679.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2409.2197F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(316951.38F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4530.5845F, float3, 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNotNull(wall2);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-614.62F), wall2.getXStart(), 0.01F);
      assertEquals((-2605.0054F), wall2.getYEnd(), 0.01F);
      assertEquals(2814.2534F, wall2.getLength(), 0.01F);
      assertEquals((-1679.5F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2814.2534F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1679.5F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1147.06F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1302.5027F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(4530.5845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(3832.7588F, wall0.getYEnd(), 0.01F);
      assertEquals((-614.62F), wall0.getHeight(), 0.01F);
      assertEquals((-1990.0962F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2418.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-129.57892F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1679.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2409.2197F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(316951.38F, wall0.getLength(), 0.01F);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setYEnd(1.158346F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      int int0 = Float.compare(1.158346F, 1.158346F);
      assertEquals(0, int0);
      
      boolean boolean0 = Float.isFinite(1.158346F);
      assertTrue(boolean0);
      
      Wall wall1 = new Wall(0, 0, 1.158346F, 0, 0);
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall1.intersectsRectangle(0.105179824F, 0, 1.158346F, 1.158346F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall1.setYEnd(1.158346F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean2 = wall1.intersectsRectangle(0, 0.105179824F, 0, 0.0F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      wall0.setYEnd((-1462.7063F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1462.7063F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-730.774F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1463.8646F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1463.8646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = new Wall(1.158346F, 2130.8542F, 2130.8542F, 805.5475F, 805.5475F);
      assertNotNull(wall2);
      assertEquals(1468.2009F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(805.5475F, wall2.getThickness(), 0.01F);
      assertEquals(2130.8542F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1.158346F, wall2.getXStart(), 0.01F);
      assertEquals(1066.0063F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2508.3945F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2508.3945F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(805.5475F, wall2.getYEnd(), 0.01F);
      assertEquals(2130.8542F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall2);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1468.2009F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(805.5475F, wall2.getThickness(), 0.01F);
      assertEquals(2130.8542F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1.158346F, wall2.getXStart(), 0.01F);
      assertEquals(1066.0063F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2508.3945F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2508.3945F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(805.5475F, wall2.getYEnd(), 0.01F);
      assertEquals(2130.8542F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall2);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1462.7063F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-730.774F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1463.8646F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1463.8646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1468.2009F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(805.5475F, wall2.getThickness(), 0.01F);
      assertEquals(2130.8542F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1.158346F, wall2.getXStart(), 0.01F);
      assertEquals(1066.0063F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2508.3945F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2508.3945F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(805.5475F, wall2.getYEnd(), 0.01F);
      assertEquals(2130.8542F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1462.7063F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-730.774F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1463.8646F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1463.8646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall1.getThickness(), 0.01F);
      assertEquals(93.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(93.0F, wall1.getYEnd(), 0.01F);
      assertEquals(93.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(93.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(2419.4836F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall1.getThickness(), 0.01F);
      assertEquals(2419.4836F, wall1.getYEnd(), 0.01F);
      assertEquals(93.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1256.2418F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2326.4836F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(93.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2326.4836F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(93.0F, (float)float0, 0.01F);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall1.getThickness(), 0.01F);
      assertEquals(2419.4836F, wall1.getYEnd(), 0.01F);
      assertEquals(93.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1256.2418F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2326.4836F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(93.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2326.4836F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, float1, 0.01F);
      
      float float2 = wall0.getLength();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 3279.0F, 1.0F, 1.0F, 2086.8381F);
      assertNotNull(wall0);
      assertEquals(3278.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2086.8381F, wall0.getThickness(), 0.01F);
      assertEquals(1640.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3279.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3278.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertEquals(3278.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2086.8381F, wall0.getThickness(), 0.01F);
      assertEquals(1640.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3279.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3278.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean0);
      
      Float float0 = new Float(985.0F);
      assertNotNull(float0);
      assertEquals(985.0F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(3278.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2086.8381F, wall0.getThickness(), 0.01F);
      assertEquals(1640.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3279.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3278.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(985.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall((-3409.13F), (-3409.13F), (-504.68478F), (-3409.13F), (-3409.13F));
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2904.445F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3409.13F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setYEnd((-3409.13F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall2.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall2.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall2.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2904.445F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-504.68478F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1956.9073F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2904.445F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall2.setYStart((-504.68478F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall2.getXStart(), 0.01F);
      assertEquals(4107.506F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall2.getThickness(), 0.01F);
      assertEquals((-1956.9073F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall2.getYEnd(), 0.01F);
      assertEquals(4107.506F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-504.68478F), wall2.getYStart(), 0.01F);
      assertEquals((-504.68478F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1956.9073F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      int int0 = Float.compare(2602.8977F, (-2531.444F));
      assertEquals(1, int0);
      
      int int1 = Float.compare((-3409.13F), (-2531.444F));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.floatToIntBits(3139.0F);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1162096640, int2);
      
      int int3 = Float.floatToIntBits((-1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1082130432), int3);
      
      Float float0 = new Float(2602.8977F);
      assertNotNull(float0);
      assertEquals(2602.8977F, (float)float0, 0.01F);
      
      wall2.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall2.getXStart(), 0.01F);
      assertEquals(4107.506F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall2.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall2.getYEnd(), 0.01F);
      assertEquals(2602.8977F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-627.42584F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-504.68478F), wall2.getYStart(), 0.01F);
      assertEquals((-504.68478F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(7247536.0F, wall2.getLength(), 0.01F);
      assertEquals((-627.42584F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Wall wall3 = wall1.clone();
      assertNotNull(wall3);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2904.445F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2904.445F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3409.13F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-504.68478F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-3409.13F), wall3.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall3.getThickness(), 0.01F);
      assertEquals(2904.445F, wall3.getLength(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-3409.13F), wall3.getYEnd(), 0.01F);
      assertEquals((-1956.9073F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(2904.445F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      wall1.setYEnd((-504.68478F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals(4107.506F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(4107.506F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getYEnd(), 0.01F);
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1956.9073F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall3.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals(4107.506F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(4107.506F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getYEnd(), 0.01F);
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1956.9073F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-504.68478F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-3409.13F), wall3.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall3.getThickness(), 0.01F);
      assertEquals(2904.445F, wall3.getLength(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-3409.13F), wall3.getYEnd(), 0.01F);
      assertEquals((-1956.9073F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(2904.445F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      wall3.setYEnd((-11.079956F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals(4107.506F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(4107.506F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getYEnd(), 0.01F);
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1956.9073F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(4470.184F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-504.68478F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals((-11.079956F), wall3.getYEnd(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-3409.13F), wall3.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(4470.184F, wall3.getLength(), 0.01F);
      assertEquals((-1956.9073F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-1710.105F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      Float float1 = wall1.getHeight();
      assertNull(float1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals(4107.506F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(4107.506F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getYEnd(), 0.01F);
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1956.9073F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = wall3.getXArcCircleCenter();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals(4107.506F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(4107.506F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getYEnd(), 0.01F);
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1956.9073F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(4470.184F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-504.68478F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals((-11.079956F), wall3.getYEnd(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-3409.13F), wall3.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(4470.184F, wall3.getLength(), 0.01F);
      assertEquals((-1956.9073F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-1710.105F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals((-1956.9073F), float2, 0.01F);
      
      Level level0 = wall2.getLevel();
      assertNull(level0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall2.getXStart(), 0.01F);
      assertEquals(4107.506F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall2.getThickness(), 0.01F);
      assertEquals((-3409.13F), wall2.getYEnd(), 0.01F);
      assertEquals(2602.8977F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-627.42584F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-504.68478F), wall2.getYStart(), 0.01F);
      assertEquals((-504.68478F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(7247536.0F, wall2.getLength(), 0.01F);
      assertEquals((-627.42584F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      boolean boolean0 = wall3.isAtLevel((Level) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-504.68478F), wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3409.13F), wall0.getYStart(), 0.01F);
      assertEquals(2904.445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1956.9073F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2904.445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall0.getXStart(), 0.01F);
      assertEquals((-3409.13F), wall1.getYStart(), 0.01F);
      assertEquals(4107.506F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.13F), wall1.getXStart(), 0.01F);
      assertEquals(4107.506F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-504.68478F), wall1.getXEnd(), 0.01F);
      assertEquals((-504.68478F), wall1.getYEnd(), 0.01F);
      assertEquals((-1956.9073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3409.13F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1956.9073F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(4470.184F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-504.68478F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals((-11.079956F), wall3.getYEnd(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-3409.13F), wall3.getYStart(), 0.01F);
      assertEquals((-3409.13F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(4470.184F, wall3.getLength(), 0.01F);
      assertEquals((-1956.9073F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-1710.105F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      assertNotNull(wall0);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      int int0 = Float.compare(1.158346F, 1.158346F);
      assertEquals(0, int0);
      
      Float float0 = new Float(1.158346F);
      assertNotNull(float0);
      assertEquals(1.158346F, (float)float0, 0.01F);
      
      float float1 = Float.max(1.158346F, 0.0F);
      assertEquals(1.158346F, float1, 0.01F);
      
      Float float2 = new Float((float) 0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      
      wall0.move(1.158346F, 571.173F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(572.3313F, wall0.getYEnd(), 0.01F);
      assertEquals(2.316692F, wall0.getXEnd(), 0.01F);
      assertEquals(572.3313F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.316692F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.316692F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(572.3313F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(572.3313F, wall0.getYEnd(), 0.01F);
      assertEquals(2.316692F, wall0.getXEnd(), 0.01F);
      assertEquals(572.3313F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.316692F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getHeight(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.316692F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(572.3313F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = wall0.getLeftSideColor();
      assertNotNull(integer1);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(572.3313F, wall0.getYEnd(), 0.01F);
      assertEquals(2.316692F, wall0.getXEnd(), 0.01F);
      assertEquals(572.3313F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.316692F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getHeight(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.316692F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(572.3313F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      
      Level level0 = new Level("", (-1.0F), (-1.0F), 0.0F);
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      
      float float3 = level1.getElevation();
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-1.0F), float3, 0.01F);
      
      float float4 = level0.getHeight();
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(572.3313F, wall0.getYEnd(), 0.01F);
      assertEquals(2.316692F, wall0.getXEnd(), 0.01F);
      assertEquals(572.3313F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.316692F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getHeight(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.316692F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(572.3313F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall((-22.304764F), (-22.304764F), (-22.304764F), 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-22.304764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.152382F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(22.304764F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-22.304764F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-22.304764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-22.304764F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(22.304764F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-22.304764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.152382F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(22.304764F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-22.304764F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-22.304764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-22.304764F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(22.304764F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-711.21906F), (-711.21906F), 1016.5F);
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-711.21906F), wall0.getXEnd(), 0.01F);
      assertEquals((-711.21906F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-356.10953F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1004.4014F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals((-356.10953F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1016.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1004.4014F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      float float0 = wall0.getXEnd();
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-711.21906F), wall0.getXEnd(), 0.01F);
      assertEquals((-711.21906F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-356.10953F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1004.4014F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals((-356.10953F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1016.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1004.4014F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-711.21906F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float float0 = wall0.getXArcCircleCenter();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = Integer.min(0, 0);
      assertEquals(0, int0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      wall0.setRightSideColor(integer0);
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(integer0.equals((Object)int0));
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setXStart(0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      
      float float1 = wall0.getYArcCircleCenter();
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      float float2 = wall0.getYArcCircleCenter();
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      int int1 = (-4749);
      try { 
        Integer.parseUnsignedInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 846.2F, 846.2F, 846.2F, 2.0F, 2.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-1633.0F), (-2533.0F), 846.2F, (-2533.0F), (-1633.0F), (-2533.0F));
      assertNotNull(wall1);
      assertEquals(2479.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals((-1633.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1633.0F), wall1.getThickness(), 0.01F);
      assertEquals((-2533.0F), wall1.getHeight(), 0.01F);
      assertEquals((-2533.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2533.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-393.4F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2479.2F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2533.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setXEnd((-2533.0F));
      assertEquals((-2533.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1633.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1633.0F), wall1.getThickness(), 0.01F);
      assertEquals((-2533.0F), wall1.getHeight(), 0.01F);
      assertEquals((-2533.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2533.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(900.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(900.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2533.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2083.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((double) (-2533.0F));
      assertNotNull(float0);
      assertEquals((-2533.0F), (float)float0, 0.01F);
      
      float float1 = Float.min(3156.4673F, 0.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      int int0 = Float.compare(12.781F, 12.781F);
      assertEquals(0, int0);
      
      boolean boolean0 = ((Float)12.781F).equals((Object) null);
      assertFalse(boolean0);
      
      Float float2 = new Float(419.2697977077);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(419.2698F, (float)float2, 0.01F);
      
      wall1.setHeightAtEnd(float2);
      assertEquals((-2533.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1633.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1633.0F), wall1.getThickness(), 0.01F);
      assertEquals((-2533.0F), wall1.getHeight(), 0.01F);
      assertEquals((-2533.0F), wall1.getYEnd(), 0.01F);
      assertEquals(419.2698F, wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-2533.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(900.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(900.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2533.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2083.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertNull(integer0);
      assertEquals((-2533.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1633.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1633.0F), wall1.getThickness(), 0.01F);
      assertEquals((-2533.0F), wall1.getHeight(), 0.01F);
      assertEquals((-2533.0F), wall1.getYEnd(), 0.01F);
      assertEquals(419.2698F, wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-2533.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(900.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(900.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2533.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2083.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setHeightAtEnd(float2);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(419.2698F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(419.2698F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.compare(1752.475F, 0.0F);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      
      Float float0 = new Float(1220.77F);
      assertNotNull(float0);
      assertEquals(1220.77F, (float)float0, 0.01F);
      
      float float1 = Float.min(93.0F, 0);
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1220.77F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      boolean boolean0 = wall0.containsPoint(1220.77F, 1995.011F, 1995.011F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1220.77F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertTrue(boolean0);
      
      wall0.setLeftSideShininess(0.1F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1220.77F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1220.77F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setPattern((TextureImage) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1220.77F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1220.77F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 2.0F, (-1255.424F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      wall1.setArcExtent((Float) 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1255.424F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(2.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setYEnd(2.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.63312395E16F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall2.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.63312395E16F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1255.424F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(2.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setYStart((-4.1044407F));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.1044407F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals((-4.984654E16F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-4.1044407F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(6.1044407F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0522203F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      int int1 = Float.compare((-1.0F), 1423.406F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.compare((-4.1044407F), 818.5F);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      Float float0 = new Float((-504.141F));
      assertNotNull(float0);
      assertEquals((-504.141F), (float)float0, 0.01F);
      
      wall2.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.1044407F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals((-4.984654E16F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-4.1044407F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(6.1044407F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0522203F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1255.424F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(2.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float1 = wall0.getThickness();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2.0F, float1, 0.01F);
      
      wall1.setRightSideShininess(667.484F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.1044407F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals((-4.984654E16F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-4.1044407F), wall1.getYStart(), 0.01F);
      assertEquals(667.484F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(6.1044407F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0522203F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtEnd(wall2);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.1044407F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals((-4.984654E16F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-4.1044407F), wall1.getYStart(), 0.01F);
      assertEquals(667.484F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(6.1044407F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0522203F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1255.424F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(2.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 1752.475F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertEquals(1752.475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(876.2375F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1752.475F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1752.475F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.setThickness(1789.1566F);
      assertNull(wall0.getArcExtent());
      assertEquals(1752.475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(876.2375F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1752.475F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1789.1566F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1752.475F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.setThickness((-1.0F));
      assertNull(wall0.getArcExtent());
      assertEquals(1752.475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(876.2375F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1752.475F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1752.475F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.setHeight((Float) null);
      assertNull(wall0.getArcExtent());
      assertEquals(1752.475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(876.2375F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1752.475F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1752.475F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertNull(wall0.getArcExtent());
      assertEquals(1752.475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(876.2375F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1752.475F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1752.475F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float1 = Float.max((-1617.5612F), 0.1F);
      assertEquals(0.1F, float1, 0.01F);
      
      Wall wall1 = new Wall(1752.475F, 0.1F, 0.0F, (-2492.9F), 0.1F, 431.489F);
      assertNotNull(wall1);
      assertEquals((-2492.9F), wall1.getYEnd(), 0.01F);
      assertEquals(1752.475F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(3047.3296F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1246.3999F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3047.3296F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(431.489F, wall1.getHeight(), 0.01F);
      assertEquals(876.2375F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getArcExtent());
      assertEquals(1752.475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(876.2375F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1752.475F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1752.475F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2492.9F), wall1.getYEnd(), 0.01F);
      assertEquals(1752.475F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(3047.3296F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1246.3999F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3047.3296F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(431.489F, wall1.getHeight(), 0.01F);
      assertEquals(876.2375F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float((-1.0F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNotNull(wall2);
      assertNull(wall0.getArcExtent());
      assertEquals(1752.475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(876.2375F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1752.475F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1752.475F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(1752.475F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3047.3296F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1246.3999F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2492.9F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3047.3296F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(876.2375F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(431.489F, wall2.getHeight(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float3 = wall0.getArcExtent();
      assertNull(float3);
      assertNull(wall0.getArcExtent());
      assertEquals(1752.475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(876.2375F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1752.475F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1752.475F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      wall2.setHeightAtEnd((Float) null);
      assertNull(wall0.getArcExtent());
      assertEquals(1752.475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(876.2375F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1752.475F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1752.475F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(1752.475F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3047.3296F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1246.3999F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2492.9F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3047.3296F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(876.2375F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(431.489F, wall2.getHeight(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(790.01025F, 0.0F, 1.0F, 790.01025F, 0.0F, 790.01025F);
      assertNotNull(wall0);
      assertEquals(1116.5364F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(395.50513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1116.5364F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(1116.5364F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(395.50513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1116.5364F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1116.5364F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(395.50513F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1116.5364F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setThickness(0.0F);
      assertEquals(1116.5364F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(395.50513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1116.5364F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setThickness(0.0F);
      assertEquals(1116.5364F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(395.50513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1116.5364F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1116.5364F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(395.50513F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1116.5364F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(1116.5364F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(395.50513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1116.5364F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1116.5364F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(395.50513F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1116.5364F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = Float.max(0.0F, (-3681.2612F));
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertEquals(1116.5364F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(395.50513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1116.5364F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1116.5364F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(395.50513F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1116.5364F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setHeight(float0);
      assertEquals(1116.5364F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(395.50513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1116.5364F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float0, (float)float1, 0.01F);
      
      float float2 = wall1.getXStart();
      assertEquals(1116.5364F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(395.50513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1116.5364F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1116.5364F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(395.50513F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1116.5364F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(790.01025F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getYStart();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, float0, 0.01F);
      
      Float float1 = new Float(0.1F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      
      float float2 = Float.min(93.0F, 1752.475F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(93.0F, float2, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = wall0.containsPoint(0.0F, 0.0F, 1752.475F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(boolean0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      int int1 = new Integer(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideShininess((-3409.13F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getLeftSideShininess(), 0.01F);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-3409.13F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3409.13F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      
      wall0.setYEnd(1.158346F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      
      int int0 = Float.compare(1.158346F, 1.158346F);
      assertEquals(0, int0);
      
      Float float0 = new Float(1.158346F);
      assertNotNull(float0);
      assertEquals(1.158346F, (float)float0, 0.01F);
      
      float float1 = Float.min(0, (-1462.7063F));
      assertEquals((-1462.7063F), float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(1.158346F);
      assertTrue(boolean0);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Wall wall1 = new Wall(0, 0, 1.158346F, 0, 0);
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = Float.min(1.158346F, 0.105179824F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.105179824F, float2, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall1.intersectsRectangle(0.105179824F, 0.105179824F, 1.158346F, 1.158346F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setYEnd((-2326.6711F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2326.6711F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1162.7563F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2463.251F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1780.8795F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(2327.8296F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2326.6711F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1162.7563F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2463.251F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1780.8795F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(2327.8296F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2326.6711F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1162.7563F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2463.251F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1780.8795F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(2327.8296F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      wall1.setLeftSideColor(integer0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1), (int)wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1), (int)wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall1, wall0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1.158346F, wall2.getLength(), 0.01F);
      assertEquals(1.158346F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-1), (int)wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.579173F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1), (int)wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = wall2.getLength();
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1.158346F, wall2.getLength(), 0.01F);
      assertEquals(1.158346F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-1), (int)wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.579173F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1), (int)wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1.158346F, float3, 0.01F);
      
      Wall wall3 = wall1.clone();
      assertNotNull(wall3);
      assertEquals(0.579173F, wall3.getXArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1.158346F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-1), (int)wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(1.158346F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1), (int)wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      HomeTexture homeTexture0 = wall3.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.579173F, wall3.getXArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1.158346F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-1), (int)wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(1.158346F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1), (int)wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      
      wall2.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1.158346F, wall2.getLength(), 0.01F);
      assertEquals(1.158346F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-1), (int)wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.579173F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1), (int)wall1.getLeftSideColor());
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      assertNotNull(wall0);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      int int0 = Float.compare(1.158346F, 1.158346F);
      assertEquals(0, int0);
      
      Float float0 = new Float(1.158346F);
      assertNotNull(float0);
      assertEquals(1.158346F, (float)float0, 0.01F);
      
      float float1 = Float.min(0, (-1463.1013F));
      assertEquals((-1463.1013F), float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(1.158346F);
      assertTrue(boolean0);
      
      Float float2 = new Float((float) 0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      
      Wall wall1 = new Wall(4451.117F, 1.158346F, 1.158346F, 0, 4451.117F);
      assertNotNull(wall1);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = Float.min(4451.117F, 0.105179824F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(0.105179824F, float3, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall1.intersectsRectangle(0.105179824F, 0.105179824F, 1.158346F, 1.158346F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean2 = wall1.containsWallStartAt((-1.0F), (-1.0F), 1.0F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(list0.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      
      Integer integer0 = wall1.getRightSideColor();
      assertNull(integer0);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.01F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(0.01F, 0.0F, 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      int int0 = Float.floatToIntBits((-731.65F));
      assertEquals((-1003034214), int0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals(0.0F, float1, 0.01F);
      
      Wall wall1 = new Wall((-1590.997F), 0.0F, 0.01F, 0.0F, (-2011.0F));
      assertNotNull(wall1);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals((-1590.997F), wall1.getXStart(), 0.01F);
      assertEquals(1591.007F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-795.49347F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1591.007F, wall1.getLength(), 0.01F);
      assertEquals((-2011.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setXEnd((-1003034214));
      assertEquals((-1.00303424E9F), wall0.getXEnd(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.00303424E9F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-5.0151712E8F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.00303424E9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setRightSideShininess(0.0F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals((-1590.997F), wall1.getXStart(), 0.01F);
      assertEquals(1591.007F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-795.49347F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1591.007F, wall1.getLength(), 0.01F);
      assertEquals((-2011.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNull(wall2);
      assertEquals((-1.00303424E9F), wall0.getXEnd(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.00303424E9F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-5.0151712E8F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.00303424E9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall((-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F));
      assertNotNull(wall0);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-301.76428F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      
      Float float0 = new Float((-301.76428F));
      assertNotNull(float0);
      assertEquals((-301.76428F), (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-301.76428F), wall0.getHeight(), 0.01F);
      assertEquals((-301.76428F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-301.76428F), wall0.getHeight(), 0.01F);
      assertEquals((-301.76428F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2678.2F), (-2678.2F), 0.0F, (-2678.2F), 0.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2678.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2678.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1339.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      
      float float0 = wall0.getYStart();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2678.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2678.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1339.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2678.2F), float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2678.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2678.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1339.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      
      Float float1 = wall0.getHeightAtEnd();
      assertNull(float1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-2678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2678.2F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2678.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1339.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall(93.0F, 93.0F, 93.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("Invalid URL base for JAR entry", "Invalid URL base for JAR entry", uRLContent0, 438.0763F, (-3901.7F), "Invalid URL base for JAR entry");
      assertNotNull(catalogTexture0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getId());
      assertEquals((-3901.7F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getName());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getCreator());
      assertEquals(438.0763F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      
      String string0 = catalogTexture0.getName();
      assertNotNull(string0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getId());
      assertEquals((-3901.7F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getName());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getCreator());
      assertEquals(438.0763F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("Invalid URL base for JAR entry", string0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getId());
      assertEquals((-3901.7F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getName());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getCreator());
      assertEquals(438.0763F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("Invalid URL base for JAR entry", homeTexture0.getName());
      assertEquals((-3901.7F), homeTexture0.getHeight(), 0.01F);
      assertEquals(438.0763F, homeTexture0.getWidth(), 0.01F);
      
      wall0.setRightSideTexture(homeTexture0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getId());
      assertEquals((-3901.7F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getName());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getCreator());
      assertEquals(438.0763F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("Invalid URL base for JAR entry", homeTexture0.getName());
      assertEquals((-3901.7F), homeTexture0.getHeight(), 0.01F);
      assertEquals(438.0763F, homeTexture0.getWidth(), 0.01F);
      
      int int0 = Float.compare((-1145.5768F), 0.0F);
      assertEquals((-1), int0);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertNotNull(homeTexture1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(438.0763F, homeTexture1.getWidth(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals((-3901.7F), homeTexture1.getHeight(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeTexture1.getName());
      assertSame(homeTexture1, homeTexture0);
      
      HomeTexture homeTexture2 = wall0.getRightSideTexture();
      assertNotNull(homeTexture2);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeTexture2.getName());
      assertEquals((-3901.7F), homeTexture2.getHeight(), 0.01F);
      assertEquals(438.0763F, homeTexture2.getWidth(), 0.01F);
      assertTrue(homeTexture2.isLeftToRightOriented());
      assertSame(homeTexture2, homeTexture0);
      assertSame(homeTexture2, homeTexture1);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1), (int)wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertTrue(integer0.equals((Object)int0));
      
      wall0.move((-1145.5768F), 93.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(139.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(186.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1), (int)wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1052.5768F), wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1052.5768F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1052.5768F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(1469.639F, 1469.639F, 3717.68F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(139.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(186.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1), (int)wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1052.5768F), wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1052.5768F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1052.5768F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertTrue(boolean0);
      
      Wall wall1 = new Wall((-493.91547F), 2539.837F, 93.0F, (-2765.0F), (-493.91547F));
      assertNotNull(wall1);
      assertEquals((-200.45773F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-112.58154F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5337.2056F, wall1.getLength(), 0.01F);
      assertEquals((-2765.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-493.91547F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-493.91547F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2539.837F, wall1.getYStart(), 0.01F);
      assertEquals(5337.2056F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideShininess((-3819.93F));
      assertEquals((-200.45773F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-112.58154F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5337.2056F, wall1.getLength(), 0.01F);
      assertEquals((-3819.93F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2765.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-493.91547F), wall1.getThickness(), 0.01F);
      assertEquals((-493.91547F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2539.837F, wall1.getYStart(), 0.01F);
      assertEquals(5337.2056F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(139.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(186.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1), (int)wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1052.5768F), wall0.getXEnd(), 0.01F);
      assertEquals(93.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1052.5768F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1052.5768F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1);
      
      Float float0 = new Float((double) (-1145.5768F));
      assertNotNull(float0);
      assertEquals((-1145.5768F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float0 = wall0.getYStart();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Level level0 = new Level("/ifu*;^MY=Kn.?$R", 0.0F, (-387.0F), 0.0F);
      assertNotNull(level0);
      assertEquals("/ifu*;^MY=Kn.?$R", level0.getName());
      assertEquals((-387.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall((-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F));
      assertNotNull(wall0);
      assertEquals((-302.254F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.254F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.254F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-302.254F), wall0.getYStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = new Float((float) (-958));
      assertNotNull(float0);
      assertEquals((-958.0F), (float)float0, 0.01F);
      
      wall0.setYStart((-302.254F));
      assertEquals((-302.254F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.254F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.254F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-302.254F), wall0.getYStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals((-302.254F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.254F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.254F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-302.254F), wall0.getYStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals((-302.254F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.254F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.254F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-302.254F), wall0.getYStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall(93.0F, 93.0F, 93.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(93.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.compare(1752.475F, 0.0F);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = Float.compare(0.0F, 3337.9766F);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      Float float0 = new Float(687.6157F);
      assertNotNull(float0);
      assertEquals(687.6157F, (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals(687.6157F, float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(102.258354F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(32601.74F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(102.258354F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(32601.74F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(93.0F, wall1.getXStart(), 0.01F);
      assertEquals(93.0F, wall1.getYStart(), 0.01F);
      assertEquals(32601.74F, wall1.getLength(), 0.01F);
      assertEquals(93.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(93.0F, wall1.getXEnd(), 0.01F);
      assertEquals(102.258354F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall1.getArcExtent(), 0.01F);
      assertEquals(46.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(1.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(102.258354F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(32601.74F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(93.0F, wall1.getXStart(), 0.01F);
      assertEquals(93.0F, wall1.getYStart(), 0.01F);
      assertEquals(92.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(93.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall1.getArcExtent(), 0.01F);
      assertEquals(102.1588F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(47.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(32251.182F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(102.258354F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(32601.74F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(93.0F, wall1.getXStart(), 0.01F);
      assertEquals(93.0F, wall1.getYStart(), 0.01F);
      assertEquals(92.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(93.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall1.getArcExtent(), 0.01F);
      assertEquals(102.1588F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(47.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(32251.182F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = wall0.getHeight();
      assertNull(float2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(102.258354F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(32601.74F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float3 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(102.258354F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(32601.74F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(102.258354F, float3, 0.01F);
      
      float float4 = wall1.getLength();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(46.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getXEnd(), 0.01F);
      assertEquals(102.258354F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall0.getArcExtent(), 0.01F);
      assertEquals(93.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(32601.74F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(93.0F, wall1.getXStart(), 0.01F);
      assertEquals(93.0F, wall1.getYStart(), 0.01F);
      assertEquals(92.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(93.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(687.6157F, wall1.getArcExtent(), 0.01F);
      assertEquals(102.1588F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(47.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(32251.182F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(32251.182F, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.compare(1752.475F, 0.0F);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideShininess((-3409.13F));
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3409.13F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3409.13F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3409.13F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setRightSideShininess(93.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall((-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F));
      assertNotNull(wall0);
      assertEquals((-302.59738F), wall0.getThickness(), 0.01F);
      assertEquals((-302.59738F), wall0.getYStart(), 0.01F);
      assertEquals((-302.59738F), wall0.getXEnd(), 0.01F);
      assertEquals((-302.59738F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-302.59738F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.59738F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-302.59738F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.59738F), wall0.getXStart(), 0.01F);
      
      Float float0 = new Float((-302.59738F));
      assertNotNull(float0);
      assertEquals((-302.59738F), (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-302.59738F), wall0.getThickness(), 0.01F);
      assertEquals((-302.59738F), wall0.getYStart(), 0.01F);
      assertEquals((-302.59738F), wall0.getXEnd(), 0.01F);
      assertEquals((-302.59738F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-302.59738F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.59738F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-302.59738F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-302.59738F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-302.59738F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Wall> list1 = Wall.clone(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      Wall wall0 = new Wall(0.01F, 0.01F, (-3690.7F), 1278.6283F, 1278.6283F);
      assertNotNull(wall0);
      assertNull(wall0.getHeight());
      assertEquals(3905.9192F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(639.31915F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1278.6283F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1845.345F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3690.7F), wall0.getXEnd(), 0.01F);
      assertEquals(3905.9192F, wall0.getLength(), 0.01F);
      assertEquals(1278.6283F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertNull(wall0.getHeight());
      assertEquals(3905.9192F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(639.31915F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1278.6283F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1845.345F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3690.7F), wall0.getXEnd(), 0.01F);
      assertEquals(3905.9192F, wall0.getLength(), 0.01F);
      assertEquals(1278.6283F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      
      Wall wall1 = new Wall(1278.6283F, (-935.0F), (-1624.926F), (-1624.926F), (-2049.8835F), 2198.0F);
      assertNotNull(wall1);
      assertEquals((-2049.8835F), wall1.getThickness(), 0.01F);
      assertEquals(2984.397F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2198.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-935.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1624.926F), wall1.getYEnd(), 0.01F);
      assertEquals((-1279.963F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1624.926F), wall1.getXEnd(), 0.01F);
      assertEquals(1278.6283F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2984.397F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-173.14886F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertEquals((-2049.8835F), wall1.getThickness(), 0.01F);
      assertEquals(2984.397F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2198.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-935.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1624.926F), wall1.getYEnd(), 0.01F);
      assertEquals((-1279.963F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1624.926F), wall1.getXEnd(), 0.01F);
      assertEquals(1278.6283F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2984.397F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-173.14886F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2198.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1624.926F), wall2.getYEnd(), 0.01F);
      assertEquals((-1624.926F), wall2.getXEnd(), 0.01F);
      assertEquals(2984.397F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1278.6283F, wall2.getXStart(), 0.01F);
      assertEquals((-935.0F), wall2.getYStart(), 0.01F);
      assertEquals(2984.397F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-173.14886F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1279.963F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2049.8835F), wall2.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall1.setRightSideShininess((-935.0F));
      assertEquals((-2049.8835F), wall1.getThickness(), 0.01F);
      assertEquals(2984.397F, wall1.getLength(), 0.01F);
      assertEquals(2198.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-935.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1624.926F), wall1.getYEnd(), 0.01F);
      assertEquals((-1279.963F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1624.926F), wall1.getXEnd(), 0.01F);
      assertEquals(1278.6283F, wall1.getXStart(), 0.01F);
      assertEquals((-935.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2984.397F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-173.14886F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      wall1.setWallAtStart(wall2);
      assertEquals((-2049.8835F), wall1.getThickness(), 0.01F);
      assertEquals(2984.397F, wall1.getLength(), 0.01F);
      assertEquals(2198.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-935.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1624.926F), wall1.getYEnd(), 0.01F);
      assertEquals((-1279.963F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1624.926F), wall1.getXEnd(), 0.01F);
      assertEquals(1278.6283F, wall1.getXStart(), 0.01F);
      assertEquals((-935.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2984.397F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-173.14886F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2198.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1624.926F), wall2.getYEnd(), 0.01F);
      assertEquals((-1624.926F), wall2.getXEnd(), 0.01F);
      assertEquals(2984.397F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1278.6283F, wall2.getXStart(), 0.01F);
      assertEquals((-935.0F), wall2.getYStart(), 0.01F);
      assertEquals(2984.397F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-173.14886F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1279.963F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2049.8835F), wall2.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Float float0 = wall2.getArcExtent();
      assertNull(float0);
      assertEquals((-2049.8835F), wall1.getThickness(), 0.01F);
      assertEquals(2984.397F, wall1.getLength(), 0.01F);
      assertEquals(2198.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-935.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1624.926F), wall1.getYEnd(), 0.01F);
      assertEquals((-1279.963F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1624.926F), wall1.getXEnd(), 0.01F);
      assertEquals(1278.6283F, wall1.getXStart(), 0.01F);
      assertEquals((-935.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2984.397F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-173.14886F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2198.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1624.926F), wall2.getYEnd(), 0.01F);
      assertEquals((-1624.926F), wall2.getXEnd(), 0.01F);
      assertEquals(2984.397F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1278.6283F, wall2.getXStart(), 0.01F);
      assertEquals((-935.0F), wall2.getYStart(), 0.01F);
      assertEquals(2984.397F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-173.14886F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1279.963F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2049.8835F), wall2.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Level level0 = wall1.getLevel();
      assertNull(level0);
      assertEquals((-2049.8835F), wall1.getThickness(), 0.01F);
      assertEquals(2984.397F, wall1.getLength(), 0.01F);
      assertEquals(2198.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-935.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1624.926F), wall1.getYEnd(), 0.01F);
      assertEquals((-1279.963F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1624.926F), wall1.getXEnd(), 0.01F);
      assertEquals(1278.6283F, wall1.getXStart(), 0.01F);
      assertEquals((-935.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2984.397F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-173.14886F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      float float1 = wall1.getRightSideShininess();
      assertEquals((-2049.8835F), wall1.getThickness(), 0.01F);
      assertEquals(2984.397F, wall1.getLength(), 0.01F);
      assertEquals(2198.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-935.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1624.926F), wall1.getYEnd(), 0.01F);
      assertEquals((-1279.963F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1624.926F), wall1.getXEnd(), 0.01F);
      assertEquals(1278.6283F, wall1.getXStart(), 0.01F);
      assertEquals((-935.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2984.397F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-173.14886F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-935.0F), float1, 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("\"1v;1/~I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.\"1v;1/~I
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall((-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F));
      assertNotNull(wall0);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      
      Integer integer0 = Integer.valueOf(6128);
      assertNotNull(integer0);
      assertEquals(6128, (int)integer0);
      
      Wall wall1 = new Wall((-301.76428F), 6128, 6128, (-301.76428F), (-301.76428F));
      assertNotNull(wall1);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(6128.0F, wall1.getXEnd(), 0.01F);
      assertEquals(6128.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall1.getThickness(), 0.01F);
      assertEquals(9093.06F, wall1.getLength(), 0.01F);
      assertEquals(2913.118F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-301.76428F), wall1.getXStart(), 0.01F);
      assertEquals(2913.118F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(9093.06F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(6128.0F, wall1.getXEnd(), 0.01F);
      assertEquals(6128.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall1.getThickness(), 0.01F);
      assertEquals(9093.06F, wall1.getLength(), 0.01F);
      assertEquals(2913.118F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-301.76428F), wall1.getXStart(), 0.01F);
      assertEquals(2913.118F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(9093.06F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = Float.min(0.0F, (-301.76428F));
      assertEquals((-301.76428F), float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(6128.0F, wall1.getXEnd(), 0.01F);
      assertEquals(6128.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall1.getThickness(), 0.01F);
      assertEquals(9093.06F, wall1.getLength(), 0.01F);
      assertEquals(2913.118F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-301.76428F), wall1.getXStart(), 0.01F);
      assertEquals(2913.118F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(9093.06F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.intersectsRectangle(199.331F, 0.01F, (-1.0F), (-301.76428F));
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      
      wall1.setYEnd((-1.0F));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(6128.0F, wall1.getXEnd(), 0.01F);
      assertEquals(8882.934F, wall1.getLength(), 0.01F);
      assertEquals(6128.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall1.getThickness(), 0.01F);
      assertEquals(2913.118F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8882.934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3063.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-301.76428F), wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(6128.0F, wall1.getXEnd(), 0.01F);
      assertEquals(8882.934F, wall1.getLength(), 0.01F);
      assertEquals(6128.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall1.getThickness(), 0.01F);
      assertEquals(2913.118F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8882.934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3063.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-301.76428F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(6128.0F, wall1.getXEnd(), 0.01F);
      assertEquals(8882.934F, wall1.getLength(), 0.01F);
      assertEquals(6128.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall1.getThickness(), 0.01F);
      assertEquals(2913.118F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8882.934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3063.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-301.76428F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(6128.0F, wall1.getXEnd(), 0.01F);
      assertEquals(8882.934F, wall1.getLength(), 0.01F);
      assertEquals(6128.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall1.getThickness(), 0.01F);
      assertEquals(2913.118F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8882.934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3063.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-301.76428F), wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float float1 = wall0.getLength();
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Bt", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("Bt", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals("Bt", propertyChangeListenerProxy0.getPropertyName());
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall((-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F), (-302.254F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.254F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-302.254F), wall0.getThickness(), 0.01F);
      assertEquals((-302.254F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getYStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.254F), wall0.getXEnd(), 0.01F);
      assertEquals((-302.254F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getHeight(), 0.01F);
      
      Integer integer0 = Integer.valueOf((-971));
      assertNotNull(integer0);
      assertEquals((-971), (int)integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.254F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-302.254F), wall0.getThickness(), 0.01F);
      assertEquals((-302.254F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getYStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-971), (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.254F), wall0.getXEnd(), 0.01F);
      assertEquals((-302.254F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getHeight(), 0.01F);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.254F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-302.254F), wall0.getThickness(), 0.01F);
      assertEquals((-302.254F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getYStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-971), (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.254F), wall0.getXEnd(), 0.01F);
      assertEquals((-302.254F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getHeight(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-302.254F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-302.254F), wall0.getThickness(), 0.01F);
      assertEquals((-302.254F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getYStart(), 0.01F);
      assertEquals((-302.254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-971), (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-302.254F), wall0.getXEnd(), 0.01F);
      assertEquals((-302.254F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-302.254F), wall0.getHeight(), 0.01F);
      assertEquals((-302.254F), (float)float0, 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      
      wall0.setYEnd(1.158346F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      
      int int0 = Float.compare(1.158346F, 1.158346F);
      assertEquals(0, int0);
      
      boolean boolean0 = Float.isFinite(0);
      assertTrue(boolean0);
      
      Wall wall1 = new Wall(0, 0, 1.158346F, 0, 0);
      assertNotNull(wall1);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall1.intersectsRectangle(0.105179824F, 0, 1.158346F, 1.158346F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.158346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall1.setYEnd(1.158346F);
      assertEquals(1.6381487F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.579173F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(1.6381487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(0.105179824F);
      assertNotNull(float0);
      assertEquals(0.105179824F, (float)float0, 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = 0.0F;
      Wall wall0 = new Wall((-1807.8528F), 1.0F, 0.0F, (-1807.8528F), (-2325.2166F), 0.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-903.9264F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-903.4264F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2557.3972F, wall0.getLength(), 0.01F);
      assertEquals((-1807.8528F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2557.3972F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2325.2166F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1807.8528F), wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-903.9264F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-903.4264F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2557.3972F, wall0.getLength(), 0.01F);
      assertEquals((-1807.8528F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2557.3972F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2325.2166F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1807.8528F), wall0.getXStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean0 = linkedList0.add((Wall) null);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall(790.01025F, 0.0F, 21.063618F, 790.01025F, 0.0F, 790.01025F);
      assertNotNull(wall0);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertEquals(405.53693F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1102.4496F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(21.063618F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1102.4496F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall1.getRightSideColor();
      assertNull(integer0);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertEquals(405.53693F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1102.4496F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(21.063618F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1102.4496F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      int int0 = Float.floatToIntBits((-840.9477F));
      assertEquals((-1001243481), int0);
      
      int int1 = Float.floatToIntBits(11.0F);
      assertFalse(int1 == int0);
      assertEquals(1093664768, int1);
      
      Float float0 = new Float(21.063618F);
      assertNotNull(float0);
      assertEquals(21.063618F, (float)float0, 0.01F);
      
      Float float1 = new Float(3.141592653589793);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3.1415927F, (float)float1, 0.01F);
      
      wall1.setArcExtent(float1);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(395.00516F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertEquals(405.53696F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1102.4496F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(21.063618F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3.1415927F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1731.7238F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("Invalid URL base for JAR entry", "Invalid URL base for JAR entry", uRLContent0, 438.0763F, (-3901.7F), "Invalid URL base for JAR entry");
      assertNotNull(catalogTexture0);
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-3901.7F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getId());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getName());
      assertEquals(438.0763F, catalogTexture0.getWidth(), 0.01F);
      
      String string0 = catalogTexture0.getName();
      assertNotNull(string0);
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-3901.7F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getId());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getName());
      assertEquals(438.0763F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", string0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-3901.7F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getId());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getName());
      assertEquals(438.0763F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeTexture0.getName());
      assertEquals(438.0763F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-3901.7F), homeTexture0.getHeight(), 0.01F);
      
      wall1.setRightSideTexture(homeTexture0);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(395.00516F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertEquals(405.53696F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1102.4496F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(21.063618F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3.1415927F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1731.7238F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-3901.7F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getId());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("Invalid URL base for JAR entry", catalogTexture0.getName());
      assertEquals(438.0763F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeTexture0.getName());
      assertEquals(438.0763F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-3901.7F), homeTexture0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setLeftSideShininess(0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall((-1552.3634F), (-1595.0F), 1.0F, 0.0F, (-1595.0F));
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-775.6817F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1595.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1552.3634F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1595.0F), wall0.getYStart(), 0.01F);
      assertEquals(2226.4238F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-797.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2226.4238F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      wall0.setLeftSideColor((Integer) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-775.6817F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1595.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1552.3634F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1595.0F), wall0.getYStart(), 0.01F);
      assertEquals(2226.4238F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-797.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2226.4238F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 308.88F, 308.88F);
      assertNotNull(wall0);
      assertEquals(154.44F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(308.88F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(308.88F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(308.88F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(308.88F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertEquals(154.44F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(308.88F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(308.88F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(308.88F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(308.88F, wall0.getYEnd(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-2811.8318F), (-2811.8318F), (-2811.8318F), (-2811.8318F));
      assertNotNull(wall0);
      assertEquals((-2811.8318F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2811.8318F), wall0.getYEnd(), 0.01F);
      assertEquals((-2811.8318F), wall0.getXEnd(), 0.01F);
      assertEquals((-1405.9159F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3976.5308F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2811.8318F), wall0.getHeight(), 0.01F);
      assertEquals((-1405.9159F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      int int0 = Float.compare(373.939F, (-3236.1826F));
      assertEquals(1, int0);
      
      Integer integer0 = new Integer(5021);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(5021, (int)integer0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals((-2811.8318F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2811.8318F), wall0.getYEnd(), 0.01F);
      assertEquals((-2811.8318F), wall0.getXEnd(), 0.01F);
      assertEquals((-1405.9159F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3976.5308F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2811.8318F), wall0.getHeight(), 0.01F);
      assertEquals((-1405.9159F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-2811.8318F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2811.8318F), wall0.getYEnd(), 0.01F);
      assertEquals((-2811.8318F), wall0.getXEnd(), 0.01F);
      assertEquals((-1405.9159F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3976.5308F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2811.8318F), wall0.getHeight(), 0.01F);
      assertEquals((-1405.9159F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-2811.8318F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2811.8318F), wall0.getYEnd(), 0.01F);
      assertEquals((-2811.8318F), wall0.getXEnd(), 0.01F);
      assertEquals((-1405.9159F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3976.5308F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2811.8318F), wall0.getHeight(), 0.01F);
      assertEquals((-1405.9159F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals((-2811.8318F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2811.8318F), wall0.getYEnd(), 0.01F);
      assertEquals((-2811.8318F), wall0.getXEnd(), 0.01F);
      assertEquals((-1405.9159F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3976.5308F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2811.8318F), wall0.getHeight(), 0.01F);
      assertEquals((-1405.9159F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2811.8318F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2811.8318F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1405.9159F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2811.8318F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3976.5308F, wall1.getLength(), 0.01F);
      assertEquals((-1405.9159F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2811.8318F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setThickness((-3236.1826F));
      assertEquals((-2811.8318F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2811.8318F), wall0.getYEnd(), 0.01F);
      assertEquals((-2811.8318F), wall0.getXEnd(), 0.01F);
      assertEquals((-1405.9159F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3976.5308F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2811.8318F), wall0.getHeight(), 0.01F);
      assertEquals((-1405.9159F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2811.8318F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1405.9159F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2811.8318F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3976.5308F, wall1.getLength(), 0.01F);
      assertEquals((-1405.9159F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2811.8318F), wall1.getXEnd(), 0.01F);
      assertEquals((-3236.1826F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall0.getYStart();
      assertEquals((-2811.8318F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2811.8318F), wall0.getYEnd(), 0.01F);
      assertEquals((-2811.8318F), wall0.getXEnd(), 0.01F);
      assertEquals((-1405.9159F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3976.5308F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2811.8318F), wall0.getHeight(), 0.01F);
      assertEquals((-1405.9159F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float((-3236.1826F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3236.1826F), (float)float1, 0.01F);
      
      float float2 = Float.min(0.1F, (-3236.1826F));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-3236.1826F), float2, 0.01F);
      
      wall1.setArcExtent(float1);
      assertEquals((-2811.8318F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2811.8318F), wall0.getYEnd(), 0.01F);
      assertEquals((-2811.8318F), wall0.getXEnd(), 0.01F);
      assertEquals((-1405.9159F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3976.5308F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2811.8318F), wall0.getHeight(), 0.01F);
      assertEquals((-1405.9159F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2811.8318F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(6731.0566F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3.7791884E7F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-9542.889F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2811.8318F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-3236.1826F), wall1.getArcExtent(), 0.01F);
      assertEquals((-2811.8318F), wall1.getXEnd(), 0.01F);
      assertEquals((-3236.1826F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      
      boolean boolean0 = wall0.containsPoint(1.0F, 1752.475F, (-3236.1826F));
      assertEquals((-2811.8318F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2811.8318F), wall0.getYEnd(), 0.01F);
      assertEquals((-2811.8318F), wall0.getXEnd(), 0.01F);
      assertEquals((-1405.9159F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3976.5308F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2811.8318F), wall0.getHeight(), 0.01F);
      assertEquals((-1405.9159F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals((-2811.8318F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2811.8318F), wall0.getYEnd(), 0.01F);
      assertEquals((-2811.8318F), wall0.getXEnd(), 0.01F);
      assertEquals((-1405.9159F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3976.5308F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2811.8318F), wall0.getHeight(), 0.01F);
      assertEquals((-1405.9159F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3976.5308F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 846.2F, 846.2F, 846.2F, 846.2F, (-1255.424F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(846.2F, wall1.getYEnd(), 0.01F);
      assertEquals(846.2F, wall1.getLength(), 0.01F);
      assertEquals(846.2F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd((-2355.0F));
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart(846.2F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      int int0 = Float.compare((-1255.424F), (-1.0F));
      assertEquals((-1), int0);
      
      int int1 = Float.compare(0.01F, 345.319F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Float float0 = new Float((-509.97397F));
      assertNotNull(float0);
      assertEquals((-509.97397F), (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals((-509.97397F), float1, 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-509.97397F), float2, 0.01F);
      
      float float3 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals((-509.97397F), float3, 0.01F);
      
      wall1.setHeight((Float) (-509.97397F));
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-509.97397F), wall1.getHeight(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = new Float((-1547.043F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-1547.043F), (float)float4, 0.01F);
      
      wall1.setArcExtent(float0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(1705226.1F, wall1.getLength(), 0.01F);
      assertEquals((-509.97397F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1496.8347F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-509.97397F), wall1.getHeight(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2385.5525F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(0, (int)integer0);
      
      wall1.setRightSideColor(integer0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(1705226.1F, wall1.getLength(), 0.01F);
      assertEquals((-509.97397F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1496.8347F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-509.97397F), wall1.getHeight(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0, (int)wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2385.5525F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = wall1.containsWallEndAt((-1255.424F), (-2355.0F), (-509.97397F));
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(1705226.1F, wall1.getLength(), 0.01F);
      assertEquals((-509.97397F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1496.8347F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-509.97397F), wall1.getHeight(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0, (int)wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2385.5525F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall((-5492.43F), (-5492.43F), (-1065.4F), (-5492.43F), (-1065.4F), (-1065.4F));
      assertNotNull(wall0);
      assertEquals(4427.0303F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1065.4F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-5492.43F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3278.915F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-5492.43F), wall0.getXStart(), 0.01F);
      assertEquals((-1065.4F), wall0.getHeight(), 0.01F);
      assertEquals(4427.0303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-5492.43F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1065.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-5492.43F), wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((-1065.4F));
      assertNotNull(float0);
      assertEquals((-1065.4F), (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals((-1065.4F), float1, 0.01F);
      
      float float2 = Float.max((-1065.4F), (-1065.4F));
      assertEquals(float2, float1, 0.01F);
      assertEquals((-1065.4F), float2, 0.01F);
      
      float float3 = float0.floatValue();
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals((-1065.4F), float3, 0.01F);
      
      float float4 = Float.sum(0.0F, 0.0F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      
      float float5 = float0.floatValue();
      assertEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(float5, float1, 0.01F);
      assertEquals(float5, float3, 0.01F);
      assertEquals(float5, float2, 0.01F);
      assertEquals((-1065.4F), float5, 0.01F);
      
      wall0.setHeightAtEnd((Float) (-1065.4F));
      assertEquals(4427.0303F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1065.4F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-5492.43F), wall0.getYStart(), 0.01F);
      assertEquals((-1065.4F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3278.915F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-5492.43F), wall0.getXStart(), 0.01F);
      assertEquals((-1065.4F), wall0.getHeight(), 0.01F);
      assertEquals(4427.0303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-5492.43F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1065.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-5492.43F), wall0.getYEnd(), 0.01F);
      
      wall0.move(0.0F, 399.263F);
      assertEquals(4427.0303F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1065.4F), wall0.getThickness(), 0.01F);
      assertEquals((-5093.167F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1065.4F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3278.915F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-5093.167F), wall0.getYStart(), 0.01F);
      assertEquals((-5093.167F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-5492.43F), wall0.getXStart(), 0.01F);
      assertEquals((-1065.4F), wall0.getHeight(), 0.01F);
      assertEquals(4427.0303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1065.4F), wall0.getXEnd(), 0.01F);
      
      Integer integer0 = new Integer((-2125725963));
      assertNotNull(integer0);
      assertEquals((-2125725963), (int)integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(4427.0303F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1065.4F), wall0.getThickness(), 0.01F);
      assertEquals((-5093.167F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1065.4F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2125725963), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3278.915F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-5093.167F), wall0.getYStart(), 0.01F);
      assertEquals((-5093.167F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-5492.43F), wall0.getXStart(), 0.01F);
      assertEquals((-1065.4F), wall0.getHeight(), 0.01F);
      assertEquals(4427.0303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1065.4F), wall0.getXEnd(), 0.01F);
      
      float float6 = wall0.getXStart();
      assertEquals(4427.0303F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1065.4F), wall0.getThickness(), 0.01F);
      assertEquals((-5093.167F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1065.4F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2125725963), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3278.915F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-5093.167F), wall0.getYStart(), 0.01F);
      assertEquals((-5093.167F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-5492.43F), wall0.getXStart(), 0.01F);
      assertEquals((-1065.4F), wall0.getHeight(), 0.01F);
      assertEquals(4427.0303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1065.4F), wall0.getXEnd(), 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertEquals((-5492.43F), float6, 0.01F);
      
      int int0 = Float.floatToIntBits(179.05F);
      assertEquals(1127419085, int0);
      
      int int1 = Float.floatToIntBits(1.0F);
      assertFalse(int1 == int0);
      assertEquals(1065353216, int1);
      
      int int2 = Float.floatToIntBits(1127419085);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1317430810, int2);
      
      int int3 = Float.floatToIntBits((-2635.901F));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-987447702), int3);
      
      wall0.setHeight((Float) (-2635.901F));
      assertEquals(4427.0303F, wall0.getLength(), 0.01F);
      assertEquals((-1065.4F), wall0.getThickness(), 0.01F);
      assertEquals((-5093.167F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1065.4F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2125725963), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2635.901F), wall0.getHeight(), 0.01F);
      assertEquals((-3278.915F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-5093.167F), wall0.getYStart(), 0.01F);
      assertEquals((-5093.167F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-5492.43F), wall0.getXStart(), 0.01F);
      assertEquals(4427.0303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-1065.4F), wall0.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(4427.0303F, wall0.getLength(), 0.01F);
      assertEquals((-1065.4F), wall0.getThickness(), 0.01F);
      assertEquals((-5093.167F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1065.4F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2125725963), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2635.901F), wall0.getHeight(), 0.01F);
      assertEquals((-3278.915F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-5093.167F), wall0.getYStart(), 0.01F);
      assertEquals((-5093.167F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-5492.43F), wall0.getXStart(), 0.01F);
      assertEquals(4427.0303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-1065.4F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 846.2F, 846.2F, 846.2F, 846.2F, (-1255.424F));
      assertNotNull(wall0);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getYEnd(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(846.2F, wall1.getLength(), 0.01F);
      assertEquals(846.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd((-2355.0F));
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart(846.2F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      int int0 = Float.compare((-1255.424F), (-1.0F));
      assertEquals((-1), int0);
      
      int int1 = Float.compare(0.01F, 345.319F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Float float0 = new Float((-509.97397F));
      assertNotNull(float0);
      assertEquals((-509.97397F), (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals((-509.97397F), float1, 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-509.97397F), float2, 0.01F);
      
      float float3 = float0.floatValue();
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals((-509.97397F), float3, 0.01F);
      
      wall1.setHeight((Float) (-509.97397F));
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-509.97397F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = new Float((-1547.043F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-1547.043F), (float)float4, 0.01F);
      
      wall1.setArcExtent(float0);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1705226.1F, wall1.getLength(), 0.01F);
      assertEquals((-509.97397F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1496.8347F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-509.97397F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2385.5525F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      
      boolean boolean0 = wall1.containsPoint(1073.0F, (-1.0F), 507.5936F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1705226.1F, wall1.getLength(), 0.01F);
      assertEquals((-509.97397F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1496.8347F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-509.97397F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2385.5525F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNull(wall2);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-784.0F), (-784.0F), (-784.0F), 0.0F);
      assertNotNull(wall0);
      assertEquals((-784.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-784.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-392.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(784.0F, wall0.getLength(), 0.01F);
      assertEquals(784.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals((-784.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-784.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-392.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(784.0F, wall0.getLength(), 0.01F);
      assertEquals(784.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      float float2 = Float.min(0.0F, 0.0F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      boolean boolean0 = float1.equals("1`EX");
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      wall0.setHeightAtEnd(float1);
      assertEquals((-784.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-784.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-392.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(784.0F, wall0.getLength(), 0.01F);
      assertEquals(784.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float float3 = Float.max(1.0F, 1.0F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(1.0F, float3, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals((-784.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-784.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-392.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(784.0F, wall0.getLength(), 0.01F);
      assertEquals(784.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-784.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(784.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-784.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-392.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-784.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-784.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(784.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-784.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-784.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-392.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(784.0F, wall0.getLength(), 0.01F);
      assertEquals(784.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-784.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(784.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-784.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-392.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-784.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-784.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(784.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = new Float(0.0F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals((-784.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-784.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-784.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-392.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(784.0F, wall0.getLength(), 0.01F);
      assertEquals(784.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall1);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = Float.min(0.0F, 0.105179824F);
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 3.1415927F, (-1.0F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(0.0F, (-1361.0F), (-1292.0912F), 0.0F, 3180.55F);
      assertNotNull(wall2);
      assertEquals((-1292.0912F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1876.6515F, wall2.getLength(), 0.01F);
      assertEquals(1876.6515F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1361.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(3180.55F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-646.0456F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-680.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall1.setWallAtEnd(wall2);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1292.0912F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1876.6515F, wall2.getLength(), 0.01F);
      assertEquals(1876.6515F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1361.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(3180.55F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-646.0456F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-680.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      boolean boolean1 = wall2.containsWallStartAt(0.0F, (-1.0F), (-246.18F));
      assertEquals((-1292.0912F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1876.6515F, wall2.getLength(), 0.01F);
      assertEquals(1876.6515F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1361.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(3180.55F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-646.0456F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-680.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[][] floatArray0 = wall2.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals((-1292.0912F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1876.6515F, wall2.getLength(), 0.01F);
      assertEquals(1876.6515F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1361.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(3180.55F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-646.0456F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-680.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall2));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(wall2));
      assertFalse(list0.contains(wall2));
      
      Integer integer0 = wall1.getRightSideColor();
      assertNull(integer0);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall3 = wall0.getWallAtEnd();
      assertNull(wall3);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall(2107.9238F, 0.0F, 0.0F, 2107.9238F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 1104.53F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits(0.0F);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      int int2 = Float.compare(1104.53F, (-1749.1738F));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float1 = wall0.getArcExtent();
      assertNotNull(float1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, (float)float1, 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle((-1376.2F), 0, 2.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer1 = wall0.getRightSideColor();
      assertNull(integer1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setHeightAtEnd(float1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall((-1065.4F), (-1065.4F), 431.489F, (-596.191F), (-2070.0667F), 0.01F);
      assertNotNull(wall0);
      assertEquals((-596.191F), wall0.getYEnd(), 0.01F);
      assertEquals(1568.7046F, wall0.getLength(), 0.01F);
      assertEquals((-2070.0667F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1568.7046F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(431.489F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-1065.4F), wall0.getXStart(), 0.01F);
      assertEquals((-316.9555F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-830.79553F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1065.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((-1124.0F));
      assertNotNull(float0);
      assertEquals((-1124.0F), (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals((-1124.0F), float1, 0.01F);
      
      float float2 = Float.max((-1065.4F), 0.0F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      Float float3 = new Float(4977.96F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(4977.96F, (float)float3, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float3.equals(object0);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      float float4 = float3.floatValue();
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(4977.96F, float4, 0.01F);
      
      float float5 = Float.sum(431.489F, (-509.97397F));
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals((-78.484955F), float5, 0.01F);
      
      int int0 = Float.compare((-3037.456F), (-3037.456F));
      assertEquals(0, int0);
      
      float float6 = ((Float)(-3037.456F)).floatValue();
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertEquals((-3037.456F), float6, 0.01F);
      
      int int1 = Float.compare(12.781F, 12.781F);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      wall0.setHeightAtEnd((Float) 12.781F);
      assertEquals((-596.191F), wall0.getYEnd(), 0.01F);
      assertEquals(1568.7046F, wall0.getLength(), 0.01F);
      assertEquals((-2070.0667F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1568.7046F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(431.489F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-1065.4F), wall0.getXStart(), 0.01F);
      assertEquals((-316.9555F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-830.79553F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1065.4F), wall0.getYStart(), 0.01F);
      assertEquals(12.781F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      
      wall0.move((-97.7F), 431.489F);
      assertEquals((-164.70197F), wall0.getYEnd(), 0.01F);
      assertEquals((-633.911F), wall0.getYStart(), 0.01F);
      assertEquals((-2070.0667F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1568.7045F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-414.6555F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1163.1F), wall0.getXStart(), 0.01F);
      assertEquals(12.781F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-399.3065F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(333.789F, wall0.getXEnd(), 0.01F);
      assertEquals(1568.7045F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall1);
      assertEquals((-164.70197F), wall0.getYEnd(), 0.01F);
      assertEquals((-633.911F), wall0.getYStart(), 0.01F);
      assertEquals((-2070.0667F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1568.7045F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-414.6555F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1163.1F), wall0.getXStart(), 0.01F);
      assertEquals(12.781F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-399.3065F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(333.789F, wall0.getXEnd(), 0.01F);
      assertEquals(1568.7045F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall(790.01025F, 0.0F, 21.063618F, 790.01025F, 0.0F, 790.01025F);
      assertNotNull(wall0);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertEquals(405.53693F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1102.4496F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(21.063618F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1102.4496F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = wall1.getRightSideColor();
      assertNull(integer0);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertEquals(405.53693F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1102.4496F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(21.063618F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1102.4496F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall((-840.9477F), 363.672F, 790.01025F, 21.063618F, 4451.117F, 189.0F);
      assertNotNull(wall2);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(192.36781F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-25.46872F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4451.117F, wall2.getThickness(), 0.01F);
      assertEquals(363.672F, wall2.getYStart(), 0.01F);
      assertEquals(1666.5547F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-840.9477F), wall2.getXStart(), 0.01F);
      assertEquals(21.063618F, wall2.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall2.getXEnd(), 0.01F);
      assertEquals(1666.5547F, wall2.getLength(), 0.01F);
      assertEquals(189.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setWallAtStart(wall2);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertEquals(405.53693F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1102.4496F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(21.063618F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1102.4496F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(192.36781F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-25.46872F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4451.117F, wall2.getThickness(), 0.01F);
      assertEquals(363.672F, wall2.getYStart(), 0.01F);
      assertEquals(1666.5547F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-840.9477F), wall2.getXStart(), 0.01F);
      assertEquals(21.063618F, wall2.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall2.getXEnd(), 0.01F);
      assertEquals(1666.5547F, wall2.getLength(), 0.01F);
      assertEquals(189.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float0 = Float.max(1585.01F, (-1022.57825F));
      assertEquals(1585.01F, float0, 0.01F);
      
      wall2.setWallAtStart(wall1);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertEquals(405.53693F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1102.4496F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(21.063618F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1102.4496F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(192.36781F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-25.46872F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4451.117F, wall2.getThickness(), 0.01F);
      assertEquals(363.672F, wall2.getYStart(), 0.01F);
      assertEquals(1666.5547F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-840.9477F), wall2.getXStart(), 0.01F);
      assertEquals(21.063618F, wall2.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall2.getXEnd(), 0.01F);
      assertEquals(1666.5547F, wall2.getLength(), 0.01F);
      assertEquals(189.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(790.01025F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.4496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1102.4496F, wall0.getLength(), 0.01F);
      assertEquals(405.53693F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21.063618F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(395.00513F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getXStart(), 0.01F);
      assertEquals(405.53693F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(395.00513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1102.4496F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(790.01025F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(21.063618F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1102.4496F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float0 = wall0.getYStart();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.0F, float0, 0.01F);
      
      Float float1 = new Float((double) 93.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(93.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall(2107.9238F, 0.0F, 0.0F, 2107.9238F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 1104.53F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1053.9619F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertEquals(1053.9619F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits(0.0F);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.7212504E19F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.7212504E19F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2981.0544F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.7212504E19F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.0559997E-5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.7212504E19F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.0559997E-5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.7212504E19F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.0559997E-5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      int int2 = Float.compare(0.0F, (-1732.25F));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = Float.compare(1633.286F, (-465.6F));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      int int4 = Float.compare(1, 1562.6064F);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals((-1), int4);
      
      wall0.setHeight((Float) 1562.6064F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float0 = new Float((-465.6F));
      assertNotNull(float0);
      assertEquals((-465.6F), (float)float0, 0.01F);
      
      wall1.setArcExtent(float0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-465.6F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1549965.9F, wall1.getLength(), 0.01F);
      assertEquals(1053.9619F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3157.7156F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall0.getThickness();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setRightSideShininess(2107.9238F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer1 = wall0.getLeftSideColor();
      assertNull(integer1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2981.0544F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2107.9238F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2981.0544F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2107.9238F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1562.6064F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.7212504E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2107.9238F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-465.6F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1549965.9F, wall1.getLength(), 0.01F);
      assertEquals(1053.9619F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2107.9238F, wall1.getXStart(), 0.01F);
      assertEquals(2107.9238F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3157.7156F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall((-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F), (-301.76428F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertNull(float0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
      
      wall0.setHeight((Float) null);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-301.76428F), wall0.getYEnd(), 0.01F);
      assertEquals((-301.76428F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-301.76428F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-301.76428F), wall0.getXStart(), 0.01F);
      assertEquals((-301.76428F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-301.76428F), wall0.getThickness(), 0.01F);
      assertEquals((-301.76428F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall((-84.334F), (-3345.128F), (-84.334F), (-84.334F), 0.0F);
      assertNotNull(wall0);
      assertEquals((-84.334F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3260.794F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3260.794F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1714.731F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-84.334F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3345.128F), wall0.getYStart(), 0.01F);
      assertEquals((-84.334F), wall0.getXEnd(), 0.01F);
      assertEquals((-84.334F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXStart((-3683.871F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3683.871F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1714.731F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3345.128F), wall0.getYStart(), 0.01F);
      assertEquals(4856.8965F, wall0.getLength(), 0.01F);
      assertEquals((-1884.1025F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-84.334F), wall0.getXEnd(), 0.01F);
      assertEquals(4856.8965F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-84.334F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      int int0 = Float.compare((-84.334F), 0.0F);
      assertEquals((-1), int0);
      
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      float float1 = Float.min((-3345.128F), (-1));
      assertEquals((-3345.128F), float1, 0.01F);
      
      boolean boolean0 = Float.isFinite((-3039.531F));
      assertTrue(boolean0);
      
      Float float2 = new Float((-3345.128F));
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-3345.128F), (float)float2, 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-1), (-3345.128F), 1.0F, 0.0F, 2.0F);
      assertNotNull(wall1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1672.564F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3345.1284F, wall1.getLength(), 0.01F);
      assertEquals(3345.1284F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-3345.128F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1672.564F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3345.1284F, wall1.getLength(), 0.01F);
      assertEquals(3345.1284F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-3345.128F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3683.871F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1714.731F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3345.128F), wall0.getYStart(), 0.01F);
      assertEquals(4856.8965F, wall0.getLength(), 0.01F);
      assertEquals((-1884.1025F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-84.334F), wall0.getXEnd(), 0.01F);
      assertEquals(4856.8965F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-84.334F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1672.564F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3345.1284F, wall1.getLength(), 0.01F);
      assertEquals(3345.1284F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-3345.128F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = Float.max(1416.8673F, 526.652F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(1416.8673F, float3, 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3683.871F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1714.731F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3345.128F), wall0.getYStart(), 0.01F);
      assertEquals(4856.8965F, wall0.getLength(), 0.01F);
      assertEquals((-1884.1025F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-84.334F), wall0.getXEnd(), 0.01F);
      assertEquals(4856.8965F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-84.334F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1672.564F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3345.1284F, wall1.getLength(), 0.01F);
      assertEquals(3345.1284F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-3345.128F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3683.871F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1714.731F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3345.128F), wall0.getYStart(), 0.01F);
      assertEquals(4856.8965F, wall0.getLength(), 0.01F);
      assertEquals((-1884.1025F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-84.334F), wall0.getXEnd(), 0.01F);
      assertEquals(4856.8965F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-84.334F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float float4 = new Float(0.0F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(93.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float float0 = wall0.getYStart();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(93.0F, float0, 0.01F);
      
      Float float1 = Float.valueOf(3563.8416F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3563.8416F, (float)float1, 0.01F);
      
      boolean boolean0 = float1.equals((Object) null);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(3563.8416F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(3563.8416F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      
      int int0 = Float.compare(1346.1F, 1346.1F);
      assertEquals(0, int0);
      
      wall0.setHeightAtEnd((Float) 1346.1F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1346.1F, wall0.getHeightAtEnd(), 0.01F);
      
      float float2 = wall0.getYEnd();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(93.0F, wall0.getHeight(), 0.01F);
      assertEquals(93.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1346.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(93.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, 0.0F, (-1299.1F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2678.2F), (-2678.2F), 0.0F, 2299.015F, (-30.3F));
      assertNotNull(wall0);
      assertEquals((-1339.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5652.0283F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-189.59253F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2299.015F, wall0.getYEnd(), 0.01F);
      assertEquals(5652.0283F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-30.3F), wall0.getThickness(), 0.01F);
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1339.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5652.0283F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-189.59253F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2299.015F, wall0.getYEnd(), 0.01F);
      assertEquals(5652.0283F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-30.3F), wall0.getThickness(), 0.01F);
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      
      wall0.setXEnd(2299.015F);
      assertEquals((-189.59253F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2299.015F, wall0.getYEnd(), 0.01F);
      assertEquals(2299.015F, wall0.getXEnd(), 0.01F);
      assertEquals(7038.8447F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-189.59253F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7038.8447F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-30.3F), wall0.getThickness(), 0.01F);
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      
      wall0.setXStart(1429.15F);
      assertEquals(5052.656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-189.59253F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2299.015F, wall0.getYEnd(), 0.01F);
      assertEquals(2299.015F, wall0.getXEnd(), 0.01F);
      assertEquals(1429.15F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1864.0825F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5052.656F, wall0.getLength(), 0.01F);
      assertEquals((-30.3F), wall0.getThickness(), 0.01F);
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      
      wall0.setRightSideShininess((-504.141F));
      assertEquals(5052.656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-189.59253F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2299.015F, wall0.getYEnd(), 0.01F);
      assertEquals(2299.015F, wall0.getXEnd(), 0.01F);
      assertEquals(1429.15F, wall0.getXStart(), 0.01F);
      assertEquals((-504.141F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1864.0825F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5052.656F, wall0.getLength(), 0.01F);
      assertEquals((-30.3F), wall0.getThickness(), 0.01F);
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 790.01025F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getLength(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(395.00513F, wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getLength(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(395.00513F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(395.00513F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setThickness(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getLength(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(395.00513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = wall0.containsWallStartAt((-202.7F), (-4378.809F), 2753.0764F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getLength(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(395.00513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      
      wall1.setThickness(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getLength(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(395.00513F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(395.00513F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getLength(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(395.00513F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(790.01025F, wall1.getLength(), 0.01F);
      assertEquals(790.01025F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(395.00513F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(790.01025F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = Float.max(0.0F, (-3681.2612F));
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(790.01025F, wall0.getLength(), 0.01F);
      assertEquals(790.01025F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(790.01025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(395.00513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall wall0 = new Wall((-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F), (-302.59738F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-302.59738F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-302.59738F), wall0.getYStart(), 0.01F);
      assertEquals((-302.59738F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-302.59738F), wall0.getYEnd(), 0.01F);
      assertEquals((-302.59738F), wall0.getThickness(), 0.01F);
      assertEquals((-302.59738F), wall0.getHeight(), 0.01F);
      assertEquals((-302.59738F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-302.59738F), wall0.getXEnd(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-302.59738F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-302.59738F), wall0.getYStart(), 0.01F);
      assertEquals((-302.59738F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-302.59738F), wall0.getYEnd(), 0.01F);
      assertEquals((-302.59738F), wall0.getThickness(), 0.01F);
      assertEquals((-302.59738F), wall0.getHeight(), 0.01F);
      assertEquals((-302.59738F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-302.59738F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall(718.9871F, (-1538.0526F), (-1538.0526F), 2271.16F, 2271.16F);
      assertNotNull(wall0);
      assertEquals(2271.16F, wall0.getYEnd(), 0.01F);
      assertEquals(4427.6777F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1538.0526F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(718.9871F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2271.16F, wall0.getThickness(), 0.01F);
      assertEquals((-409.53275F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(366.55365F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4427.6777F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1538.0526F), wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall((-2631.4912F), (-1810.345F), (-1810.345F), 718.9871F, 1306.3F, 718.9871F);
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1810.345F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2659.286F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1810.345F), wall1.getXEnd(), 0.01F);
      assertEquals((-2631.4912F), wall1.getXStart(), 0.01F);
      assertEquals(718.9871F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2659.286F, wall1.getLength(), 0.01F);
      assertEquals(1306.3F, wall1.getThickness(), 0.01F);
      assertEquals((-2220.918F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-545.67896F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(718.9871F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(2271.16F, wall0.getYEnd(), 0.01F);
      assertEquals(4427.6777F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1538.0526F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(718.9871F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2271.16F, wall0.getThickness(), 0.01F);
      assertEquals((-409.53275F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(366.55365F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4427.6777F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1538.0526F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1810.345F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2659.286F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1810.345F), wall1.getXEnd(), 0.01F);
      assertEquals((-2631.4912F), wall1.getXStart(), 0.01F);
      assertEquals(718.9871F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2659.286F, wall1.getLength(), 0.01F);
      assertEquals(1306.3F, wall1.getThickness(), 0.01F);
      assertEquals((-2220.918F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-545.67896F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(718.9871F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setLeftSideShininess(1119.121F);
      assertEquals(2271.16F, wall0.getYEnd(), 0.01F);
      assertEquals(4427.6777F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1538.0526F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(718.9871F, wall0.getXStart(), 0.01F);
      assertEquals(2271.16F, wall0.getThickness(), 0.01F);
      assertEquals((-409.53275F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(366.55365F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4427.6777F, wall0.getLength(), 0.01F);
      assertEquals(1119.121F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1538.0526F), wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotNull(wall2);
      assertEquals(2271.16F, wall0.getYEnd(), 0.01F);
      assertEquals(4427.6777F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1538.0526F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(718.9871F, wall0.getXStart(), 0.01F);
      assertEquals(2271.16F, wall0.getThickness(), 0.01F);
      assertEquals((-409.53275F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(366.55365F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4427.6777F, wall0.getLength(), 0.01F);
      assertEquals(1119.121F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1538.0526F), wall0.getXEnd(), 0.01F);
      assertEquals((-1810.345F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(718.9871F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2220.918F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2631.4912F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2659.286F, wall2.getLength(), 0.01F);
      assertEquals((-1810.345F), wall2.getYStart(), 0.01F);
      assertEquals((-545.67896F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2659.286F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1306.3F, wall2.getThickness(), 0.01F);
      assertEquals(718.9871F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("@_}ydJ=SCt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.@_}ydJ=SCt
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Wall wall0 = new Wall(2130.8542F, 2130.8542F, 2130.8542F, 2130.8542F, 2130.8542F);
      assertNotNull(wall0);
      assertEquals(2130.8542F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2130.8542F, wall0.getXStart(), 0.01F);
      assertEquals(2130.8542F, wall0.getYStart(), 0.01F);
      assertEquals(2130.8542F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2130.8542F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2130.8542F, wall0.getYEnd(), 0.01F);
      assertEquals(2130.8542F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(2130.8542F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2130.8542F, wall0.getXStart(), 0.01F);
      assertEquals(2130.8542F, wall0.getYStart(), 0.01F);
      assertEquals(2130.8542F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2130.8542F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2130.8542F, wall0.getYEnd(), 0.01F);
      assertEquals(2130.8542F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertEquals(2130.8542F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2130.8542F, wall0.getXStart(), 0.01F);
      assertEquals(2130.8542F, wall0.getYStart(), 0.01F);
      assertEquals(2130.8542F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2130.8542F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2130.8542F, wall0.getYEnd(), 0.01F);
      assertEquals(2130.8542F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals(2130.8542F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2130.8542F, wall0.getXStart(), 0.01F);
      assertEquals(2130.8542F, wall0.getYStart(), 0.01F);
      assertEquals(2130.8542F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2130.8542F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2130.8542F, wall0.getYEnd(), 0.01F);
      assertEquals(2130.8542F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Wall wall0 = new Wall(1.158346F, 1.158346F, 1.158346F, 1.158346F, 1.158346F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      int int0 = Float.compare(1.158346F, 1.158346F);
      assertEquals(0, int0);
      
      Float float0 = new Float(1.158346F);
      assertNotNull(float0);
      assertEquals(1.158346F, (float)float0, 0.01F);
      
      float float1 = Float.min(0, (-1463.1013F));
      assertEquals((-1463.1013F), float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(1.158346F);
      assertTrue(boolean0);
      
      Float float2 = new Float((float) 0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Wall wall1 = new Wall(4451.117F, 1.158346F, 1.158346F, 0, 4451.117F);
      assertNotNull(wall1);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = Float.min(4451.117F, 0.105179824F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(0.105179824F, float3, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall1.intersectsRectangle(0.105179824F, 0.105179824F, 1.158346F, 1.158346F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(4451.117F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(4449.959F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.158346F, wall1.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall1.getYStart(), 0.01F);
      assertEquals(0.579173F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2226.1377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4451.117F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4449.959F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean2 = wall0.containsWallStartAt(1416.8673F, 1416.8673F, (-3645.0872F));
      assertEquals(1.158346F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.158346F, wall0.getXStart(), 0.01F);
      assertEquals(1.158346F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.158346F, wall0.getYEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXEnd(), 0.01F);
      assertEquals(1.158346F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.158346F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.158346F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2678.2F), (-2678.2F), (-12.533899F), (-2678.2F), (-30.3F));
      assertNotNull(wall0);
      assertEquals((-1345.367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2665.666F, wall0.getLength(), 0.01F);
      assertEquals((-2678.2F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.533899F), wall0.getXEnd(), 0.01F);
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2665.666F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-30.3F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall((-30.3F), 2665.034F, (-2678.2F), (-30.3F), (-12.533899F));
      assertNotNull(wall1);
      assertEquals(3778.3857F, wall1.getLength(), 0.01F);
      assertEquals((-30.3F), wall1.getXStart(), 0.01F);
      assertEquals(2665.034F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1354.25F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3778.3857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-12.533899F), wall1.getThickness(), 0.01F);
      assertEquals(1317.367F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-30.3F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-1345.367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2665.666F, wall0.getLength(), 0.01F);
      assertEquals((-2678.2F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.533899F), wall0.getXEnd(), 0.01F);
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2665.666F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-30.3F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3778.3857F, wall1.getLength(), 0.01F);
      assertEquals((-30.3F), wall1.getXStart(), 0.01F);
      assertEquals(2665.034F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1354.25F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3778.3857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-12.533899F), wall1.getThickness(), 0.01F);
      assertEquals(1317.367F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-30.3F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1345.367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2665.666F, wall0.getLength(), 0.01F);
      assertEquals((-2678.2F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.533899F), wall0.getXEnd(), 0.01F);
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2665.666F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-30.3F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1345.367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2665.666F, wall0.getLength(), 0.01F);
      assertEquals((-2678.2F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.533899F), wall0.getXEnd(), 0.01F);
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2665.666F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-30.3F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotNull(wall2);
      assertEquals((-1345.367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2665.666F, wall0.getLength(), 0.01F);
      assertEquals((-2678.2F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.533899F), wall0.getXEnd(), 0.01F);
      assertEquals((-2678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-2678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2665.666F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-30.3F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-30.3F), wall2.getXStart(), 0.01F);
      assertEquals((-12.533899F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3778.3857F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1317.367F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2678.2F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2665.034F, wall2.getYStart(), 0.01F);
      assertEquals(3778.3857F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-30.3F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1354.25F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      float float0 = Float.max(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      Wall wall1 = new Wall(1.0F, (-3360.72F), 0.0F, 1.0F, 2608, 1.0F);
      assertNotNull(wall1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3361.7202F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1679.86F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2608.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3360.72F), wall1.getYStart(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3361.7202F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3361.7202F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1679.86F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2608.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3360.72F), wall1.getYStart(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3361.7202F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Wall wall0 = new Wall((-45.8F), (-45.8F), (-2897.789F), (-45.8F), 0.0F);
      assertNotNull(wall0);
      assertEquals((-2897.789F), wall0.getXEnd(), 0.01F);
      assertEquals((-45.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1471.7946F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-45.8F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2851.989F, wall0.getLength(), 0.01F);
      assertEquals((-45.8F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-45.8F), wall0.getYEnd(), 0.01F);
      assertEquals(2851.989F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals((-2897.789F), wall0.getXEnd(), 0.01F);
      assertEquals((-45.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1471.7946F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-45.8F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2851.989F, wall0.getLength(), 0.01F);
      assertEquals((-45.8F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-45.8F), wall0.getYEnd(), 0.01F);
      assertEquals(2851.989F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Wall wall0 = new Wall(74.52672F, 74.52672F, 74.52672F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(37.26336F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(74.52672F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setXEnd(74.52672F);
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(37.26336F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(74.52672F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      int int0 = Float.floatToIntBits(74.52672F);
      assertEquals(1117064622, int0);
      
      Float float0 = new Float((float) 1117064622);
      assertNotNull(float0);
      assertEquals(1.11706458E9F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(74.52672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.11706458E9F, wall0.getArcExtent(), 0.01F);
      assertEquals(37.26336F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(5.7033831E11F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(583.7339F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(74.52672F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(74.52672F, wall0.getYStart(), 0.01F);
      assertEquals(74.52672F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 846.2F, 846.2F, 846.2F, 846.2F, (-1255.424F));
      assertNotNull(wall0);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(846.2F, wall1.getYEnd(), 0.01F);
      assertEquals(846.2F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(846.2F, wall1.getLength(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(846.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYEnd((-2355.0F));
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-754.4F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3311.1533F, wall1.getLength(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3311.1533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(846.2F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart((-1.0F));
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2501.4736F, wall1.getLength(), 0.01F);
      assertEquals((-1255.424F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1178.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2501.4736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      int int0 = Float.compare((-1749.1738F), (-1.0F));
      assertEquals((-1), int0);
      
      int int1 = Float.compare(0.01F, 345.319F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Float float0 = new Float((-509.97397F));
      assertNotNull(float0);
      assertEquals((-509.97397F), (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals((-509.97397F), float1, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-509.97397F), float2, 0.01F);
      
      float float3 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals((-509.97397F), float3, 0.01F);
      
      wall1.setHeight((Float) (-509.97397F));
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-509.97397F), wall1.getHeight(), 0.01F);
      assertEquals(423.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2501.4736F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1178.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2501.4736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = new Float((-1547.043F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-1547.043F), (float)float4, 0.01F);
      
      wall1.setArcExtent(float0);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-509.97397F), wall1.getHeight(), 0.01F);
      assertEquals((-1920.4347F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1642.2405F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-509.97397F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1288245.4F, wall1.getLength(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2501.4736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      boolean boolean0 = wall1.containsPoint(1073.0F, (-1.0F), 507.5936F);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-509.97397F), wall1.getHeight(), 0.01F);
      assertEquals((-1920.4347F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1642.2405F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-509.97397F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(846.2F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2355.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1288245.4F, wall1.getLength(), 0.01F);
      assertEquals(846.2F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2501.4736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNull(wall2);
      assertEquals(846.2F, wall0.getYEnd(), 0.01F);
      assertEquals(846.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(846.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(846.2F, wall0.getLength(), 0.01F);
      assertEquals((-1255.424F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(846.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(846.2F, wall0.getYStart(), 0.01F);
      assertEquals(423.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(846.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Wall wall0 = new Wall(2.7546666F, 2.7546666F, (-2259.41F), 268.6562F, (-2259.41F));
      assertNotNull(wall0);
      assertEquals((-1128.3276F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2277.7383F, wall0.getLength(), 0.01F);
      assertEquals((-2259.41F), wall0.getXEnd(), 0.01F);
      assertEquals(135.70543F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2259.41F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.7546666F, wall0.getYStart(), 0.01F);
      assertEquals(2.7546666F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2277.7383F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(268.6562F, wall0.getYEnd(), 0.01F);
      
      float float0 = Float.min(0.1F, (-1841.815F));
      assertEquals((-1841.815F), float0, 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-22.304764F), (-2533.0F), (-2259.41F), 9874671.0F);
      assertEquals((-1128.3276F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2277.7383F, wall0.getLength(), 0.01F);
      assertEquals((-2259.41F), wall0.getXEnd(), 0.01F);
      assertEquals(135.70543F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2259.41F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.7546666F, wall0.getYStart(), 0.01F);
      assertEquals(2.7546666F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2277.7383F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(268.6562F, wall0.getYEnd(), 0.01F);
      assertTrue(boolean0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-1128.3276F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2277.7383F, wall0.getLength(), 0.01F);
      assertEquals((-2259.41F), wall0.getXEnd(), 0.01F);
      assertEquals(135.70543F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2259.41F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.7546666F, wall0.getYStart(), 0.01F);
      assertEquals(2.7546666F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2277.7383F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(268.6562F, wall0.getYEnd(), 0.01F);
      
      Float float1 = new Float(2155.4906344);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2155.4907F, (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((-2259.41F), wall0.getXEnd(), 0.01F);
      assertEquals((-2259.41F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.3781419E7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.7546666F, wall0.getYStart(), 0.01F);
      assertEquals((-6112.6636F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1862.7794F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.7546666F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2277.7383F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2155.4907F, wall0.getArcExtent(), 0.01F);
      assertEquals(268.6562F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(6740, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals((-2259.41F), wall0.getXEnd(), 0.01F);
      assertEquals((-2259.41F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.3781419E7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.7546666F, wall0.getYStart(), 0.01F);
      assertEquals((-6112.6636F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1862.7794F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.7546666F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2277.7383F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2155.4907F, wall0.getArcExtent(), 0.01F);
      assertEquals(268.6562F, wall0.getYEnd(), 0.01F);
      
      Float float2 = wall0.getHeight();
      assertNull(float2);
      assertEquals((-2259.41F), wall0.getXEnd(), 0.01F);
      assertEquals((-2259.41F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.3781419E7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.7546666F, wall0.getYStart(), 0.01F);
      assertEquals((-6112.6636F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1862.7794F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.7546666F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2277.7383F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2155.4907F, wall0.getArcExtent(), 0.01F);
      assertEquals(268.6562F, wall0.getYEnd(), 0.01F);
  }
}
